(-->
  op  "clone"
  id  "1"
)
(<--
  id  "1"
  new-session  "b07f713c-2fbb-44f5-ae1b-175ebc1a39a7"
  session  "f3033201-7590-4995-90e6-f02c4b508d48"
  status  ("done")
)
(-->
  op  "clone"
  id  "2"
)
(<--
  id  "2"
  new-session  "2fd88622-a6b6-4ec7-afab-6a5e2773051a"
  session  "1e9d6448-a280-4a08-a9d7-d75ccdc2af80"
  status  ("done")
)
(-->
  op  "describe"
  session  "b07f713c-2fbb-44f5-ae1b-175ebc1a39a7"
  id  "3"
)
(<--
  aux  (dict
         cider-version  (dict
                          incremental  "0"
                          major  "0"
                          minor  "13"
                          qualifier  "snapshot"
                          version-string  "0.13.0-snapshot")
         current-ns  "user")
  id  "3"
  ops  (dict
         apropos  (dict)
         artifact-list  (dict)
         artifact-versions  (dict)
         cider-version  (dict)
         classpath  (dict)
         clean-ns  (dict)
         clone  (dict)
         close  (dict)
         complete  (dict)
         complete-doc  (dict)
         debug-input  (dict)
         debug-instrumented-defs  (dict)
         debug-middleware  (dict)
         describe  (dict)
         eldoc  (dict)
         eval  (dict)
         extract-definition  (dict)
         find-symbol  (dict)
         find-used-locals  (dict)
         find-used-publics  (dict)
         format-code  (dict)
         format-edn  (dict)
         hotload-dependency  (dict)
         info  (dict)
         init-debugger  (dict)
         inspect-next-page  (dict)
         inspect-pop  (dict)
         inspect-prev-page  (dict)
         inspect-push  (dict)
         inspect-refresh  (dict)
         inspect-set-page-size  (dict)
         interrupt  (dict)
         load-file  (dict)
         ls-sessions  (dict)
         macroexpand  (dict)
         namespace-aliases  (dict)
         ns-list  (dict)
         ns-list-vars-by-name  (dict)
         ns-load-all  (dict)
         ns-path  (dict)
         ns-vars  (dict)
         ns-vars-with-meta  (dict)
         out-subscribe  (dict)
         out-unsubscribe  (dict)
         pprint-middleware  (dict)
         refresh  (dict)
         refresh-all  (dict)
         refresh-clear  (dict)
         rename-file-or-dir  (dict)
         resolve-missing  (dict)
         resource  (dict)
         resources-list  (dict)
         retest  (dict)
         stacktrace  (dict)
         stdin  (dict)
         stubs-for-interface  (dict)
         test  (dict)
         test-all  (dict)
         test-stacktrace  (dict)
         toggle-trace-ns  (dict)
         toggle-trace-var  (dict)
         track-state-middleware  (dict)
         undef  (dict)
         version  (dict)
         warm-ast-cache  (dict)
         warm-macro-occurrences-cache  (dict))
  session  "b07f713c-2fbb-44f5-ae1b-175ebc1a39a7"
  status  ("done")
  versions  (dict
              clojure  (dict
                         incremental  0
                         major  1
                         minor  7
                         version-string  "1.7.0")
              java  (dict
                      incremental  "0"
                      major  "1"
                      minor  "8"
                      update  "73"
                      version-string  "1.8.0_73")
              nrepl  (dict
                       incremental  "12"
                       major  "0"
                       minor  "2"
                       qualifier  ""
                       version-string  "0.2.12"))
)
(-->
  op  "eval"
  session  "b07f713c-2fbb-44f5-ae1b-175ebc1a39a7"
  code  "(str *ns*)"
  id  "4"
)
(<--
  id  "4"
  ns  "user"
  session  "b07f713c-2fbb-44f5-ae1b-175ebc1a39a7"
  value  "\"user\""
)
(<--
  id  "4"
  session  "b07f713c-2fbb-44f5-ae1b-175ebc1a39a7"
  status  ("done")
)
(-->
  op  "eval"
  session  "b07f713c-2fbb-44f5-ae1b-175ebc1a39a7"
  code  "(when (clojure.core/resolve 'clojure.main/repl-requires)\n      (clojure.core/map clojure.core/require clojure.main/repl-requires))"
  id  "5"
)
(-->
  op  "init-debugger"
  print-level  10
  print-length  10
  session  "b07f713c-2fbb-44f5-ae1b-175ebc1a39a7"
  id  "6"
)
(-->
  op  "out-subscribe"
  session  "b07f713c-2fbb-44f5-ae1b-175ebc1a39a7"
  id  "7"
)
(-->
  op  "version"
  prefix-rewriting  "true"
  debug  "false"
  session  "b07f713c-2fbb-44f5-ae1b-175ebc1a39a7"
  id  "8"
)
(<--
  changed-namespaces  (dict
                        user  (dict
                                aliases  (dict)
                                interns  (dict)))
  id  "4"
  repl-type  "clj"
  session  "b07f713c-2fbb-44f5-ae1b-175ebc1a39a7"
  status  ("state")
)
(<--
  id  "5"
  ns  "user"
  session  "b07f713c-2fbb-44f5-ae1b-175ebc1a39a7"
  value  "(nil nil nil)"
)
(<--
  id  "5"
  session  "b07f713c-2fbb-44f5-ae1b-175ebc1a39a7"
  status  ("done")
)
(<--
  id  "7"
  out-subscribe  "b07f713c-2fbb-44f5-ae1b-175ebc1a39a7"
  session  "b07f713c-2fbb-44f5-ae1b-175ebc1a39a7"
  status  ("done")
)
(<--
  changed-namespaces  (dict
                        user  (dict
                                aliases  (dict)
                                interns  (dict
                                           apropos  (dict
                                                      arglists  "([str-or-pattern])"
                                                      doc  "\"Given a regular expression or stringable thing, return a seq of all\\npublic definitions in all currently-loaded namespaces that match the\\nstr-or-pattern.\"")
                                           dir  (dict
                                                  arglists  "([nsname])"
                                                  doc  "\"Prints a sorted directory of public vars in a namespace\""
                                                  macro  "true")
                                           doc  (dict
                                                  arglists  "([name])"
                                                  doc  "\"Prints documentation for a var or special form given its name\""
                                                  macro  "true")
                                           find-doc  (dict
                                                       arglists  "([re-string-or-pattern])"
                                                       doc  "\"Prints documentation for any var whose documentation or name\\n contains a match for re-string-or-pattern\"")
                                           javadoc  (dict
                                                      arglists  "([class-or-object])"
                                                      doc  "\"Opens a browser window displaying the javadoc for the argument.\\n  Tries *local-javadocs* first, then *remote-javadocs*.\"")
                                           pp  (dict
                                                 arglists  "([])"
                                                 doc  "\"A convenience macro that pretty prints the last thing output. This is\\nexactly equivalent to (pprint *1).\""
                                                 macro  "true")
                                           pprint  (dict
                                                     arglists  "([object] [object writer])"
                                                     doc  "\"Pretty print object to the optional output writer. If the writer is not provided, \\nprint the object to the currently bound value of *out*.\"")
                                           pst  (dict
                                                  arglists  "([] [e-or-depth] [e depth])"
                                                  doc  "\"Prints a stack trace of the exception, to the depth requested. If none supplied, uses the root cause of the\\n  most recent repl exception (*e), and a depth of 12.\"")
                                           source  (dict
                                                     arglists  "([n])"
                                                     doc  "\"Prints the source code for the given symbol, if it can find it.\\n  This requires that the symbol resolve to a Var defined in a\\n  namespace for which the .clj is in the classpath.\\n\\n  Example: (source filter)\""
                                                     macro  "true"))))
  id  "5"
  repl-type  "clj"
  session  "b07f713c-2fbb-44f5-ae1b-175ebc1a39a7"
  status  ("state")
)
(<--
  id  "8"
  session  "b07f713c-2fbb-44f5-ae1b-175ebc1a39a7"
  status  ("done")
  version  "2.3.0-SNAPSHOT"
)
(-->
  op  "artifact-list"
  prefix-rewriting  "true"
  debug  "false"
  force  "true"
  session  "b07f713c-2fbb-44f5-ae1b-175ebc1a39a7"
  id  "9"
)
(-->
  op  "eval"
  session  "2fd88622-a6b6-4ec7-afab-6a5e2773051a"
  code  "(do (require 'squiggly-clojure.core) (squiggly-clojure.core/check-ew 'cascalog-check.core))"
  id  "10"
)
(-->
  op  "info"
  session  "b07f713c-2fbb-44f5-ae1b-175ebc1a39a7"
  ns  "cascalog-check.core"
  symbol  "5"
  id  "11"
)
(<--
  id  "11"
  session  "b07f713c-2fbb-44f5-ae1b-175ebc1a39a7"
  status  ("done" "no-info")
)
(<--
  artifacts  ("cauchy-jobs-kestrel" "org.clojars.hkgumbs/tictactoe-java" "analytics-clj" "bayes" "org.clojars.tcrawley/java.jmx" "org.clojars.datasio/sumo-log4j-appender" "mccraigmccraig/korma" "org.clojars.aperiodic/quil" "factual/factual-clojure-driver" "com.flipkart.aesop/mysql-producer" "kephale/lwjgl" "netbeans-junit" "containium.systems/logging" "ru.org.codingteam/lwjgl-platform-natives" "net.kirankulkarni/quipu" "skip" "forma/gdal" "com.keminglabs/clojurescript-compiler-proposal" "clj-quadtree" "theladders/ephphp" "ccfontes/lein-cljsbuild" "wuzhe/clj-oauth2" "org.clojars.charles-stain/clj3d" "edu.stanford.nlp/stanford-parser" "citizen/os" "org.clojars.appsflyer/zmq" "tailrecursion/boot-core" "apage43/cbdrawer" "lein-emr-deploy" "com.iterinc/storable" "clj-webdriver-boilerplate" "com.rallydev/clj-chef" "philoskim/debux" "jeet" "org.clojure/core.rrb-vector" "org.immutant/build-helper" "neo-zip" "judgr-mongodb" "thrift-clj" "corpus-enormous" "cogito" "joodo/lein-template" "devn/pagerduty" "inspector-jay" "org.clojars.chapmanb/gatk-engine" "ring-access-rules" "cloact" "deedle" "boot-immutant" "org.clojars.smallrivers/css-validator" "clojurewerkz.envision" "tenzing/lein-template" "org.clojars.paraseba/compojure" "ariane" "org.clojurewerkz/neocons" "hemesh/hemesh-external" "org.clojars.bhoflack/lein-cuke" "intransit" "org.clojars.bhillyer/too-hot" "com.palletops/node-js-crate" "org.routom/routom-bidi" "com.vgeshel/ssh-wagon" "pygmenter" "kjw/ring-logstash" "hirop-couchdb" "org.clojars.rnewman/clojure-json" "clj-getopts" "kordano/full.cljs.async" "citius" "org.clojars.kovalo/cascading-mongodb" "lein-pallet-fuz" "org.metastatic/sexp4j" "io.hoplon/google.jsapi" "provisdom-clj/boot-template" "org.clojars.strongh/leiningen-init-script" "org.clojars.bobby/ring-mongrel2-adapter" "cake.protobuf" "org.clojars.loggly/core-kafka_2.9.1" "reloaded2/lein-template" "antler/lichen" "org.clojars.gmorpheme/organum" "org.taoclj/foundation" "funk" "resting" "drip" "net.apribase/useragent" "org.clojars.tisnik/clj-hello" "gif-clj" "fort-knox" "marshallbrekka/clj-webdriver" "org.clojars.sicher/lein-lesscss" "stackoverflow-jobs" "lein-externs" "bugsbio/camel-snake-kebab" "bishop" "clams" "yehohana7/avro-clj" "com.layerware/hugsql-adapter-clojure-jdbc" "rdfa/rdfa-jena" "artisan-api" "org.clojars.r0man/environ" "m-parser" "org.clojars.christianblunden/clj-ftp" "org.commos/shared" "flibbertigibbet/lein-template" "rwilson/selmer" "input-parser" "phlegmaticprogrammer/tillich_zemor_hash" "morpheus" "curiosity.utils" "simple-profiler" "lein-clj-lambda" "im.chit/vinyasa.maven" "net-eval" "io.aviso/tracker" "overtone.synths" "grojure" "gossip" "splendid/jfx" "clojurewerkz/urly" "puppetlabs/http-client" "com.climate/squeedo" "org.clojars.s450r1/dcm4che-audit" "proto-repl-charts" "fschema" "org.clojars.cemerick/cljsbuild" "properties" "table" "multicode" "jfugue" "rplevy-draker/lein-cucumber" "org.clojars.miguno/kafka-spout" "lein-midje" "kovasb/gamma-driver" "toshtogo" "org.clojars.frzn/dacom" "crane" "pleasetrythisathome/blackstrap" "io.dropwizard.discovery/dropwizard-service-discovery-common" "com.curiosity/crache" "angular/lein-template" "org.flatland/cassette" "lein-karma-test" "storm/storm-kafka" "pedestal-service-docs" "ctdean/backtick" "narkisr/hooke" "liberator" "org.clojars.mooremo/lein-lobos" "echo-chamber-compojure/lein-template" "org.clojars.maercsrats/tic-tac-doom" "com._0xab/algebraic-notation-parser" "rill-event-sourcing/rill.event_store" "kmeans-clj" "org.clojars.jwr/redis-clojure" "nmurray/thrift" "sexpbot-twitter" "de.bertschneider/clj-geoip" "org.clojars.vgeshel/lein-gae" "rui/varpole" "org.clojars.cryptic_stat/incanter" "keechma/forms" "gauges-clj" "org.bioclojure/bio.ensembl" "org.eclipse/swt-gtk-linux-x86" "info.sunng/carbonite" "mccraigmccraig/drift" "stch-library/sql" "swindon" "guarded" "org.clojars.ctdean/svm" "confluent-map" "boot-format-checker" "org.clojars.edlich/clarango" "gpio" "org.clojars.strongh/lein-init-script" "clj-routing" "ring-netty-adapter" "mixradio/faraday-atom" "org.samba.jcifs/jcifs" "msg-dropbox" "clj-offeneskoeln" "org.clojars.myfreeweb/paprika" "amalloy/mongo-session" "rmarianski/tidy-up" "ike/ike.ramp" "temptrip" "gnl/re-frame-tracer" "org.clojars.si14/ring-swagger" "lein-zinc" "ccfontes/crache" "org.clojars.hozumi/verletphysics" "halleck" "flexvec" "com.malloc47/ragtime.core" "clojure-miniprofiler" "falcon" "clj-spore" "com.yuppiechef/simple-rabbit" "org.clojars.trptcolin/jline" "io.curtis/bitstamp-client" "clj-libssh2" "morri/cpg-lookup" "clj-bucket" "michaelr524/environ" "amalloy/utils" "au.com.auspost/cupickle" "org.clojars.algernon/balabit.blobbity" "im.chit/vinyasa.graft" "caribou/caribou-core" "resourceful" "mocko" "hiccup-bootstrap" "org.conjure/conjure-script-view" "zephyr-re-frame/lein-template" "io.github.emidln/storm-starter" "alpha-id" "srnp/metadata.client" "hello_lwjgl/lwjgl" "lein-clique" "maya" "org.clojars.jmeeks/jfugue" "clj-user-agent-parser" "org.clojars.aaronc/idris" "fw1/boot-template" "clubby" "environ" "arango-cljs" "lein-jarbin" "minimal-clojure-project/lein-template" "quil/processing-pdf" "deg-scraps" "nilenso/honeysql-postgres" "org.codehaus.mojo/adtech-jnet" "novelette-text" "lein-dpkg" "notate" "dc" "io.dropwizard/dropwizard-primer" "ruiyun/pinyin4j" "rxtx" "clojure-io" "owsy/eastwood-junit" "com.flipkart.lego/gracekelly-core" "cc.artifice/fleet" "dragonmark/inputs" "pj" "org.clojars.smee/archive" "org.clojars.vgeshel/appengine-magic" "org.clojars.sidec/fullscreen" "adamwynne/quartz-mongodb" "lein-colortest" "clj-lambda-event-s3" "clatrix" "cljogger" "clj-fhir-schema" "john2x/repload" "koan-template" "org.clojars.kjw/lucene-misc" "tangle" "hipchat" "com.apa512.cloudinary" "gorillalabs/log4j-riemann-appender" "org.clojars.myguidingstar/hiccup" "listora/attempt" "org.clojars.doo/clj-aws-s3" "org.clojars.kjw/mysql-connector" "com.dreamtimecircles/blazar" "org.clojars.smallrivers/htmlunit" "circumspec" "ominate" "wkf/clj-http" "ohpauleez/lein-pedestal" "timgluz/hikari-cp" "erdos.pseudb" "org.clojars.chbm/meowallet-clj" "clj-conform" "taffowl/joplin.jdbc" "gyag/lein-template" "cljsjs/llexus-form" "invoke" "com.palletops/pallet" "com.climate/java.shell2" "com.palletops/api-builder" "org.clojars.kjw/commons-httpclient" "clj-slack" "thi.ng/fabric-ld" "osbert/simple-admin" "intronic/onelog" "lein-cukes" "figsupport" "org.clojars.biallym/jogl.all" "justinian" "play-clj/lein-template" "drtoms-config-loader" "org.clojars.ctdean/tokyocabinet" "up/up-logging" "org.lambdaroyal/clojure-util" "org.clojars.jgrocho/digest" "ymilky/franzy-fressian" "com.edvorg/lein-kibit" "metosin/schema-tools" "stripe-tester-clj" "org.clojars.samaaron/rxtx" "org.clojars.rozifus.webtorrent-cljs/bitfield-cljs" "robert-bruce" "text.clj/text-clj" "com.tombooth/friend-token-redis" "clanhr/file-management" "org.clojars.hozumi/plumbing" "net.thegeez/clj-browserchannel-netty-adapter" "org.clojars.nakkaya/jna" "widje" "org.clojars.jfeng/reflectwad" "viebel/gadjett" "sv/system.ring" "org.clojars.czan/stateful-check" "appengy" "com.taoensso/tower" "org.clojars.osbert/lein-beanstalk" "clj-uuid" "com.ninjudd/lein-npm" "stanford-talk" "pat-thomas/clj-utils" "cljs-websocket-coreasync-simple" "tailor" "org.graclj.samples/basic-library" "org.clojars.onagano/freemind-bin" "xls2json" "uk.org.russet/tawny-owl" "org.clojars.rmoehn/clojure-doro-docs" "automaton" "mschristiansen/ring-basic-authentication" "frankiesardo/route-swagger" "csi" "com.palletops/awaze" "libtetris" "org.commos/service" "rill-event-sourcing/rill.timestamp" "clj-simple-form/clj-simple-form-core" "org.clojars.brightcove/lein-release" "com.gfredericks/org-html-slides" "parsnip" "n" "mdhaney/lein-less" "m-xhrio" "org.clojars.mpenet/zilch" "org.clojars.r0man/langohr" "org.clojars.jashmenn/weka" "ib5k.modular/co-dependency" "org.clojars.theasp/irc-api" "tailrecursion/boot-cljs" "wocket" "confuse" "org.clojars.arohner/hiccup" "xcthulhu.com.novemberain/langohr" "org.aria42/clj-dropbox" "shelloid/ccs" "org.clojars.nakkaya.jmonkeyengine/jme-font" "org.clojars.liquidz/mygaeds" "org.clojars.db/tokyo-cabinet" "ring-zombie" "me.arrdem.sad" "com.bloomberg.inf/spoon" "lein-protobuf-cn" "clientsuccess/utils" "org.clojars.kotarak/nrepl" "huri" "funcool/urania" "cascalog/cascalog-core" "sibiro-swagger" "quile/dependency-cljs" "clojuregram" "com.momentjs/moment" "org.clojars.jasonjckn/pallet-crates-all" "net.apribase/google-code-prettify-js" "loudmoauth" "clanhr/analytics" "org.onyxplatform/onyx-twitter" "com.onekingslane.danger/data-watch-dog" "osc-clj" "think-stats" "yle-session-token-validation" "com.houseofding/rasql" "fullcontact/full.cljs.async" "org.jgrapht/jgrapht" "com.sw1nn/common" "dsabanin-clj-jgit" "net.info9/clj-webdriver" "cljsjs/dygraph" "clj-ioc" "byte-spec" "org.clojars.r0man/korma" "emidln/yesql" "clojure-turtle" "com.malloc47/ragtime.lein" "mikera/matrix-api" "dmcollie/event-sourcing" "com.birdduck.mml" "uikit" "org.clojars.bensu/duke-core" "im.chit/vinyasa.debug" "clj-cache-hazelcast" "heroku-database-url-to-jdbc" "clj-performance-logger" "battlenet" "cljs-austin/lein-template" "foo" "org.clojars.stumitchell/lein-template" "dbutil3" "datomic-session" "clj-base-crm" "processing-jars" "badjer/enlive" "janiczek/markov" "cljs-idxdb" "org.clojars.nakkaya/macwidgets" "com.andrewmcveigh/workflows" "jdbc-pg-sanity" "hoplon-castra/lein-template" "dmx" "org.clojars.paraseba/ring-httpcore-adapter" "uploadatron/lein-template" "ib5k.holon/test" "net.java.dev.jogl/jogl-windows-amd64" "org.clojars.klang.too-hot" "onelog" "thieman/serf" "de.uni-koblenz.ist/macro-utils" "backtype/zilch" "org.clojars.acidlabs/korma" "pump" "io.adstage/clj-oauth2" "steveskeys" "drsnyder/think-stats" "chard" "net.kronkltd/karras" "mkremins/fs" "org.clojars.cbp/rethinkdb" "com.palletops/pallet-test-env" "symmetry-group/lib" "com.rmoquin.bundle/json-simple" "org.clojars.maarten/fleetdb" "com.gfredericks/fs" "cc.qbits/dommy" "ptaoussanis/noir" "docstring-checker" "org.clojars.vljosa/cheshire" "im.chit/hara.import" "tonic" "prone" "com.facebook/react" "ghostandthemachine/jayq" "jetty-wrapper" "org.clojars.kjw/mongo" "org.clojars.crenshawda/clj-soap" "markgunnels/clj-amazon" "org.clojars.raywillig/geo-cache" "ring" "opengl/jogl" "clj-http-s3" "com.7theta/specto" "condense/openlayers-om-components" "juxt.modular/netty" "asm/asm-analysis" "shoreleave/shoreleave-pubsub" "com.novemberain/langohr" "soycljs/closure-templates" "org.clojars.maxweber/postal" "clerb" "sv/cljsjs.css.resource" "com.guokr/simbase" "be.niwi/env-config" "org.projecthaystack/haystack-java" "defn-util" "web-rdbms-chk-template/lein-template" "org.clojars.somnium/closure-compiler" "com.lisperati/debug" "yehohanan7/avro-clj" "org.clojars.simonjagoe/cupboard" "datasio/cljs-uuid" "chlorinate" "barnabash/levensthein" "lein-less" "daoutil" "gukjoon/appengine-magic" "ragtime/ragtime.core" "clojusc/twig" "computational-explosion/detonator-core" "clothesline" "mcribadamus" "freyja" "org.clojars.technomancy/clj-stacktrace" "jarohen/yoyo.aleph" "org.clojars.prasincs/metrics-clojure-ring" "selfsame/hyper" "incanter/gnujaxp" "query-bank" "roxxi/avro-schema-diff" "chrome-extension/lein-template" "antler/caribou-development" "org.clojars.mccraigmccraig/algo.monads" "subtitles" "com.github.ifesdjeen/blomstre" "com.hmsonline.bundle/kryo" "ctries.clj" "far-app/lein-template" "lein-jdk-tools" "vietnamese-utils" "quantum-ext/lein-figwheel" "immutable-int-map" "org.clojars.pschmied/clj-hdf5" "clojuresque/clojuresque-common-runtime" "zjhmale/adt" "mrmcc3/twigs" "dropwizard-clojure" "ttt" "cascalog-avro/lein-template" "ciste/ciste-service-swank" "hvacio/hvacio-ui" "cljs-nrepl" "dynamo-data-formatter" "cspbox-runtime" "kraken-works/lein-template" "datomicscript" "delaguardo/clj-i18n" "clj-i2p" "cav/cljspark" "org-netbeans-insane" "pandeiro/boot-http" "map-experiments" "bmabey/hikari-cp" "browserific" "org.clojars.strongh/mallet" "cljsjs/device" "lein-autoreload" "clojurewerkz/meltdown" "postgre-types" "ast-eq" "java-runner" "clj-cnet" "cljs-lambda/lein-template" "net.eraserhead.clojure/lein-release" "com.mdrogalis/onyx-bench-plugin" "org.buntin/authorize" "up/up-nrepl" "clj-diffmatchpatch" "org.clojars.maxweber/clj-decline" "org.clojars.torbjornvatn/clj-temper1" "puppetlabs/lein-ezbake" "com.notbot/react-google-maps" "cljsjs/rangy-core" "sio-maven" "clj-bosonnlp" "clj-xmlrpc" "org.clojars.zentrope/ojdbc" "cddr/crud" "es.topiq/hasch" "curmudjeon" "quiddity" "clj-exif-orientation" "ring/ring-mock" "com.github.kyleburton/clj-etl-utils" "org.clojars.s450r1/dcm4che-tool-xml2dcm" "dep-graph" "im.chit/hara.namespace.import" "atlantique/clj-twilio" "horrendous" "dda-pallet-commons" "clj-rcon" "org.clojars.ibdknox/lein-nailgun" "org.clojars.krukow/clojure-1.1.0-alpha-snapshot" "o2w.messages" "cljsjs/react" "intronic/pubmed" "com.vgeshel/lein-protobuf" "com.beardandcode/components" "metosin/compojure-api" "net.java.dev.jogl/jogl-linux-amd64" "com.hmsonline.bundle/carbonite" "cljsjs/morphdom" "thi.ng/geom-viz" "pulley/pulley-consumer" "miazan/om-stuff" "lein-pushtoy" "itsy-limited-bloom" "thi.ng/trio" "org.clojars.bothacker.jmonkeyengine3/nifty-1.2-snapshot" "com.jeta/forms" "pdf-stamper" "whittle" "lein-chromebuild" "racehub/clj-http" "org.clojars.vincent/cljan" "com.twitter/carbonite" "org.taoclj/ticket" "resource-monitor" "rojat/rojat-arrhttp" "trevorbernard/lein-eclipse" "clojure_ttt" "oauth/oauth.one" "hozumi.clojars.org/twitter-api" "bcbio.run" "org.clojars.jashmenn/tokyo-cabinet" "newnew-test-template/lein-template" "clj-stacktrace" "bencode" "com.vitallabs/apns" "cljsjs/web3" "icm-consulting/lein-less" "capacitor" "clojure-twitter-wei" "testjar" "org.clojars.jude/similar-set" "com.duelinmarkers/ring-request-logging" "org.clojars.pdelong/rrd4clj" "clojureverbalexpressions" "org.clojars.dmac/carmine" "org.clojars.chapmanb/cofoja" "org.clojars.liebke/congomongo" "com.hugo.resource" "org.clojars.pbaille/utils" "clojunauts/postgresql" "com.taoensso/timbre" "kovasb/gamma" "clj-glob" "hypnos" "dignati/om-charts" "clotilde" "net.solicode/middlebrow-fx" "org.clojars.mylesmegyesi/tic-tac-toe-web-server" "clojure-ring-bootstrap" "org.motechproject/quartz-couchdb-store" "repetition-hunter" "org.clojars.gfodor/commons-lang" "borg/maven-com4j-plugin" "org.clojars.drcode/too-hot" "smartyper" "com.whimsy/thesis" "ddellacosta-stefon" "org.clojars.mthomure/lein-marginalia" "com.thelastcitadel/paths" "rsta_spellchecker" "com.palletops/multi-test" "graft" "org.clojars.mikejs/jzmq" "org.dthume/data.indexed-set" "org.clojars.tomazzlender/om" "org.clojars.weiqiu/debug-repl" "metal-pet" "eciton" "org.clojars.ffilozov/clj-http" "clj-mocchi-util" "clj-stackdriver" "clj-meme" "clj-message-digest" "org.pbqr/sente" "jsify" "min-java-version" "cetcd" "krate" "swing-utils" "org.clojars.bruz/tentacles" "parse-ez" "org.timmc/cascade" "org.thelastcitadel/jenkins-clojure-injector" "org.clojars.viacoban/runtime" "org.clojars.samumbach/shoreleave-core" "org.clojars.normanrichards/too-hot" "zololabs/demonic" "folder-cleanup" "org.conjure/conjure-scaffold" "defsql" "preify" "org.trpr/dataaccess-hbase" "yieldbot/torna" "zolodeck/demonic" "mimina" "org.clojars.pastafari/salesforce-api" "clj-markdown" "org.clojars.jarpiain/bacnet4j" "ru.prepor/schema-compojure" "org.clojars.maxweber/dfs-datastores" "org.clojars.indabamusic/clj-kafka" "clojurewerkz/cassaforte" "test-clj.testng" "org.onyxplatform/onyx-kafka" "cc.artifice/vijual" "org.clojars.maxweber/elephantdb-cascading" "org.clojars.frozenlock/reagent-table" "me.maverickbozo/clj-jwplatform" "deflayout" "chlorine-utils" "clojure-zmq" "im.chit/hara.data.diff" "ion/poly" "com.postspectacular/rotor" "org.danielsz/runit" "commons-pool" "thi.ng/validate" "com.invisiblefriend.component/http-kit" "com.palletops/all-crates" "gfrlog/clj-yaml" "org.clojars.nakkaya/javadrone-api" "com.linkedin.databus/databus2-example-person" "factql" "org.clojars.smallrivers/ring-core" "com.leonardoborges/imminent" "filevents" "net.async/async" "org.clojars.runa/clj-utils" "mitchellkoch/fipe" "coggy/neocons" "agallego/storm-kafka_2.9.2" "lein-haml-sass" "panoptic" "ritz/ritz-nrepl-hornetq" "com.evocomputing/colors" "io.dropwizard/dropwizard-xml" "autistic" "org.clojars.cdorrat/geva-core" "org.clojars.frozenlock/query" "circle.freeze-fn" "grafterizer/tabular-functions" "reloadable-compojure/lein-template" "com.ninjudd/ring-async" "bwo/conditions" "org.clojars.whodidthis/secretary" "schmetterling" "dsann/dsann-clj-utils" "com.taoensso.forks/reagent" "oiiku-ring-env" "kephale/lwjgl_util" "foundation" "net.intensivesystems/arrows" "clj-struct" "decker" "ratel/gdal" "http.async.client" "im.chit/repack.advance" "yayitswei/yonder" "snout" "gdx-2d" "auto-complete" "org.clojars.srihari/sigar-native-deps" "route-ccrs-web" "org.clojars.chapmanb/circdesigna" "reagent-frontend/lein-template" "defclass/hooke" "clj-gff3" "hadoop-lzo" "dsabanin/resque-clojure" "org.clojars.nakkaya/rxtx-macosx-native-deps" "org.clojars.killion/bestcase" "org.clojars.maxweber/storm-kafka-0.8-plus" "pulse/batch" "org.leftwise/cascading-cassandra" "cc.cosin.tools/leiningen-core" "whoops/reagent" "bendyorke/boot-postcss" "clanhr/result" "rescribe" "fun-utils" "partsbox" "retry" "lein-try" "org.clojars.strongh/clj-json" "org.clojars.xumingmingv/jdic-macos-tray-native-deps" "thi.ng/geom-voxel" "org.immutant/immutant-xa" "screen6/lein-template" "org.lwjgl/lwjgl-util" "ghostandthemachine/noir" "compojure-throttle" "org.clojars.pjlegato/ring.middleware.jsonp" "tiesql/tiesql-tools" "conduit" "thornydev/go-lightly" "lein-nomad" "com.intentmedia/uberjar-deploy" "jogl/jogl-gles1" "kalar-plugins" "org.clojars.tcrawley/markdown-clj" "schejulure" "fetch" "clj-hypermq" "org.clojars.samhalicke/hiccup-bootstrap" "net.candland/reload" "simpleudf/lein-template" "clj-vircurex" "playnice" "com.keminglabs/shim" "com.iterinc/edn-xhr" "com.ninjakoala/aws-instance-metadata" "dummy-clj-clr-library" "mr-playground" "europa" "ruby_ttt" "callisto" "org.clojars.danielkokott/messaging-common" "org.clojars.joefreeman/lein-beanstalk" "tranchis/figwheel-sidecar" "com.domkm/silk" "cljsjs/react-bootstrap-datetimepicker" "truckerpath/more-monads" "speclj-junit" "binaryage/devtools" "org.clojars.mudphone/hbase" "overtone/device.grid" "ec" "caribou/twitter-api" "attercop" "query-extractor" "zolo/zolo_contextio_provider" "immutant-spec" "grafter-extra" "cob-spec-slayer" "edb/kryonet" "outpace/clj-excel" "fobos_multiclass_clj" "com.xorlev.gatekeeper/gatekeeper-zookeeper" "org.clojars.kovasb/cascading-clojure" "semantic-similarity" "org.clojars.trptcolin/shoreleave-remote" "mecha1/boot-fileset" "elephantdb/elephantdb-cascading" "de.uni-koblenz.ist/funtg" "jbcrypt" "com.smxemail/ccm-clj" "incanter/jcommon" "octia" "it.uniroma2.art.owlart.indexer/owlart-indexer" "datomic-schematode" "org.clojars.normanrichards/korma" "wire" "sv/gcloud.client" "lein-typed" "adzerk/bootlaces" "exicon/boot-hoplon" "jinput-overtone" "sendgrid-clj" "org.clojars.r0man/lein-hadoop" "org.clojars.ncantor/clojure-mail" "damage/lein-template" "org.clojars.tail/kafka" "analyticbastard/pth" "facet-photo" "iso-country-codes" "de.otto/escaping-messageconverter" "laczoka/clj-json" "org.clojars.mikeitz/gluegen-rt-natives-linux-x86" "jimbru/ragtime.sql.files" "castra" "motific" "com.gfredericks/test.chuck" "bouncer" "net.mikera/mathz" "clargon" "lein-cdt" "adzerk/boot-aws-lambda" "clj-pusher" "tentacles" "ganelon" "org.clojars.frozenlock/storage-atom" "elv" "org.clojars.stumitchell/cljs-asynchronize" "leader-guarantee" "gorillalabs/config" "zimilate/lein-beanstalk" "hop/hop.task" "im.chit/hara.keyword" "org.clojars.smartmetersolutions/validateur" "kixi/s3-beam" "speclj-unicornleap" "dwc-analysis" "rsslldnphy/dependency-cljs" "com.maitria/specter-edn" "matchure" "lein-kotlin" "adzerk/boot-cljs" "iloveponies.tests/p-p-p-pokerface" "notifier" "konserve-couch" "org.clojars.jlewallen/tungsten-fsm" "org.clojars.rferraz/lein-cuke" "wrap-locale" "ragtime-cli-tools" "vignette" "org.dgetz/cljs-cursor" "helpshift/tesser.hadoop" "pe-user-rest" "circle/lein-deploy-deps" "org.clojure/core.match" "badjer/shoreleave-remote-ring" "quil" "cc.qbits/nippy" "clj-sorted-util" "cljsjs/markdown" "yieldbot/cascalog-checkpoint" "lib-noir" "org.clojars.dth/enlive" "org.clojars.kane/device.launchpad" "fixie" "org.clojars.frozenlock/reagent-contextmenu" "lein-git-deps" "com.marcomorain/clj-watchman" "adzerk/bootlet" "heroku/datum" "yayitswei/fetch" "huon" "com.taoensso.forks/expectations" "tulos/bberg-sdk" "puppetlabs/clj-puppetdb" "org.clojars.trptcolin/libthrift" "com.timezynk.domain/assembly-line" "ash-mcc/sarnowski-kerberos" "com.vijaykiran.processing/org.processing.itext" "lambdacd-cctray" "leanapi" "cljlab" "org.clojars.macourtney/streaming" "deraen/clj-hyphenate" "net.mikera/edn-java" "net.java.dev.jogl/jogl-windows-i586" "shodan" "hashobject/boot-s3" "org.clojars.ato/genftw" "com.github.bdesham/simple-queue" "glimpse" "guit" "lein-emr" "org.clojars.rodnaph/timbre" "com.aphyr/metrics2-riemann-reporter" "cljs-pikaday" "brendanyounger/plinth" "org.clojars.osbert/clj-facebook-graph" "narkisr/clansi" "sv.rpc/cljs" "org.clojars.jds02006/clj-server" "utahstreetlabs/lein-protobuf" "c-garcia/promesa" "org.clojars.macourtney/mstreaming" "org.clojars.samrat/clj-oauth" "obis/obis-shared" "org.clojars.sanityinc/lein-search" "panaeolus" "io.dropwizard.riemann/riemann-bundle" "clj-bson-rpc" "com.onekingslane.danger/jawsome-cli" "cljs-bach" "mynx" "tranchis/clj-schema-inspector" "clj-cron-parse" "rill/rill-psql" "org.clojars.jat45/clj-aws-s3" "lein-auto-install" "quit-yo-jibber" "pulp" "org.clojars.phalphalak/jogl-linux-amd64-native-deps" "rojat/rojat-math" "uk.org.alienscience/form-dot-clj" "com.metail.api/mogilefs-client" "com.timezynk.domain/domain-versioned-mongo" "noisesmith/dependency" "clj-sesame-repository" "rchancode/clj-thymeleaf" "org.clojars.jgerman-mmi/lobos" "lein-webapp-template/lein-template" "org.clojars.strongh/clj-aws-s3" "goodboydigital/pixi" "com.palletops/pallet-lein" "org.clojars.doo/rotary" "jkkramer/loom" "slide" "jogl/newt-win" "incanter/incanter-pdf" "occam" "org.clojars.pw4ever/marginalia-for-neko" "garden-watch" "matross/strata" "org.ozias.cljlibs/shell" "andare" "mikera-gui" "cljsjs/heap" "prefix-tree" "org.domaindrivenarchitecture/dda-init-crate" "asm/asm-tree" "forma/mapnik-jni" "cljs-jquery-spark-line" "ritual" "org.clojars.mavbozo/deploy-test" "thi.ng/geom-webgl" "org.overbuild/overbuild" "trowel" "com.hypirion/bencode" "dogeapi-clojure" "opentable/korma" "electron/lein-template" "lein-tern" "hostelrocket/aspis" "clj-fix-oms" "intersectx" "com.stuartsierra/clojure-hadoop" "vcr-clj" "gizmo" "uk.ac.susx.tag/pipe" "repltest" "paralab" "clojuresque/clojuresque-clojars" "org.clojars.smee/binary" "pdfboxing" "org.clojars.strongh/clj-redis" "org.clojars.stephenarneil/too-hot" "clj-todoist" "com.guaranteedrate/ring-proxy" "jlk/fs" "me.shenfeng/dbcp" "org.clojars.cvillecsteele/work" "resque-clojure" "haruyama/unixuser-clojure-commons" "org.clojars.ninjudd/lazytest" "dar/container" "sparkfund/sails-forth" "fogus/minderbinder" "avafora" "ring-jetty-hystrix-adapter" "ascent.agent" "text.clj" "org.clojars.thdr/clj-oauth" "org.bmillare/dj.peg" "tangrammer/webclient-system-diagram" "gil" "clj-macaroons" "liblinear.clj" "org.clojars.gilesc/stanford-parser" "lein-nreplds" "org.ozias.plugins/lein-archaic" "org.clojars.thobbs/hector" "shmish111/lein-git-version" "org.hypercrud/hypercrud-ui" "com.cemerick/clutch-clojurescript" "ruminate" "clj-pelib" "cljsjs/filestack" "eigenhombre/splasher" "org.clojars.edvorg/kibit" "grafter/vocabularies" "tranchis/lein-figwheel" "hoplon/google-loader" "com.lyncode/jtwig-core-java6-legacy-jee" "clj-jgit" "org.clojars.factual/jre2" "com.trottercashion/bert-clj" "funimage.figure" "clojure-ring-common" "org.clojars.the-kenny/weasel" "jogl/newt-x11" "cljs-flux" "rep" "play-clj.net" "lein-describe" "bstd/clj-oauth2" "org.clojars.cbp/pudge" "jry" "com.lemonodor/syllables" "ccfontes/clj-inspector" "pdfjvm" "lein-light-nrepl-instarepl" "xhh/clang" "my-neko" "sutime-clojure" "plaza" "async-om/lein-template" "logback-bundle/core-bundle" "org.joegallo.robocode/robocode.repository" "org.clojars.gguthe/phpass" "com.howardlewisship.patched/dieter" "org.ifesdjeen.patch/cassandra-all" "appengine-api-stubs" "zololabs/context-io-clj" "heritrix-clojure" "clojurewerkz/scrypt" "nerchuko" "clj-cache" "pipe-seq" "ystad/lein-deb" "org.clojars.flatland/marginalia" "evalive" "cornerstone" "me.arrdem/toothpick" "com.vitalreactor/cassaforte" "javert" "clj-virustotal" "com.novemberain/monger" "org.clojars.coventry/tools.reader" "engagor/clj-vw" "org.clojars.rayne/clj-sandbox" "org.sift/winnow" "kindlychung/incanter-io" "org.clojars.paul/kafka-hadoop-consumer-0.7.0-1-cdh3u2" "fast-zip" "lein-generative" "cirru/boot-cirru-sepal" "sqlmail" "io.tilde/momentum" "helpshift/faker" "org.clojars.lambdalf/lambdalf" "baizen" "org.jmatt/clj-time" "com.palletops/docker-crate" "org.clojars.leanpixel/cljs-utils" "clojeopardy" "cljsjs/chemdoodle" "com.flipkart.poseidon/service-clients-gen" "net.intensivesystems.conduit" "cupboard" "kraken" "redis.embedded/embedded-redis" "org.clojars.elliot42/enlive" "juxt.modular/entrance" "haml-macro" "org.domaindrivenarchitecture/dda-config-commons" "fixturex.core" "org.onyxplatform/onyx-elasticsearch" "im.chit/hara.group" "edw/tinsel" "saranyu" "com.ninjudd/lein-simpleton" "hiccup-bootstrap-3" "org.clojars.doo/korma" "de.kotka.groovy/zweig" "clomponents" "org.clojars.guilespi/clj-facebook-graph" "deptest" "brochure/clojure" "net.aaroniba/ring-webutils" "conrad" "matcha" "plasma" "cljsjs/bytebuffer" "bizarro-collections" "evaljs" "org.clojure/google-closure-library-third-party" "juxt/component" "suub/laser-experiments" "static" "gin" "azuzu-xml" "org.clojars.biallym/jogl-native-linux-amd64" "tvachon/clj-mixpanel" "rbo" "com.nomad.chiffonier/chiffonier" "com.jkkramer/google-rfc-2445" "lazymap" "org.onyxplatform/onyx-redis" "jamesdphillips/dieter-handlebars" "org.clojars.pdoctor/specljs" "example" "com.keminglabs/cassowary" "tugboat" "difftest" "org.skummet/clojure-android" "hottop" "org.hectorclient/hector-object-mapper" "com.lingyong/schema-gen" "azjure" "dgellow/bottle" "environ-plus" "org.clojars.slyphon/ring-servlet" "racehub/schema" "me.panzoo/spaghetti" "domina-with-no-goog-jar-dep" "im.chit/hara.common.pretty" "me.chptx/reagent-bootstrap" "bolth" "castorocauda" "simple-plotter" "ipbgp" "com.orceo/orcette" "cljsjs/classnames" "com.andrewmcveigh/lein-package" "magic/magic-gen" "closure-templates-clj" "daslu/clj-liblinear" "com.keminglabs/c2po-core" "com.powernoodle/binnacle" "com.joshuadavey/vecset" "lib-blanc" "parser" "muon-clojure" "speclj" "sv/gloud.metadata.atom" "clj-jones" "savagematt.toshtogo/client" "ctx/scalyr-api" "tic_tac_toe" "mischov.clj-diffmatchpatch" "overtone/trident" "gg4clj" "org.clojars.lhr/python-challenge" "org.clojars.jasonjckn/logic" "com.mjul/lein-cuke" "clinch/clucy" "guangyin" "gws/clj-mandrill" "ragtime.elasticsearch" "com.greenyouse/clodexeddb" "quintype-app/lein-template" "cljsjs/react-autosuggest" "org.clojars.strongh/metrics-clojure" "lein-expand-resource-paths" "diameter-sim" "org.clojars.glebpom/clj-ssh" "antler/caribou-admin" "org.nakkaya.robocode/robocode.ui.editor" "org.clojars.jasonjckn/pallet-crates" "org.clojars.technomancy/test-project" "fogus/tupling" "co.paralleluniverse/comsat-ring-jetty9" "figwheel-component" "alandipert/boot-trinkets" "lein-html2md" "org.sift/sift" "clostack" "ca.brentvatne/cljs-file-api" "cljsjs/google-maps" "com.velisco/clj-ftp" "cljsjs/typedjs" "arohner-utils" "org.jasonjckn/kestrel" "listora/ring-cache-buster" "de.undeadco/gorilla-repl" "methods-a-la-carte" "envvar" "org.clojars.jkk/resque-clojure" "mercator" "dieter/ember" "overtone/scsynth-interop-linux-x86_64-lucid_jack" "org.clojars.sparrow/ua-parser" "clj-abcnotation" "edu.berkeley.nlp/berkeley-parser" "io.curtis/cljs-http" "clj-btc-e-api" "cake-protobuf" "parcel" "clj-bootstrap" "datacontext" "blazer" "com.ecyrd/jspwiki" "org.clojars.keli/eventual" "flipboard/clojure-hbase" "jarohen/phoenix.modules.jdbc-pool" "edpaget/material-ui" "puppetlabs/jdbc-util" "spexy" "com.github.quintona/trident-kafka-push" "cs-rabbit-to-mysql/lein-template" "tailrecursion/jquery.daterangepicker-0.0.5" "dieter" "ounz" "dumb-routing" "alandipert/huboard" "org.clojars.paomian/clj-xpath" "s3-util" "net.colourcoding/arianna" "lein-checkall" "org.clojars.stevelindsay/tools.nrepl" "crypto-random" "ruiyun/clj-native" "org.clojars.caljunior/zmq" "clojurewerkz/serialism" "red-tape" "hello-cljs" "fullcontact/full.http" "diffbot" "lein-environ" "functionalbytes/mount-lite" "com.leadtune/clj-time" "clonic" "st/common" "control-toolbox" "com.flyingmachine/webutils" "org.clojars.icambron/clj-sql-up" "org.erinite/core-dev" "ash-mcc/friend-spnego" "org.danielsz/etsy" "org.clojars.ohpauleez/fnparse" "org.abpoms/caribou-frontend" "cc.rightangle/yelp" "jarohen/bounce.mux" "precook" "base58" "org.conjure/conjure-flow" "narkisr/trammel" "shovel" "clj-livereload" "com.manigfeald/kvgc" "degel/redmapel" "jogl/jogl-gl2-dbg" "xrepl" "browserify-shim" "org.clojars.diogok/geotiff" "prismatic/schema" "taffowl/joplin.elasticsearch" "org.clojars.ludothehun/pperceptrons" "lein-tamaki" "basinet" "backtype/autodoc" "lein-chronic" "cc.artifice/paragon" "com.famous/famous" "cljsjs/lunrjs" "clojuresque/clojuresque-runtime" "org.clojars.sids/work" "clj-apache-http" "adzerk/boot-jar2bin" "org.smallrivers/snacktory" "naive-http-kit/lein-template" "io.nervous/cljs-nodejs-externs" "org.clojars.camelpunch/ordinance" "radagast" "lein-repack" "de.karolski/forms-bootstrap" "com.greenyouse/multco" "yuhta/gcal2org" "org.clojars.gilesc/jriengine" "org.clojars.keorn/synaptic" "voldemort/voldemort-contrib" "clj-simulacrum" "org.tobereplaced/jdbc-pool" "cc.qbits/async-ring-adapter" "org.clojars.borkdude/twitter-utils" "imajes" "org.clojars.miguno/metrics-annotation" "stch-library/ns" "org.clojars.euccastro/markdown-clj" "org.clojars.dlowe/mongofinil" "viesti/nrepl-component" "mmargs" "lein-asciidoctor" "stardog-clj" "miraj.html/pragma" "org.clojars.kyleburton/clj-etl-utils" "com.tombooth/friend-token" "clj-json" "org.webbitserver/webbit" "org.clojars.mbakhterev/valip" "com.ambrosebs/re.typed" "org.tcrawley/dynapath" "org.clojars.dvgb/too-hot" "org.clojars.kostafey/lein-beaver" "spellhouse/hemlock" "calvin/clj-codapay" "com.intception.components/app" "t6/from-scala" "thesaurian" "com.hmsonline.bundle/libthrift7" "clj-swing" "cljsjs/commonmark" "clogo" "cc.artifice/ofx-clj" "org.clojars.charles-stain/jme" "lein-amp" "zou/lein-template" "pg-json" "org.clojars.jkandasa/sahi-client" "finagle-clojure/http" "henshin" "org.clojars.ndimiduk/geodesy" "com.lyncode/jtwig-java6" "com.rafflecopter/monger-connect" "jpb/kibit-replace" "lambdacd/lein-template" "ragtime/ragtime.sql.files" "mathias/boot-sassc" "fun-params" "clanhr/clanhr-api" "squeezer" "closeout" "com.galebach.srs" "org.van-clj/http-river" "lein-gae" "org.clojars.intception/clj-dns" "drytomic" "hoplon/notify" "deraen/less4clj" "kick/lein-template" "org.ozias.cljlibs/mvnmeta" "kibu/ring-gzip" "am.ik/clj-gae-ds" "cspbox-trading" "org.clojars.jeremy/xenopath" "org.clojars.scttnlsn/kioo" "com.flipkart.aesop/client-event-consumer" "jlk/time" "foxglove" "io.rkn/core.async" "rest-clj" "org.clojure/test.check" "chic-text/chic-text.terminal" "com.github.jnr/jnr-process" "org.lwjgl/lwjgl" "mvxcvi/clj-pgp" "org.clojars.mikejs/jzmq-native-deps" "org.bodil/lein-nashorn" "org.clojars.doo/zookeeper-clj" "puppetlabs/schema" "devcards-om-next" "hassium" "lein-version-file" "raywillig/geo-graph" "webnf/enlive.cljs" "com.report.engine/database" "jeregrine/bishop" "jarohen/data.xml" "lwjgl" "clj-soup/clojure-soup" "kria" "autocomplete" "rplevy/one" "cosmos" "quickbeam" "circleci/mongofinil" "clj-easy-schema" "cljs-simple-cache-buster" "progress" "degree9/lounge.api" "org.clojars.curbside/http-kit.fake" "org.cluxis.hbase-clj" "lein-immutant" "tab" "gemini" "rosado.processing" "cljsjs/chosen" "clj-httpc" "im.chit/hara.time" "lackd" "filecabinet" "com.ryanmcg/incise-codox" "org.clojars.bothacker.jmonkeyengine3/jmonkeyengine3" "org.blubberquark/microdata" "ring-anti-forgery" "swank-clojure" "org.clojars.scttnlsn/clj-soap" "lein-elasticsearch-local" "rm-hull/big-bang" "simplegraph" "semantic-csv" "t-util" "com.dayooliyide/kafkian" "pleasetrythisathome/boot-datomic" "org.scheibenkaes/attic" "cljs-jquery-sparkline" "tiesql/client-cljs" "jackknife" "org.clojars.whamtet/dogfort" "org.clojars.tz00/om" "com.stuartsierra/flow" "parallel-colt-matrix" "com.shareablee/archive-bolt" "noisesmith/reins" "zh217/better-firefox-driver" "adamclements/lein-droid" "org.clojars.making/clj-aws-ecs" "riemann-manifold" "pail-schema" "lein-myhook" "org-mode-clj-tests-utils" "boot/greet" "lein-hammock" "org.clojars.danjohansson/ring-jetty-adapter" "kaleidoscope" "org.clojars.aircart/clj-stripe" "com.gfredericks/lib-5141" "defemeral" "zmaril/ogre" "org.clojars.saarthak/couchbase-healthcheck" "ru.org.codingteam/jinput-platform-natives" "org.martinklepsch/cljsjs-medium-button" "retro-fever" "iloveponies.tests/structured-data" "s3-wagon-private" "cc.artifice/resque-clojure" "org.clojars.tzach/capstan" "org.clojars.keli/ring-async" "org.clojars.ato/clutch" "org.clojars.zakwilson/plasma" "liftoff/carmine" "io.hoplon/jquery.selectize" "org.clojars.r0man/pallet" "cc.qbits/quiver" "org.clojure/algo.generic" "org.clojars.storkle/zeromq-native-deps" "valichek/component-compojure" "org.clojars.mgaare/stch-sql" "cljsjs/selectize" "org.clojars.sandropadin/ping-pong-scoreboard" "yawt/lein-template" "lambda-blog/lein-template" "net.mikera/core.matrix" "org.akvo/commons" "overtone" "mantle/clojure" "com.intception/components" "theseus" "clojure-polyline" "clj-tfidf" "juxt.modular/template" "org.clojars.samumbach/shoreleave-browser" "hlisp-util" "org.marianoguerra/closchema" "boot/core" "simple-authentication" "limonada/limon-model" "smtraining/lein-template" "tangrammer/lein-less" "frankiesardo/linked" "org.clojars.jeffh/clj-mongodb" "org.clojars.samaaron/monome-serial" "com.gfredericks/core.logic" "metosin/om-dev-tools" "frinj" "hyperion/hyperion-sqlite" "org.dunaj/core.rrb-vector" "kixi/ckan" "clj-fl" "org.clojars.joel/tesser.hadoop" "story" "bugsbio/cljs-ajax" "me.raynes/clhue" "try-let" "telegraph" "adamastor" "com.linkedin.databus/databus2-event-producer-or" "cartodb-java-client" "jubot/lein-template" "com.interelgroup/insidetrack" "it.uniroma2.art.owlart/owlart-protegeimpl" "rbac" "zolo-carbonite" "dsann/jayq" "sliimp" "facts/speech-recognition" "pirlib/lein-template" "clj-btce" "org.onyxplatform/onyx-visualization" "satori/lein-template" "hexlib" "adzerk/boot-test" "com.github.kyleburton/teporingo" "com.jme3-contribution/lemur" "autodoc" "handlebars-clj" "edn-validator" "com.palletops/openssl-crate" "faris/serv" "org.clojars.lambdatronic/matrix-viz" "jogl/jogl-gl2es12-win" "openrada/db" "org.flatland/telegraph-ui" "antler/clj-oauth2" "reagent-seed/lein-template" "enlive_helper" "org.convana.plugin/lein-template" "org.clojars.zacholauson/domina" "net.ozias/echohandler" "org.clojars.smartmetersolutions/big-ivan" "jcf/liberator" "edu.stanford.smi.protege/protege-owl" "calabash-script" "net.prettyrandom/cljs" "org.clojars.arthurprs/metrics-clojure" "org.clojars.sergey-miryanov/ring-devel" "cljfastdtw" "org.clojars.scottjad/swank-clojure" "org.clojars.gregburd/fxd" "com.google.appengine/appengine-local-runtime" "shoreleave/shoreleave-services" "com.hypirion/primes" "nebleena/persist" "solidaster" "org.clojars.bhuron/too-hot" "carneades/carneades-engine" "schemongo" "inliner" "marshallbrekka/macroparser" "org.clojars.wjlroe/kerodon" "im.chit/hara.data.path" "io.replikativ/hasch" "morri/tss-cpg" "org.clojars.pallix/analemma" "labelled-tags" "thi.ng/geom-meshops" "org.clojars.txominpelu/lein-git-version" "humongous-client" "clojurewerkz/ragtime.sql.files" "claw" "org.clojars.hugoduncan/clutch" "org.clojars.langmartin/lein-git-version" "webnf/handler" "kripke" "org.clojars.adamwynne/clj-apache-http" "haiku" "multimedia.streaming/rtsp" "ordered" "marshallbrekka/clojurescript" "ninja-test" "fuck-cors" "logfmt" "org.clojars.scusack/clojurescript-clj-jar" "error.handler" "org.clojars.naydenov/misc-utils" "rdfa/rdfa-sesame" "jeluard/boot-notify" "obfusk-data" "fatrpm" "bronsa/colorize" "vlad" "com.climate/claypoole" "info.sunng/papaline" "org.clojars.norgat/quil" "clj-oauth" "ronaldsuwandi/neuralnetworks" "ithayer/thneed" "juxt/clj-mqtt" "calendar" "liza" "net.mikera/clojure-utils" "bronsa/penumbra" "incanter-gorilla" "tailrecursion/boot-hoplon" "com.palletops/pallet-codox" "ring-curl" "lein-coffeescript" "jgraphx" "cognician/clojars-test" "insomnia" "factual/riffle" "com.manigfeald/armada" "clojure-ring-health" "io.pulse/loopage" "uk.org.russet/nrepl-clojure" "org.clojars.bothacker.jmonkeyengine3/lwjgl" "puppetlabs/comidi" "bigquery" "org.clojars.bmabey/clj-ml" "org.clojars.nathell/redis-clojure" "org.clojars.ylgrgyq/batched-flume-appender" "org.clojars.leadtune/karras" "rhyme-finder" "org.clojars.charles-stain/jung-api" "prismofeverything/bifocals" "om-demos" "pleasetrythisathome/boot-medusa" "moustache" "pa511" "rabbitadmin-clj" "geoscript" "com.akolov/mongato" "leipzig/lein-template" "org.clojars.toxi/thumbnailator" "org.clojars.bengl3rt/beanstalk" "com.linkedin.databus/databus2-relay-impl" "com.zoowar/codec" "org.clojars.jkk/data.xml" "com.jd.bdp.magpie/magpie-utils" "org.clojars.jaley/androidmarketapi" "angellist-scrapper" "hoplon/boot-hoplon" "bardo" "camdez/honeybadger" "pod-utils" "ls" "rm-hull/fetch" "yieldbot/elephantdb" "cc.qbits/twitter4j-core" "ghostandthemachine/clj-ssh" "clj-mecab" "clj-native" "org.clojars.osbert/weasel" "clj-alipay" "net.thegeez/clj-browserchannel-jetty-adapter" "kiln/kiln-ring" "babar" "mrmcc3/firebase-clj" "gender-detector" "hellonico/avout" "org.clojars.camdez/ring-transit" "org.clojars.elliot42/raven-clj" "hermes" "normalize" "kremers/sandbar" "com.datomic/datomic" "connect/lein-template" "cljsjs/forge" "org.clojars.kohyama/emjed" "geocommit/parser" "slicna" "frontmatter" "kindlychung/incanter-charts" "test-deploy-tmh" "ring-basic-auth-test" "clj-tuple" "ch.deepimpact/lein-git-version" "zhuangxm/boot-lein" "jogl/newt-awt" "im.chit/purnam.native" "adamantium" "philjackson/two-probs" "ganelon-util" "ring-cljsc-middleware" "noidi/clj-cas-client" "pulley/pulley-publisher" "s-html" "monte.server" "org.clojars.ghoseb/congomongo" "lein-ccw" "cljsjs/mui" "org.clojars.rorygibson/clj-amazon" "clj-card" "org.clojars.vrivellino/logglylog4j" "com.ebaxt/ring-ratelimit" "aua" "im.chit/manas" "clj-esendex" "lein-voom" "com.github.metaphor/lein-flyway" "org.domaindrivenarchitecture/dda-iptables-crate" "cljsjs/matter" "lexluthor" "puppetlabs/trapperkeeper-scheduler" "cascalog" "com.flipkart/ablibrary" "mvxcvi/blocks-s3" "java-gedcom" "clojure-mail" "org.clojars.bothacker.jmonkeyengine3/jme3-lwjgl-natives" "com.taoensso.forks/ring-anti-forgery" "org.clojure/data.priority-map" "org.clojars.mikeitz/jogl-all" "inkwell" "jaki" "org.clojars.the-kenny/garden" "seymores/luhn58" "org.clojars.agravier/clj-pwars" "org.cloudhoist/pallet" "tesser.math" "re-frame" "knn" "com.cemerick/austin" "buddy" "reloaded/lein-template" "com.invisiblefriend.component/datomic" "org.clojars.danielcompton/postmark" "irresponsible/oolong" "org.clojars.magnekd/hsqldb" "org.clojars.francescolocatello/bloom-filter" "org.clojars.doo/lein-libdir" "pu-auth" "faustini" "asosio-utils" "pjstadig/scopes" "org.ozias.plugins/lein-git-version" "org.clojars.slocklin/jannealer-raw" "com.ninjudd/ring-middleware-format" "vessel" "webmonarch/ring-proxy" "com.github.pmerienne/stormy-pythian-service" "thi.ng/structgen" "org.clojure/tools.trace" "io.framed/spider" "poser" "beetlejuice" "cljsjs/sizzle" "artem" "tailrecursion/ancient-clj" "clj-loga" "webnf" "hotpocket" "marshallbrekka/stencil" "mccraigmccraig/cascading-cassandra" "noir-ring/lein-template" "org.clojars.ithayer/clj-record" "com.novemberain/welle" "inplus" "org.clojars.pmonks/bookmark-writer" "org.clojars.michaelsbradleyjr/swank-clojure" "typed" "starbuck" "inet.data" "unbound" "org.clojars.weavejester/dep-e" "org.clojars.gukjoon/appengine-magic" "thinktopic/wharf" "jupl/boot-cljs-devtools" "clj-cmudict" "metosin/komponentit" "vfsm" "gatling/lein-template" "amalloy/ring-gzip-middleware" "michaelblume/honeysql" "org.clojure/tools.namespace" "rojat-arrxml" "de.otto/clj-kafka-utils" "org.clojars.leon/commons" "cn.leancloud.diamond/diamond-client" "org.clojars.kjw/solr-core" "cc.qbits/clj-oauth" "clj-inspector" "webnf.deps/universe" "rsmapper" "hyperion/hyperion-gae" "token" "rewrite-clj" "alaisi/postgres.async" "me.arrdem/guten-tag" "leiningen-init-script" "transduce" "lein-teamcity" "mr.go.sgfilter/sgfilter" "string" "bridge-to-nowhere" "farbetter/tube" "forthold/neocons" "org.immutant/scheduling" "org.clojars.cichli/ring-basic-authentication" "org.clojars.arthurprs/metrics-clojure-graphite" "farbetter/freedomdb" "hutch" "shoreleave/shoreleave-remote-ring" "clj-esper" "gapi" "com.palletops/discovery-api" "lein-node-webkit-build" "mongodb-key-value-store" "clj-repl" "peridot" "lumiere" "cljsjs/filesaverjs" "caribou/comment-plugin" "org.clojars.bouzuya/hatena.graph" "tiesql/client-clj" "org.clojars.bmabey/csvlib" "clj-etl-utils" "launchtone" "clj-aws-imds" "thheller/shadow-build" "cljss" "spootnik/riemann-kafka" "hello" "org.clojars.hoeck/apache-pivot-wtk-terra" "org.clojars.kbuchanan/server" "sqweb/lein-template" "org.clojars.runa/kits" "clanhr/reports" "org.clojars.mylesmegyesi/http-server" "glop" "ronda/swagger" "viebel/klozzer" "gate" "persister" "json-roa_clj-client" "app-with-midje/lein-template" "net.kronkltd/clj-gravatar" "bwhmather/clj-oauth2" "org.clojars.jkk/clj-tokenizer" "clarsec" "cljsjs/webcomponents-lite" "datasio/http-kit" "clanhr/validators" "navis/untangled-datomic" "net.polyc0l0r/konserve" "liftoff/clj-statsd" "pe-user-testutils" "tailrecursion/boot-jetty" "zjpjhx/config" "lein-deb" "mailaram" "ssg" "org.clojars.jcrossley3/please-delete-me-too" "com.uswitch/protobuf" "service-hub" "im.chit/vinyasa.lein" "org.clojars.nlacasse/test.mock" "light.wily/clj-twilio" "telemetry" "stepl" "get_wangyin_blog" "cljsjs/blockapps" "org.clojars.adamwynne/clj-oauth" "yle-tunnus-token-validation" "cljsjs/firebase-node" "fullcontact/full.cljs" "puppetlabs/cljs-dashboard-widgets" "org.eclipse/swt-win32-win32-x86" "jsonpointer" "jakemcc/clojure-gntp" "lein-nevam" "org.clojars.kriyative/clj-clu" "ninjudd" "enlive-tutorial/lein-template" "misaki-compiler/lein-template" "org.clojars.scusack/pdfclown-clj" "reloaded.repl" "clj-soy/google-closure-templates" "mrmcc3/boot-electron" "io.samritchie/filecrush" "kestrel-thrift-java-bindings" "lein-dire" "org.clojars.cemerick/amazonica" "haruyama/mixi-clojure-commons" "adwords-resource-conversions" "org.clojars.arohner/clojure-http-client" "clj-connect" "circle/wait-for" "com.carouselapps/to-jdbc-uri" "italianverbs" "org.lwjgl/lwjgl-native-platform" "org.clojars.alexc/docjure" "org.clojars.nberger/clojurescript" "prxml" "org.conjure/conjure-html" "reagent-forms" "t6/snippets" "org.sparx.nano" "io.pedestal/pedestal.tomcat" "com.onekingslane.danger/jawsome-dsl" "theladders/monitor-rabbitmq" "facjure/replify" "org.mintsource/pedestal-namespace-reloading" "com.leadtune/apparatus" "arohner/optimus-less" "tailrecursion/clojure-var-daemon" "hub.util/aws" "full-disclojure/lein-template" "jasongilman/clojure-turtle" "tvachon/ant-deb-task" "org.signaut/ring-jetty7-adapter" "solitaire" "com.rallydev/clj-jenkins" "swagger1st/lein-template" "indent-clj" "org.clojars.arohner/goose" "solsort/util" "daviesian/http-kit" "hyperloglog" "dsann/dsann.cljs-utils" "clj-egsiona" "com.vitalreactor/clojurescript-build" "org.immutant/wildfly" "coci-form" "com.kurogitsune/crayman" "parseapp-clj" "nl.zeekat/lein-deps-tree" "aeronotix/closchema" "gurobi-clj" "clj-telegram-bot" "metrics-clojure-jvm" "com.lucasbradstreet/instaparse-cljs" "ua.modnakasta/rum" "im.chit/vinyasa.inject" "pubnub" "lux/lein" "versions" "lein-swank-autoconnect" "pe-rest-utils" "org.clojars.rplevy/clojure-opennlp" "cljsjs/syn" "com.rallydev/jarvis-jenkins-plugin" "ring-serve" "org.clojars.s450r1/dcm4che-tool-dcmhpqr" "pandeiro/boot-reload" "org.clojars.jozias/midje" "org.clojars.abpoms/pallet-aws" "com.rallydev/datomic-replication" "frodunk" "life/lein-template" "org.clojars.thnetos/opennlp-tools" "org.clojars.quoll/rsc-ls" "ilshad/attentive-response" "agallego/storm-kafka" "clj-linkshare" "kixi/pipe" "bandito" "om-widgets" "com.flipkart.aesop/sample-mysql-relay" "clj-odkoeln" "clojure-ini" "protractor-cljs" "strftime" "be.niwi/ring-jetty-adapter" "atr" "gukjoon/appengine-local-runtime" "adhoc-plist" "lein-copy-deps" "ragtime/ragtime.jdbc" "org.clojars.s450r1/dcm4che-tool-jpg2dcm" "dttest" "csv-to-edn" "vlacs/dossier" "com.yolodata/riemann.blypr" "phzr" "clojure-mercator-projection" "cljsjs/exif" "hive/hive_anttasks" "ritz/ritz-nrepl-middleware" "deraen/lein-less4j" "im.chit/repack.advance.common" "aviary/aviary-figwheel" "org.clojars.nakkaya.jmonkeyengine/jme" "selmer" "cljsjs/topojson" "btcutils" "org.clojars.jaceklach/lein-cloverage" "tonality" "org.clojars.badjer/clojure-yahoo-finance" "docopt" "hiccup-foundation" "shout" "datumbazo" "daydrem/appengine-magic" "org.metastatic/gelfback" "io.nervous/hildebrand" "org.clojars.paraseba/clj-stacktrace" "state-node" "chic-text.core" "duct/lein-template" "dvrsdk4j" "thunknyc.s3-tools" "quantum-ext/figwheel-sidecar" "com.linkedin.databus/databus-dtail-impl" "matthiasn/systems-toolbox-sente" "clojure_console_ttt" "btc-e-client" "org.clojars.jwr/lein-swank" "org.clojars.trptcolin/riddley" "org.immutant/overlay" "org.clojars.lovelykensho/otm" "org.clojars.charles-stain/stack-alloc" "cljsjs/semantic-ui" "org.clojars.gukjoon/clojure-couchdb" "clj_pg" "jdbc-pg-init" "milesian/bigbang" "alwaysbcoding/spica" "kw-korma" "cloui" "org.timmc/geohash" "qml-cljs/lein-template" "io.rkn/google-docs-spreadsheets" "com.flipkart.lego/lego" "exoref" "fb-sdk-cljs" "optimus" "clj-fasta" "clj-bandit/bandit-simulate" "timewarrior/sandbar" "com.palletops/bakery-weasel" "turbovote.imbarcode" "byte-transforms" "geojson-schema" "org.clojars.strongh/lein-ring" "clj-rollbar" "cortex" "degree9/lounge.pages" "spa-template/lein-template" "cljsjs/nvd3" "org.clojars.dmirylenka/stanford-postagger" "configuron" "lein-zi" "lein-ritz" "com.siili/lein-cucumber" "org.kovas/paredit.clj" "org.jboss.plugins/wildfly-extension-maven-plugin" "io.replikativ/geheimnis" "incanter/incanter-core" "mdrogalis/lein-voom" "org.clojars.smaant/sc" "org.clojars.akiel/digest" "slugify" "org.clojars.oakes/parinfer" "kwakbab/lein-ragtime-gen" "org.clojars.thejohnnybrown/enlive" "integrity-api" "org.clojars.krisajenkins/lein-nailgun" "lonocloud.pedestal/pedestal.app" "backplane" "kalimantan" "yayitswei/domina" "jarohen/nomad" "mies-node/lein-template" "clj-table" "org.clojars.smallrivers/capacitor" "ednsl" "org.clojars.jaceklach/cloverage" "com.codesignals/wire" "org.clojars.seancorfield/clj-soap" "restrail" "colorstr" "com._0xab/jhdf5" "zolodeck/zolo-utils" "woven/clj-http" "clojure-tools" "org.projectodd.shimdandy/shimdandy-parent" "org.clojars.wokier/lein-bower" "im.chit/hara.data.nested" "zljdb" "org.jgroups/jgroups" "piton" "org.clojars.zef/jopenid" "jobless-clj" "funcool/httpurr" "org.omcljs/ambly" "delijious" "cc.qbits/alia-async" "org.clojars.achim/opt" "org.clojars.paul/kafka-clj" "cc.artifice/lein-tern" "flake" "jarohen/lein-environ" "ithayer/trammel" "clojurewerkz/sigar-native-deps" "org.clojars.jasonjckn/kestrel" "clj-aws-swf" "language-implementations/tools.compiler" "clj-rome-fetcher" "wrom/lein-template" "de.active-group/vfei" "twilio-api" "tree-config/jwe" "seaquell" "org.clojars.aircart/leveldb-clj" "perforate" "org.joegallo.robocode/robocode.core" "gtalarm/gtsp" "org.clojars.fhofherr/lein-cucumber" "java-server-two" "funcool/tubax" "org.clojars.abpoms/pallet-vmfest" "slamhound" "org.eamonn.funcgo/fgolib" "lein-sad" "org.clojars.micha/clj-soap" "org.clojars.iamedu/clojure-jsr223" "stask/ring-jwt" "ns-reloader" "jmreidy/clj-orchestrate" "basic-speclj-template/lein-template" "sebastiansito/lein-ragtime-gen-migrations" "tandem/support" "viebel/usermedia" "k2nr.docker" "im.chit/hara.data" "cljs-ring/lein-template" "com.xorlev.gatekeeper/gatekeeper" "testing123/core.async" "uk.org.russet/swingrepl" "pallet-thread" "org.clojars.dbasch/dogecoinj" "org.clojars.pallix/jgraphx" "net.intensivesystems/conduit-futures" "org.clojars.hugoduncan/fipp" "ring-jetty-component" "clojang" "net.djpowell/b64" "modular/lein-template" "com.lemonodor/getopt" "s3sync" "barbuza/clj-oauth2" "snowball-stemmer" "org.clojars.mediocregopher/massage" "ragtime-c.j.j-0.3.3/ragtime.sql.files" "levels-client" "org.bituf/clj-miscutil" "gpl3p/lein-template" "jompo" "lein-tarsier" "will-horning-fork/kria" "plumbier" "com.amazonaws/aws-java-sdk" "gered/clj-browserchannel" "cljsjs/codemirror" "camelarius" "org.clojars.haduart/clj-performance-logger" "truss" "pedantic" "org.clojars.kirs/clj-oauth2" "mr-clojure/lein-template" "carbon/rx" "clojusc/reggae" "clj-haml" "lein-ptest" "org.clojars.lokori/lolog" "load-test" "tryclojure" "lein-update-dependency" "eu.cassiel/twizzle" "io.framed/std" "star" "org.clojars.rhg135/aleph" "ru.prepor.component/jdbc" "com.walmartlabs/pallet" "org.clojars.jeffmad/clj-icalendar" "org.eclipse/swt-carbon-macosx" "com.linkedin.databus/databus-core-schema-tools-pkg" "com._0xab/sanity" "org.clojars.philc/lein-dieter-precompile" "hadoop-util" "greek_stemmer" "ytyt" "org.clojars.aperiodic/jackson-core-asl" "org.clojars.jpoplett/fnparse" "slick2d" "prismatic/hiphip" "name.stadig/polyfn" "org.clojars.paulche/tentacles" "schnipseljagd" "caribou/lichen" "metrics-kafka-reporter" "clj-owlapi" "squiggle" "funcool/clojure.jdbc" "org.clojars.mmikulicic/clojure-ldap" "mattsum/boot-react-native" "tim/lein-template" "burningswell/worker" "schematomic" "metosin/leaplib-natives" "event-log" "org.clojars.duncanmortimer/liberator" "clj-kafka" "org.clojars.mkhoeini/mocha-tester" "eftest" "cljsjs/mustache" "com.adobe.flex/flex-rds-server" "org.immutant/immutant-common" "cljs-net" "org.clojars.mopemope/watchdog" "com.redbrainlabs/system-graph" "org.clojars.krisajenkins/aleph" "static-cljs/lein-template" "jig/async" "cql" "irresponsible/tv100" "funkyweb" "org.clojars.pjt/opennlp-tools" "org.clojars.jasonjckn/lein-midje" "clj-http-ae" "cascading1.1" "clocop" "lein-hlisp" "clojure-gntp" "com.bevuta/lpd" "better-clj-geoip" "prism" "com.madeye.clojure.common/common" "lein-sitecompiler" "dwolla-sdk-clojure" "jdbm2" "ring-gae/ring-servlet-gae" "com.edvorg/kibit" "org.clojars.s450r1/dcm4che-tool-dcmgpwl" "clj-diff" "overtone.orchestra" "lein-jcasgen" "org.dunaj/dunaj-lite" "stl-collector" "raymarchcl" "clj-ev3dev" "clojuresque" "com.miguno/kafka-avro-codec_2.10" "clj-fo" "org.clojars.avasenin/test.mock" "marcliberatore.mallet-lda" "tb.modules" "seymores/textteaser-clj" "lein-guzheng" "yesql-sugar" "st/demo" "animated-gif-clj" "org.clojars.skv/objloader" "de.karolski.sanity" "org.clojars.akiel/transit-schema" "ledet/fastbeans" "bigml/closchema" "org.bodil/lein-noderepl" "hadouken" "badjer/cljx" "witan.workspace-api" "clj-vat" "org.clojars.pierrehenryperret/jackson-core-asl" "subversion-clj" "im.chit/repack.advance.util.array" "nrepl-main" "org.clojars.touch/fleet" "dummy-clj-jvm-lib" "net.nanonation/pedestal.jetty" "thinktopic/tsne-core" "awsign" "ragge/clojure" "org.clojars.hozumi/session-expiry" "org.ivan/cdraw" "wildworld/clj-interest-graph" "org.clojars.the-kenny/clojure-couchdb" "pour" "com.brunobonacci/where" "venantius/glow" "sendwithus-clj" "tappan/util" "cljsjs/tv4" "jarohen/yoyo" "io.homegrown/boot-sim" "oxbow" "pokereader" "lein-conjecture" "jogl/jogl-gles1-dbg" "edu.ucdenver.ccp/kr-jena" "com.contentjon/plugin-jar" "trickyhappyface" "com.hellonico.gearswithingears/async-sockets" "ch.deepimpact/yada" "com.greenyouse/ligable" "strowger" "jubot" "tonsky/figwheel" "com.cognitect/transducers-js" "jepsen" "com.rafflecopter/relyq" "nlp" "com.wizardbeard/prng" "quil/lein-template" "net.java.dev.jogl/jogl-solaris-i586" "org.clojars.serabe/rinzelight" "org.clojars.hozumi/clj-redis" "mrmcc3/frontend-build-components" "lein-rpm" "clj-sensu" "speclj.shoulds.matrix" "fixed_xor" "mrmcc3/libsass-clj" "com.vividsolutions/jts" "controlp5" "littleprinter/lein-template" "compojure/lein-template" "org.clojars.guv/jppf-common-node" "org.clojure/java.jmx" "org.clojars.sandaemc/clotool" "gzip-util" "ctco" "routa" "org.clojars.patburke/lein-droid" "org.clojars.marmaduke/vectorgraphics" "com.gfredericks/four" "fact/shadow-build" "influxdb/influxdb-clojure" "com.benburkert/pghstore-clj" "org.clojars.sorenmacbeth/dfs-datastores" "opentable/chantrix" "com.apa512/diglett" "clojureql" "com.andrewmcveigh/cljs-time" "org.clojars.jasonjckn/clarsec" "net.cgrand/utils" "enliven" "net.nanonation/pedestal" "clojure.jdbc" "trident-gcd" "org.clojars.echeran/sbt-clojure_2.10_0.13" "polymer.elements/iron" "clucie" "org.clojars.magomimmo/shoreleave-remote-ring" "cosmi/clj-rhino" "automat" "io.screen6/estimators" "caribou/clj-aws-s3" "io.hivewing/ec2-metadata" "org.codehaus.mojo/adtech-security2-ng" "log4-clj-layout" "juxt.modular/web-template" "jeremys/cljss-grid" "lein-env" "print-foo" "bilus/marginalia" "overtone/scsynth-interop-extras" "org.clojars.ru.smartislav/lmax-client" "com.pouchdb/pouchdb" "blex" "friend-google-openid" "incanter/netlib-java" "kudu-clj" "org.clojars.raynes/clojure-http-client" "org.trpr/example-services" "jig/netty" "org.flatland/hermes" "jis-command" "org.clojars.h3x3d/titanium" "org.clojars.needmoredesu/gen" "clojure-watch" "montoux/gestalt" "org.clojars.bagucode/bagu_lwjgl" "lshift/lein-jruby" "basic-web-mh-template/lein-template" "it.uniroma2.art.org.jopendocument/jopendocument" "org.clojars.doo/postal" "com.flipkart.aesop/diff-producer" "clj-jtwig" "juxt.modular/cassandra" "org.clojars.brunchboy/protobuf" "deraen/boot-hyphenate" "swank-clj" "rechtzeitig" "gclouj/storage" "password-check" "lein-morecss" "com.russpowers/dependency" "firealarm" "clj-kasumi" "clj-html" "org.clojars.osbert/monet" "psy.ai/algo.monads" "com.gfredericks/referee" "org.clojars.yanatan16/schema-extensions" "configleaf" "org.clojure/test.generative" "org.clojars.nakkaya.javax.mail/mail" "org.clojure/algo.monads" "mkremins/dep-graph" "metosin/metosin-common" "lein-plantuml" "tailrecursion/twitter.bootstrap" "matross/crosshair" "dsabanin/clj-jgit" "com.postspectacular/piksel" "org.clojars.t8r/plist-export" "org.tcrawley/swank-clojure" "org.clojars.strongh/storm-finagle-drpc-client" "org.clojars.cemerick/kibit" "org.clojars.cjschroed/appengine-magic" "up" "org.clojars.jeffdik/core.memoize" "me.panzoo/story" "overtone/clj-piccolo2d" "af/clojure-neo4j" "io.riemann/metrics2-riemann-reporter" "com.rmoquin.bundle/minlog" "org.clojure-grimoire/lein-grim" "analytor" "euclidean" "dotenv" "com.palletops/hadoop-crate" "sendgrid-java-wrapper" "clj-cljs-weasel/lein-template" "duel" "mpjct/jmp" "org.clojars.gworley3/peridot" "tandem/server" "sugar" "testdouble/clojurescript.csv" "org.clojars.algernon/impressive-hiccups" "org.trpr/batch-HA" "cljs-node-app/lein-template" "scryptica" "gorillalabs/ogre" "milesian/system-examples" "cljsjs/chartjs" "clavatar-js" "org.clojars.liubo/auto" "com.yellerapp/ua-parser" "ring-cssgen" "im.chit/hara.common.string" "cognician/dogstatsd-clj" "org.clojars.mopemope/honeysql-helper" "org.clojars.mattrepl/jedis" "clj-btc" "tide" "lein-lein" "org.clojars.ato/jdbi-annotation" "org.clojars.scottjad/gaka" "org.clojars.wilkes/lein-cuke" "userevents/phaser" "org.clojars.sorenmacbeth/lucene-stanford-lemmatizer" "cljsjs/klayjs" "com.damballa/abracad" "io.aviso/toolchest" "devn/css-selectors" "t_crayford/parsley" "yalh/sample-lib" "thefreshdiet/nim-member" "clj-zoo-service-tracker" "midjournal/lein-cloverage" "roti/appengine-magic" "frak" "mrmcc3/boot-rev" "maven-clojure/maven-plugin-annotations-clojure" "jiangh/lein-aggravate" "somni" "boot-garden" "org.harto/huon" "com.palletops/postgres-crate" "twijlio" "resque-worker" "civs" "java-cloudfiles" "unpackr" "ryane/hiroba" "lein-plugin" "com.raspasov/amazonica" "web" "kephale/lwjgl-natives" "datomic-schema-grapher" "cljsjs/react-drag" "org.clojars.tcrawley/clojure-maven-plugin" "org.clojars.pedroteixeira/redis-clojure" "overload-middleware" "lein-findfn" "w01fe/boilerpipe" "org.clojars.damoe/ebay-ws" "clojush2" "net.reborg/applenews-api" "truckerpath/unilog-appenders" "clj-v8-native" "carry-schema" "com.franz/openrdf-sesame-onejar" "org.tcrawley/lein-immutant" "clj-ical" "rsyntaxtextarea-dev" "jclemenson/lobos" "mysema/ttl-reader" "lein-browserific" "com.miguno/storm-kafka-0.8-plus_2.10" "com.camechis/deploy-uberjar" "com.palletops/pallet-common" "com.akolov/xelery" "storm/tools.cli" "raywillig/ring-middleware-index-file" "co.nclk/linen" "org.rksm/cloxp-installer" "mccraigmccraig/cats" "stask/micro-middleware" "roxxi/denormal" "com.poseur/clj-redis" "juno.resource" "clojurewerkz/cyclist" "org.clojars.ctek/mapping-schema" "aatree/aaworker" "comma-err" "clooj" "lein-xml" "com.thelastcitadel/apropos" "org.clojars.j1n3l0/transliterate" "offset" "org.clojars.llasram/lein-otf.loader" "lean-map" "net.nanonation/pedestal.app-tools" "org.clojars.jaydeesimon/clj-jgit" "org.nakkaya.robocode/robocode.host" "galdolber/j2objc" "vitalreactor/om" "jcurses.system/jcurses" "jdbca" "org.clojars.jandot/bio" "cmbntr/cmbntr.args" "com.malloc47/polaris" "zilti/korma.incubator" "quantum/figwheel-sidecar" "lein-annotations" "timewarrior/ring-json-params" "org.clojars.frozenlock/sero-utils" "org.drift-db/drift-db-mysql" "org.clojars.pjt/opennlp-maxent" "playground" "com.keminglabs/reflex" "amalloy/manifold" "async-ring" "turboshrimp" "bickfordb/lg" "piggieback/lein-template" "org.clojars.strongh/kamikaze" "com.murphydye/utils" "com.7theta/via" "lein-gnome/lein-template" "apartial" "cbilson/clj-webjars" "clojure-jsr223" "org.clojars.bartonj/closure-lib" "zortable" "org.nfrac/cljbox2d.testbed" "clj-liblinear" "kephale/uncommons-maths" "com.flyingmachine/liberator-unbound" "neush/cascalog" "com.tbaldridge.hermod" "org.clojars.miau.biz.compojure" "reify/tokamak" "stackless" "com.gjcourt/clj-jones" "org.clojars.dlepage/clj-cassandra" "ibdknox/analyze" "jcf/lein-template" "devn/slim" "com.kaicode/mercury" "io.hoplon.danielneal.vendor/reveal" "org.conjure/conjure-script-core" "com.linkedin.databus/databus2-client-util" "org.clojars.jozias/codox.core" "irresponsible/unscrew" "com.google/clojure-turtle" "com.semperos/selenium-webdriver-clj" "clj-utils" "paddleguru/clutch" "ultra-summation" "jakemcc/tentacles" "ring/ring-json" "mtg-proxy-pdf" "helpshift/sensu-client" "active-clojure" "org.palletops/clojure" "cesper" "org.clojars.frozenlock/svg-wranger" "migrate" "cljs-react-material-ui" "org.clojars.metajack/ring-gzip-middleware" "tranchis/core.async" "com.hendrick/avenue" "org.clojars.cninja/appengine-local-runtime" "samsara/trackit" "mvxcvi/withings-clj" "vigiglobe/compojure-api" "naive-bayes" "com.linkedin.databus/databus-core-schemas" "redis-clojure" "mkremins/drawille-clj" "org.clojars.frankiesardo/lein-test-out" "beanbag" "translate" "me.panzoo/couch-clojure" "gargamel" "com.keminglabs/friend-oauth2" "bilus/pipes" "org.clojars.arohner/ring-core" "com.kaicode/infamous" "minicheck" "dimagog/dimagog.util" "hyperion/hyperion-mysql" "org.clojars.houshuang/keymaster-clj" "org.clojars.akiel/clj-ldap" "lincus-common" "dwwoelfel/pdfboxing" "org.clojars.doo/cheshire" "org.esanmiguelc/ttt-clojure" "com.gfredericks/forty-two" "org.clojure-android/criterium" "sequiturish" "lambdacd-cron" "incanter/incanter-charts" "org.clojars.snuxoll/clojureql" "appcanary/peridot" "circleci/clj-yaml" "incanter/incanter-latex" "com.flyingmachine/config" "org.clojars.daniel-pittman/clothesline" "com.joshuadavey/boot-middleman" "wakeful" "org.wol/rusted-bridge" "org.clojars.harsha2010/cascalog" "boot-protobuf" "lein-piton" "org.clojars.dbrown/clojars-test" "knusbaum/autodoc" "org.clojars.pjt/saxon9-s9api" "metamorphosis" "fusion-clj" "im.chit/hara.concurrent.ova" "org.clojars.bsima/itsy" "org.danielsz/clojure-bitly" "org.clojars.zerg000000/lein-sql" "clojuredocs-docset" "hipchat-clj" "com.adobe.flex/flex-messaging-common" "org.clojars.cdorrat/geva-examples" "zclucy" "org.elasticsearch/elastiqueue" "com.flipkart.aesop/sample-elastic-search-client-cluster-consumer" "duct/generators" "diffit" "fullcontact/camelsnake" "org.clojars.gcatlin/boxjavalibv2" "com.ninjakoala/cidr" "org.gensym/tools.trace" "org.clojars.runningskull/reagent" "org.clojars.indabamusic/clj-http" "scheje" "quil-cljs/lein-template" "hyperion/hyperion-redis" "org.clojars.narma/asynp" "bencoding-clj" "conveyor" "com.damballa/inet.data" "com.relaynetwork/clj-crypto" "lein-embongo" "thread-exec" "com.scriptling/clojureserver" "com.linkedin.databus/databus-relay-run" "cljsjs/tabletop" "milesian/sequence-diagram" "org.joegallo.robocode/robocode" "me.raynes/hickory" "prowl" "drtom/clj-postgresql" "cljcsv" "ib5k.holon/component" "cljcc" "kasyaar-test/lein-template" "cn.leancloud.diamond/diamond-all" "cljsbuild-global" "net.djpowell/reload-templates" "org.clojars.liebke/compojure" "alandipert/upcase" "com.flipkart.aesop/runtime-client" "org.clojars.phalphalak/jogl-linux-amd64" "juxt.modular/wire-up" "com.olabini/clj-utils" "ctdavies.cclab/fullscreen" "mbuczko/boot-ragtime" "org.clojars.mmcgrana/jredis-core-api" "trivial-library-example" "untangled-starter" "com.flipkart.aesop/sample-console-appender-client-cluster-consumer" "boot-lein" "de.otto/tesla-microservice" "embang" "lachie/lein-jruby" "vectorgraphics" "sebastiansen/rip" "shoreleave/shoreleave-remote" "org.clojars.nlacasse/clj-gremlin" "com.narkisr/carmine" "org.clojure.sandaemc/clotool" "com.sun.jini/jsk-lib" "org.clojars.tuomask/clojure-json" "com.mrcslws/gorilla-repl" "org.clojars.ah45/clj-kafka-util" "org.clojars.lapax/kyotocabinet-java-native-deps" "im.chit/hara.protocol.time" "hypermedia" "cljs-node/lein-template" "org.clojars.btw0/redis-clojure" "org.martinklepsch/s3-beam" "thunknyc/profile" "circuit-breaker" "arrows-extra" "clojure-debug-build" "extra-time" "ruiyun/tools.timer" "banana" "rxtx22" "com.greenyouse/pldb-cache" "org.clojars.cdpjenkins/lein-ring" "edocu/clj-edocu-help" "edpaget/om" "advance" "org.clojars.ikoblik/clj-index" "cav/asyncflow" "org.clojars.frozenlock/envision-cljs" "org.clojars.marsliu/jparsec-adv" "kant" "velcro" "com.yetanalytics/xapi-schema" "bookworm" "lein-our-classes-only" "clj-help" "ashenfad.com.clearspring.analytics/stream" "clj-rpm/newrelic" "org.clojars.stevesj76/spyglass" "rodnaph/jenko" "wrap-component" "pisto" "yuhta/googleauth" "org.clojars.bschwind/keymaster-clj" "vdom" "riemann-clojure-client" "yieldbot/storm-kafka" "org.skummet/clojure" "lein-multi" "intronic/clj-aws-s3" "ac" "com.michaelgaare/kr-sesame-core" "cynojure" "org.clojars.benekastah.mongo-models" "world-boundaries" "clojure.jdbc/clojure.jdbc-hikari" "rplevy/contrib-repl" "tnoda.incanter.xlsx" "org.clojars.frozenlock/clj-stripe" "datil/schema-rosetta" "s3-static-deploy" "sv.gcloud/client" "lein-thrift" "me.arrdem/dogeon" "asm/asm-util" "pleasetrythisathome/datascript" "com.novemberain/validateur" "org.signaut/ring-jetty9-adapter" "easyconf" "clj-zoo-watcher" "co.likely/clj-stacktrace" "clj-moco" "kevin1999/ring-mock" "ec.datil/krypton" "org.dunaj/clojure" "taggp" "org.clojars.kjw/lucene-spellchecker" "org.clojars.stanistan/flickr-clj" "sv/system.httpkit" "org.clojars.hozumi/clj-commons-exec" "ldapman" "infinario" "org.clojars.blank-appengine-clj" "amalloy/thrift-gen" "nl.onlinetouch/clj-yaml" "fuzzy-urls" "koomus.trees" "mvc-works/respo-value" "mvc-works/html-entry" "problem_01-hex_to_base64" "org.clojars.verma/ring-proxy" "ring-middleware-accept" "accord" "com.aboutecho/clj-http" "org.clojars.weissjeffm/httpclient-negotiate" "basic/lein-template" "org.clojars.ato/nailgun" "com.mysql/connectorj" "fix-translator" "im.chit/hara.thread" "io.isaachodes/reticulum" "org.nfrac/cljbox2d" "org.clojars.miau.biz/clojure-json" "metosin/scjsv" "com.rallydev/clj-rally" "org.clojars.gcatlin/boxjavalibraryv2" "org.clojars.mikejs/clojure-zmq" "org.clojars.hjiang/compojure" "syntactic-closure" "clj-commons-exec" "cloth" "org.trpr/platform-task" "org.clojars.nakkaya.jmonkeyengine/jme-audio" "ring-session-riak" "com.yellerapp/ordasity-scala_2.9.1" "org.clojars.mikos/vijual" "clj-module" "org.spootnik/aleph" "org.clojars.hsestupin/overspec" "fb/libthrift" "com.github.docker-java/docker-java" "openide-util" "gravatar" "rogerallen/leaplib-natives" "com.adobe.flex/flex-messaging-core" "foam" "org.clojars.sc13-bioinf/lein-fixtures-sql" "org.clojars.somnium/user" "thinktopic/cortex-datasets" "ojo" "org.clojars.jeffdik/hiccup" "com.outpace/data.csv" "org.clojars.hippiccolo/qgame" "jenkins-hash" "juxt.modular/http-kit" "net.matlux/repl-bootloader" "flat-layout-web/lein-template" "org.clojars.sbacon/ssh-crate" "jpcap" "clj-facebook" "clojure-opennlp" "bmabey/sandbar" "tie/tiesql-client-cljs" "org.clojure.s450r1/dcm4che-tool-xml2dcm" "org.clojars.bmabey/circumspec" "org.clojars.orphid/cljfmt" "one_more_minute/clarity" "authorization-troll" "org.clojars.intronic/appengine-magic" "royrutto/leaflet-cljs" "goclojure" "portage" "vokram" "org.clojars.bmabey/karras" "webnf.deps/web" "sockjs-clojure" "roul" "quickie" "bilus/auth" "com.ingemark/lein-upload" "com.ryanmcg/incise-vm-layout" "alertsp" "co.nclk/flax" "mostly-useful" "ojo.extension" "possibledb-client" "spirit-worker" "org.clojars.mw10013/clj-time" "org.clojars.lancepantz/clojure" "morri/lib" "tvachon/enlive" "org.clojars.runningskull/ring-swagger" "clojure-saxon" "lein-test-bang-bang" "com.wcohen.ss.art.uniroma2.it/secondstring-osgi" "test.tree" "org.clojars.samaaron/rxtx22" "cljspp" "rage-db" "com.kurogitsune/unbrace" "klojoule" "genmo2014/libsodium" "arango-session" "lein-tag" "org.rksm/cloxp-server" "com.jmeeks/clj-web-crawler" "jumblerg/ring.middleware.cors" "steamid" "bwo/monads" "org.tiago/fun-bot" "salesfear" "circleci/circle-util" "org.clojars.smartmetersolutions/data.xml" "incanter/incanter-full" "org.clojars.zaiste/clj-soap" "joplin.dynamo" "xml-picker-seq" "com.hmsonline.bundle/minlog" "embang/emplan" "joodo" "zpracovani" "org.clojars.doo/avout-mongo" "org.typedclojure/strict-typed-ops" "overtone/clj-native" "clj-paymill" "messageformat" "cryogen-admin" "com.rpl/specter" "org.clojars.ah45/metrics-kafka-reporter" "mathias/boot-restart" "burp" "cascalog-more-taps" "crt" "tcrawley/boot-verify" "alandipert/boot-jasmin" "org.clojars.brandonw/lein-nailgun" "rm-hull/cljs-webgl" "indigenous" "lava" "bleach" "org.clojars.lygaret/lein-ngserver" "jdbm" "im.chit/kiran" "com.redhat.qe/tcms-testng" "particles" "net.colourcoding/poppea" "cc.qbits/clj-esearch" "byte-streams" "com.raspasov/faraday" "whitewash" "clj-assorted-utils" "flickrj" "cravendb" "is.pum/sock" "org.clojars.compuwizard123/storm" "edocu/clj-edocu-cache" "org.clojars.vaughan/clj-zmq" "zaffre" "clj-postgresql" "org.clojars.nakkaya/vecmath" "lein-db" "com.brweber2/clj-dns" "mccraigmccraig/react-with-addons" "org.clojars.rozifus/addr-to-ip-port-cljs" "org.clojars.charles-stain/clj-facebook-graph" "meta-x/reagent-components" "org.clojars.ato/too-hot" "clj-pebble" "org.clojars.doo/hudson" "org.clojars.alpheus/postgresql" "appkit" "cljsthree" "lambdacd-artifacts" "clj-text-utils" "clojureslim" "elasticsearch-bolt" "kaibra/ms-httpkit" "org.clojars.xcthulhu/langohr" "am.ik/clj-aws-ecs" "com.taoensso/sente" "com.rmoquin.xbean/xbean-blueprint" "org.clojars.curvelogic/capacitor" "memoasync" "wolf" "spot" "clj-iso7064" "org.openrdf/sesame-onejar" "ymilky/franzy-json" "raywillig/spectrum" "cljsjs/leaflet-locatecontrol" "org.clojars.osbert/ring-mock" "lein-sleight" "kestrel-client" "rabbitmq-client" "lein-ruby" "cloudpassage-lib" "luminus-http-kit" "im.chit/vinyasa.reimport" "org.clojars.doo/clj-tagsoup" "stuarth/clj-oauth2" "org.clojars.smallrivers/juniversalchardet" "org.clojars.dgiri101/marginalia" "lein-typescript" "slingshot" "image-compojure" "org.clojars.paul/kafka" "com.ranger.hazelcast.servicediscovery/hazelcast-ranger-discovery" "org.clojars.arbscht/compojure" "seancorfield/lein-expectations" "ike/ike.highway" "lein-npm" "edu.ucdenver.ccp/kr" "org.bovinegenius/exploding-fish" "clj-dropbox-oauth2" "into-edn" "phash/phash-native" "gitiom" "oneness/clj-disruptor" "net.java.dev.jogl/jogl" "xuggler" "danielsz/boot-environ" "rill-event-sourcing/rill.aggregate" "om-table" "venantius/yagni" "twilio" "clj-icalendar" "trident-cassandra" "ringfinger/authfinger" "parse-markdown" "boxtemplate" "org.dunaj/dunaj" "org.clojars.t8r/clj-ldap" "fresh" "co.paralleluniverse/pulsar" "clj-mail" "ring-auth" "bone" "vmarcinko/teuta" "org.clojars.rayne/clostache" "psibi/clj-uclassify" "mecab" "sv/reagent.component" "ryfow/timbre" "com.andrewberls/clojurescript.test" "org.clojars.danlentz/clj-uuid" "thalia" "ola-clojure" "csv-export-bolt" "com.kaicode/morpheus" "ccfontes/benrikuro" "vertx/lein-template" "no-man-is-an-island/clj-aws-s3" "ttt_clojure" "tangrammer/apit" "alandipert/intension" "gardnervickers/fabric" "inkle" "flare/flare-clojure-test" "hornetq-clj/client" "org.octacone/orbitaldrop" "cljs-ajax" "mailchimp" "clojurewerkz/eep" "lein-servlet/lein-template" "lein-retest" "config-file" "org.platypope/method-fn" "de.otto/tesla-xray" "metosin/ring-swagger" "bmabey/nippy-snappy-0.2" "org.bitbucket/rf-topology" "bearable" "net.bendlas.ring/ring-core" "org.onyxplatform/onyx-http" "org.domaindrivenarchitecture/dda-user-crate" "com.analytica/client" "dgellow/tl-api-client" "hive/hive-serde" "piranha" "uswitch/clj-aws-s3" "paddleguru/lein-gitflow" "clj-campfire" "cljsjs/jqgrid" "bugs-landing-page" "org.clojars.deltam/saxon" "io.github.emidln/marceline" "astra" "epicea/result" "reconfig" "org.clojars.leanpixel/jwt" "fitbit-public" "com.github.kyleburton/clj-xpath" "com.flipkart.aesop/data-layer-mysql" "org.clojars.indabamusic/jopbox" "net.mikera/randomz" "net.cgrand/seqexpi" "org.clojars.lancepantz/difform" "bilus/clj-browserchannel-server" "org.clogars.mw10013/remix" "helpshift/gulfstream" "org.clojars.ghoseb/clojure-http-client" "org.clojars.andrewzures/clojure_ttt_server" "klutometis/omg-deutsch" "org.clojars.nakkaya/ssl-protocol" "cross-parinfer" "d3c" "org.clojars.ikarth/libsodium-windows-native-deps" "clj-kylm" "thi.ng/color" "intervox/clj-progress" "org.clojars.jyaan/overtone" "clj-info" "org.clojars.sharat87/project-jars" "uk.org.russet/tawny-protege" "moar" "clj-geni" "cpath-clj" "conjul" "me.arrdem/detritus" "shoreleave/shoreleave-remote-noir" "clive" "org.clojars.hms/inflections" "watchtower" "org.clojars.weavejester/rotary" "aleph-system" "clojure-erlastic" "lein-pprint" "org.clojars.monodeldiablo/metrics-clojure" "kidpollo/overlock-scala_2.9.1" "praline" "hiccups" "adzerk/boot-ubermain" "com.thaihotels" "com.vijaykiran/docjure" "crudo" "org.clojars.automata/minim-spi" "parsargs" "kephale/matlabcontrol" "net.kronkltd/waltz" "no-man-is-an-island/lein-eclipse" "sendgrid" "im4clj" "org.clojars.ato/clojure-couchdb" "cc.artifice/clj-ml" "candelabrum" "outpace/sablono" "org.clojars.pmbauer/clojurescript_cs" "patchin" "org.clojars.gaelbreard.redis.embedded/embedded-redis" "porcupine" "org.clojars.sirn/clojureql" "io.screen6/cardinality" "zenedu/zenpack" "org.clojars.nanonation/pedestal.jetty" "factual/drake" "fasiha/clatrix" "org.abpoms/caribou-core" "com.linkedin.databus/databus-cluster-manager-impl" "stakeout" "monad" "org.immutant/immutant" "thi.ng/tweeny" "grafterizer/tabular_functions" "org.clojars.chapmanb/gatk-framework" "franks42/seesaw" "net.solicode/middlebrow-swt" "burningswell/api" "jlk/data" "org.marianoguerra/tubes" "com.guokr/clj-cn-nlp" "ragtime/ragtime.sql" "im.chit/hara.concurrent.notification" "nginx-clojure/nginx-clojure-embed" "com.ifesdjeen.patch/cassandra-all" "grid" "shakhov.flow" "adzerk/boot-reload" "org.clojars.haussman/react-pixi" "jcf/schema" "newt/newt-all-noawt" "cljs-contrib" "dwca-reader-clj" "factual/drake-interface" "lein-difftest" "clj-rm-rf" "milesian/system-diagrams" "matsu911/ring-server" "edw/loggle" "google-api" "wilson" "clj-skroutz" "com.palletops/log-config" "gbrd/embedded-redis" "whodidthis/clj-pouchdb" "mongo-clojure-wrapper" "com.gfredericks/useful" "pyutils" "lein-maven-packagecloud-wagon" "org.clojars.lapax/neo4j-spatial" "spootnik/clostack" "clj-github" "org.clojars.laujensen/charts4j" "conceit/conceit-commons" "liberagent/lein-template" "memento" "deangiberson/lein-deploy-app" "crypto-equality" "reaper" "cloutjure/backend" "thheller/lein-test-loop" "com.github.frankiesardo/icepick-parent" "org.clojars._ulises/clj-pusher" "colored-reporter" "lein-project-version" "org.clojars.tavisrudd/redis-clojure" "clisk" "milesian/identity" "satellite-clj" "e-lein-guzheng" "cljsjs/d3kit" "fractalide/boot-nix" "org.clojars.maravillas/ring-devel-gae" "org.immutant/messaging" "org.msg/dropbox" "org.clojars.blucas/linkedin-connections" "org.clojars.mudphone/zookeeper" "incise" "read-config" "yogsototh/lein-kibit" "cd-client" "cljs-test/lein-template" "anagram" "clj-edocu-zeromq-communication" "org.clojars.zenbox/codeq" "epi-component" "optimus-less" "clj-ebay" "storm/trident-memcached" "om-forms" "cljsjs/flot" "clamq/clamq-core" "rojat.arrows-extra" "mwdict" "cld" "weareswat/meowallet-integration" "om-routes" "kyleharrington" "org.clojars.dtolpin/anglican" "puppetlabs/trapperkeeper-comidi-metrics" "drift" "clll" "lymingtonprecision/cdc-util" "stabilized/clojurescript" "org.clojars.strongh/storm-kafka-0.8-plus" "rplevy/clj-facebook-graph" "org.clojars.djpowell/sjacket" "up/up-core" "commando" "eejp-web-dev0" "org.clojars.mikkosuonio/opetushallitus-aitu-e2e" "jlk/repl" "rowtr/s3-beam" "ring-refresh" "trylobot/hive" "jarohen/phoenix.modules.garden" "recon" "reverie" "net.mikera/clisk" "stemmers" "cljs-input" "kixi/compojure-api" "modernizr" "boresquare" "fb-graph-clj" "org.clojars.devll/clj-http" "gered/clj-rhino" "org.clojars.markdingram/lein-js" "org.tcrawley/tools.nrepl" "java-server" "narkisr/cliopatra" "com.gfredericks.forks.prismatic/schema" "oolong" "turnstile" "cljsjs/peg" "ring-request-proxy" "clojure-complete" "sente" "eightysteele/twitter-api" "org.clojure.gaverhae/okku" "org.clojars.tnoda/tnoda.xls" "org.clojars.btw0/postal" "axmodule" "leiningen.core.project/cascalog" "lein-repl-server" "thi.ng/dstruct" "catvec" "overtone/scsynth-interop-linux-x86-maverick_portaudio" "tip" "com.flipkart.aesop/avro-schema-generator" "org.clojars.chapmanb/jama" "anabolic-site-build" "slacker" "io.hoplon.vendor/twitter.bootstrap" "jlk/log" "com.gfredericks/vcr-clj" "err" "manila-john" "clj-image2ascii" "org.clojars.prasincs/clj-mesos" "clanhr/ical" "zjhmale/letrec" "fixturex.higher" "clj-allegrograph" "criterium" "rpc-common-server" "lein-midje-lazytest" "karma-reporter" "org.clojars.cuvuligio/joodo" "fogus/thneed" "crisptrutski/android-context-stub" "org.clojars.lambdatronic/geo-xls" "dk.brics.automaton/automaton" "congomongo" "promise-stream" "org.clojars.canweriotnow/jpam-native-deps" "clanhr/new-reliquary" "me.panzoo/beard" "thieman/async-anything" "fivetonine/collage" "yuppiechef/onyx-dynamodb" "astro-algo" "audyx-s3/webaudio" "aviary/aviary-filesystem" "org.hypercrud/hypercrud-ssr" "clojang/jiface" "reply" "shoreleave/shoreleave-core" "grafter/lein-template" "org.signaut/joiner" "dt" "org.clojars.ollez/swingrepl" "cljsjs/react-datepicker" "vigiglobe/ring-swagger" "org.clojars.nakkaya/commons-math" "com.greenyouse/plugin-helpers" "im.chit/hara.concurrent.procedure" "org.clojars.jozias/speclj" "cawala/link" "onyx-http" "clojurewerkz/vat" "com.gfredericks/lib-4395" "com.mdrogalis/onyx-sql" "opencsv-clj" "com.infolace/excel-templates" "kunstmusik/score" "himera" "org.codehaus.mojo/adtech-security-providers-client" "glimpse-app/lein-template" "marshal" "org.clojars.firesofmay/faker" "net.defn.ring/ring-core" "org.clojars.alesguzik/cats" "rksm/sommers" "org.clojars.kiril/caws" "cledis" "rapture" "org.clojars.miguno/avro-gradle-plugin" "org.clojure/data.codec" "org.clojars.echo/data.json" "q" "incanter/jtransforms" "org.clojars.sickcuchulainn/shoreleave-browser" "org.clojars.jvillste/gluegen-rt" "bridle" "org.clojars.mmcgrana/debug-repl" "chriscnc/typed-logging" "io.pedestal/pedestal.service-tools" "net.sourceforge/barbecue" "antler/clj-oauth" "vizanto/bestcase" "malcolmsparks/co-dependency" "org.clojars.mediocregopher/clerb" "lein-objcbuild" "shopify" "fence" "com.vitalreactor/schedule" "lein-rhino" "org.thnetos/cd-client" "interval-metrics" "fops" "fullcontact/full.bootstrap" "org.dunaj/dunaj.doc" "lein-coconut" "org.clojars.mikehinchey/agraph-clj" "cljx-start-lib/lein-template" "org.bitumenframework.jettify/jettify-java" "langohr" "matthiasn/trailing-mouse-pointer" "warc-clojure" "org.clojars.robinkraft/clj-aws" "trystan/delaunay-triangulation" "radicalzephyr/boot-junit" "com.palletops/bakery-local-storage-atom" "org.clojars.aperiodic.quil" "org.conjure/conjure-test" "apijr/lein-template" "com.palletops/chiba" "vertu" "om-reforms" "ansuz" "org.clojars.s450r1/dcm4che-filecache" "org.clojars.zaxtax/opennlp-tools" "gmaps-cljs" "org.dave/cfg" "org.clojars.michaelsbradleyjr/clj-orient" "dali" "org.flatland/classlojure" "com.thelastcitadel/ring-undertow-adapter" "jcf/clj-ssh" "ccfontes/fuzzy-matcher" "lein-redline-rpm" "org.timmc/lein-otf" "limonada" "lein-fregec" "com.vitalreactor/twilio-rest" "peripheral" "org.clojars.gukjoon/checkout-sdk" "yehe/clojure-refactoring" "brendanyounger/boot-quick-test" "surd" "simple-openni" "flatland/difform" "pandeiro/http-kit" "com.breezeehr/hitch" "rigui" "com.niquola/riemann" "com.linkedin.databus/databus-bootstrap-utils-impl" "io.pulse/parquet-cascalog" "cerebro" "net.project-fifo/libsnarl" "org.clojars.pjstadig/chinese-democracy" "com.enterpriseweb/open-stack-wrapper" "datomic-helpers" "com.clojurewerkz/cascading-monodb" "threegpp.milenage-clj" "org.commos/delta.cache" "migae/lein-template" "clj-tuio" "optimus-sass" "little-couch" "org.clojars.agofilo.cljsproj/lein-template" "com.lemondronor.leaflet-gorilla" "megasite" "org.clojars.cjschroed/autodoc" "gaussian.elimination" "thinkdb" "chlorine" "dsabanin/cheshire" "org.clojars.joubert/clojure-http-client" "bootstrap" "lein-clobber" "map-lib" "im.chit/hara.class" "csvlib" "com.davidykay/appengine-magic" "clj-amqp-dsl" "cantata" "overtone/scsynth-interop-linux-x86_64-common" "ritz/ritz-nrepl-project" "net.littleredcomputer/math" "org.clojars.cbp/rethinkdb-1.0.0" "org.clojars.jvesala/clojure-couchdb" "truckerpath/clj-config" "test-clj-clr" "bartok-x" "phoenix-webapp/lein-template" "foxy/lein-template" "slip.math" "cljs-screeps" "sudharsh/clj-oauth2" "taffowl/joplin.hive" "progressbar" "com.wikia.commons/logger-config" "org.clojars.earthlingzephyr/waypoints" "midi-mono-player" "flare/flare-midje" "org.clojars.joseferminj/osxkeychain" "org.clojars.mhuebert/re-db" "org.trpr/trooper" "sgr/sgr-utils" "org.clojars.brenden/trident-memcached" "yurt" "precursorapp/cljsjs" "solita/opetushallitus-aitu-e2e" "org.txominpelu.clojars/lein-dpkg-ring" "overtone/clj-event" "com.report.engine/core-scheduler" "tailrecursion/cljs-priority-map" "org.clojure/core.async" "org.clojars.cheezey/jcurses" "metis" "org.clojars.allumbra/conf-er" "org.clojars.jds02006/resources" "quantum-ext/lein-cljsbuild" "clj-linkedin" "lein-launch4j" "clj-wamp" "org.clojars.aircart/http-kit" "polymer/iron" "try-overt" "de.undeadco/marmoset" "topping" "com.report.engine/report-engine-client" "flyingmachine/cartographer" "joplin.cassandra" "malen" "clj-gcode" "ord.clojars.echo/data.json" "rodnaph/lowline" "duct/figwheel-component" "org.clojars.squest/questdb" "sicp-generators" "antler/stencil" "polymer/support" "cake-pallet" "org.clojure/core.incubator" "aaronbabcock/appengine-local-runtime" "de.kotka/lazymap" "khroma" "org.clojars.choas/clj-gae-datastore" "com.rabbitmq/amqp-client" "org.clojars.tnoda/incanter.read-xlsx" "dgellow/systemd" "bensu/om" "polymer/paper.input" "schema-contrib" "misaki" "org.clojars.ray1729/deploy-tools" "gaeshi/kuzushi" "lein-catnip" "org.clojars.mschristiansen/lein-beanstalk" "cljsjs/react-burger-menu" "episodic-log" "org.clojars.akiel/ring-hap" "org.clojars.viacoban/clojuresque" "y42/clj-druid" "clojurewerkz/ragtime.core" "org.clojars.sunng/beanstalk" "every" "org.clojars.dandorman/shoreleave-remote-ring" "com.dzer6/box-com-generators" "org.clojars.runa/clj-schema" "ccfontes/hiccup-bootstrap" "clj-genetic" "zeekat-utils" "tiensonqin/scribe" "clj-tiny-astar" "org.clojars.smallrivers/aleph" "org.clojars.myfreeweb.swaggerator/swaggerator" "clj-lolapi" "bing-search" "org.clojars.frozenlock/force-serialize" "pail-thrift" "com.yetanalytics/json-html" "org.clojars.tuomask/clojure-couchdb" "spaced-repetition" "cjd" "im.chit/hara.protocol.string" "com.flipkart.foxtrot/foxtrot-client" "com.ib/jtsclient" "org.clojars.clizzin/webmine" "gdx-loopy" "hlisp-jquery" "com.yellerapp/test.check" "cljsjs/ical" "cache-registry" "com.yellerapp/high-scale-lib" "org.clojars.leanpixel/om-fields" "org.buntin/compojure" "org.clojars.kjw/snakeyaml" "joplin.core" "thunknyc/clj-nats" "org.clojars.aberkley/utilities" "validata" "unbean" "acyclic/squiggly-clojure" "celeriac" "clj-groupon" "im.chit/vinyasa.reflection" "boot" "cloc/indexer" "kirasystems/views-honeysql" "com.chartbeat.cljbeat/options" "org.timmc/feedback" "joplin.elasticsearch" "rp-transducers" "lein-eclipse" "org.clojars.adityo/clj-tagsoup" "io.replikativ/flechtwerk" "jdbc-pg-json" "de.doctronic/lein-deploy-war" "cloudmill" "msg/salesforce" "longstorm/org-backend" "org.spootnik/riemann-kafka" "cljsjs/spin" "pallix/swank-clojure" "yalh/boot-cljs-test" "xilize/xilize-engine" "org.clojars.toxi/jogl" "razorblade" "com.quantisan/ring-cors" "infoml-classes" "net.solicode/middlebrow-swt.cocoa.macosx" "clip-test" "umgebung" "org.flatland/resting-js" "marctrem/altostratus" "adzerk/boot-cljs-repl" "shake" "me.raynes/least" "org.van-clj/zetta-parser" "cc.qbits/grease" "webdb2/lein-template" "sebastiansen/korma" "cprop" "org.clojars.mkhoeini/chaiify" "cljsjs/snapsvg" "datac" "org.clojars.originalsurfmex.processing/gluegen-rt" "org.clojars.nberger.cljsjs/raven" "gmail-clj" "om-websocket" "kindlychung/incanter-mongodb" "com.redhat.qe/logging-testscript" "easy-bake-service" "org.lpetit/net.cgrand.parsley" "org.clojars.jberg.se.sics/tasim" "pro.juxt/dirwatch" "appfgo/lein-template" "cl-cronlike" "org.clojars.michaelr524/ua-parser" "org.clojars.lancepantz/clj-json" "org.taoclj/time" "test-with-files" "org.clojars.ptaoussanis/deep-freeze" "crajure" "auto-reload" "cljts" "org.tobereplaced/mapply" "clj-http-hystrix" "lein-deploy-artifacts" "werg/logic-extensions" "com.ninjudd/sqlingvo" "jarohen/xmlt" "me.arnaudsj/language-detection" "ttt-clj-java-server" "rstoker" "exicon/semantic-ui" "jarohen/bounce.http-kit" "lein-riot" "judgr/redis" "com.hmsonline.storm/storm-blueprint" "mixradio/mr-edda" "frontend-happiness/lein-template" "com._0xab/gluegen-rt" "org.timmc/nephila" "littlebird/cicinnurus" "org.immutant/leiningen-core" "org.clojars.brenden/metrics-cassandra" "org.van-clj/river" "io.matcher/matcher-client" "org.clojars.tnoda/rashinban" "lein-whimrepl" "servicehub" "lein-create-template" "com.malloc47/honeysql" "hyjinks" "org.clojars.brenden/storm-kafka-0.8-plus" "kafka-events-disk" "net.ozias/swarmhandler" "tangrammer/yesql" "zh217/zmq-async" "file-utils" "io.clojure/liberator-transit" "google-appengine" "clj-elasticsearch" "image" "com.flipkart.aesop/data-layer-elastic-search" "env/supermodel" "org.clojars.zaxtax/maxent" "consul-clojure" "tangrammer/rhizo" "ifesdjeen/blomstre" "reverie-blockade" "xpe/dijkstra" "io.mandoline/mandoline-dynamodb" "kovasb/fipp" "nginx-clojure/nginx-tomcat8" "org.clojars.flosell/lambdacd" "org.clojars.chapmanb/hadoop-bam" "org.clojars.mikeitz/jogl-all-natives-windows-x86" "live-action" "com.gfredericks/z" "pinyin4clj" "org.clojure/tools.macro" "clj-ssh" "context-io" "clojurewerkz/stream-punk" "org.clojars.nathell/clojure-contrib" "org.clojars.coledubs/int-2-freq" "net.dossot/clj-raml-tester" "org.clojars.dsabanin/webbit" "cynomys" "inky" "net.nanonation/clojurescript" "org.clojars.damoe/code39" "gaeshi/lein-gaeshi" "noir-servlet" "lein-jelastic" "org.clojars.remleduff/snowball" "atw-api/lein-template" "adzerk/clj-kinesis-producer" "info.sunng/lein-bootclasspath-deps" "org.immutant/transactions" "racehub/clojurescript" "cljsjs/babylon" "com.palletops/pallet-vmfest" "org.clojars.tgg/cloture" "org.clojars.s450r1/dcm4che-tool-dcmwado" "uvarse" "org.clojars.gzeureka/nexmo-sdk" "org.signaut/ring.middleware.servlet-ext" "com.yetanalytics/re-mdl" "keybind" "cljsjs/material-ui" "coderwall-clj" "dato/gumshoe" "org.clojars.pjlegato/korma" "enclog" "clj-tableau" "net.boostrot/clj-aws-s3" "org.dthume/goad" "com.curiosity/ua-parser" "org.clojars.icylisper/j2ssh-core" "org.flatland/turntable-ui" "nbt-clj" "clj-excel" "guit/guit-gen" "org.bodil.openjdk/nashorn" "clj.debug" "com.yellerapp/clojure-unrolled-assoc" "org.bodil/pylon" "conman" "clj-disruptor" "org.clojars.gukjoon/clojure-hadoop" "mixradio/radix" "org.clojars.snakevash/basket" "mvxcvi/puget" "cawala/i2p" "org.clojars.strongh/compojure" "polymer/platinum" "org.clojars.bartonj/clojurescript" "org.vlacs/timber" "edw/sharp" "name.stadig/lein-clojure-test" "mpare-net/clj-hellodata-api" "org.clojars.weavejester/dep-c" "kubernetes-api" "org.clojars.gfodor/commons-codec" "org.satta/loom" "compojure-rest-base/lein-template" "net.kronkltd/ciste" "deoptim" "io.hoplon.vendor/jquery.daterangepicker" "quantum/datomic-pro" "maven-clojure/maven-plugin-tools-clojure" "http-kit" "akjetma/dmp-clj" "cirru/lein-sepal-repl" "metosin/schema-viz" "cljs-react-test" "pjstadig/assertions" "nio2.file" "fi.foyt/foursquare-api" "org.clojars.cryptic_star/incanter" "khazad-dum" "cljsjs/tween" "circleci/rollcage" "org.clojars.mmcgrana/java-beanstalk-client" "io.muoncore/muon-clojure" "virgil" "lein-asset-minifier" "kovacnica/hickory" "org.clojars.nakkaya/team-bots" "android/tools.nrepl" "kekkonen/lein-template" "thunknyc/dump" "com.kurogitsune/logica" "com.flipkart.fdp/fdp-irm-hadoop" "org.clojars.automata/rosado.processing" "com.linkedin.databus/databus2-example-relay" "org.clojars.sirzach/hello-clojars" "dispatch-map" "lein-bubble" "thi.ng/geom-types" "org.clojars.intception/om-dropzone" "jogl2" "pasha" "node-cljs/lein-template" "org.clojars.nathell/morfologik-stemming" "com.intelie/closchema" "org.hellonico/mcmc" "thunknyc/gcloud" "jormungandr" "redlobster" "org.clojars.dmiller2718/cljclr.tools.namespace" "lein-jdeb" "com.flipkart.lego/lois" "im.chit/purnam.core" "tailrecursion/hlisp-util" "org.clojars.zcaudate/lobos" "org.clojars.strongh/rserveengine" "org.clojars.zenbox/too-hot" "clj-fix" "com.greenyouse/chenex" "com.codesignals/lein-ring" "me.ericb/maximator" "blazar" "cljsjs/plottable" "lambdacd-testng" "org.clojars.nberger/time-series-storage" "funnyqt" "bensu/om-widgets" "org.clojars.smartmetersolutions/om" "fn.trace" "com.manigfeald/git" "org.danlarkin/clojure-json" "net.java.dev.jogl/jogl-solaris-sparc" "tailrecursion/hlisp-reactive" "jogl/jogl-gl2es12-x11" "rubydoc" "msg/cylon" "im.chit/jai" "maker" "carbon" "cloxp-4clojure" "farbetter/mu" "org.clojars.aaroniba/dommy" "prismofeverything/penumbra" "hellonico/clj-excel" "metajack/fleet" "lein-expectations" "org.clojars.hcarvalhoalves/raven-clj" "polymer/elements.iron" "hive/hive-shims" "net.thegeez/w3a" "com.miguno/kafka-spout" "participation" "clanhr/postgres-gateway" "rn-hdfs" "chessground" "fullcontact/full.core" "org.clojars.grin/buddy-auth" "com.palletops/haproxy-crate" "org.clojars.pdelong/unfix" "kibu/react-input-autosize" "com.andrewmcveigh/plugin-bootstrap-datepicker" "jarohen/yoyo.component" "cljs-hash" "latch" "com.lemonodor.lein-kribitz" "foundation/core.async" "com.borkdal/clojure.utils" "org.clojars.ghoseb/cron4j" "com.taoensso.forks/ns-tracker" "tonsky/figwheel-sidecar" "zenclient" "degree9/lounge.workflow" "cljsjs/skel" "org.clojars.chapmanb/picard" "com.palletops/bakery-om-root" "rmarianski/servlet-session-store" "org.clojars.trptcolin/blackwater" "clj-jtwig-java6" "org.rksm/test-helpers" "kaleidocs/meld" "im.chit/wu.kong" "jarohen/phoenix.modules.aleph" "im.chit/hara.function.args" "org.codehaus.mojo/adtech-xerces-impl" "timewarrior/apns" "kryonet/kryonet-all" "clojure-sql" "yandex-translate" "org.clojars.guv/rincanter" "clojure-guava" "clj-flowdock" "org.clojars.thnetos/clj-json" "cljsjs/dragula" "pleasetrythisathome/email" "com.middlesphere/pwdprotect" "org.clojars.cemerick/core.match" "jersey-admin-service" "ib5k/boot-component" "zolo-utils" "kerodon" "org.clojars.jfaucett/bigrams" "com.ardoq/ardoq-client" "org.clojars.ctdean/apache-cassandra" "org.clojars.making/cloudure" "rxjava-http-tail" "devth/timbre" "arohner/lein-bower" "com.tvachon/core.async" "listora/uuid" "com.yellerapp.gfredericks/test.check" "org.clojars.mysterysal.jobim/lein-template" "com.yetanalytics/tentacles" "org.clojars.ithayer/thrift" "appcanary/datomic-statsd-reporter" "helpshift/hydrox" "rill-event-sourcing/rill.web" "midi-clj" "ring-gae" "lupapiste/scss-compiler" "clj-amp" "water" "redd/thrift" "clojuresque/runtime" "com.hmsonline.xbean/xbean-blueprint" "thi.ng/shaderlib" "util" "org.clojars.jaen/system" "mrmcc3/boot-slack" "hermit" "org.clojars.aaronc/jfreechart" "joodie/clojure-refactoring" "cljs-template/lein-template" "org.flatland/useful" "forms-bootstrap" "zmaril/archimedes" "com.nyeggen/soac" "fresnel" "juxt/iota" "oversampler" "malcolmsparks/timbre" "launchpad" "compojure-webapi-template" "org.clojars.campeterson/dstk-clj" "hiccup-pipeline" "org.clojars.crimeminister/redis-clojure" "sparquet" "lein2-eclipse" "clj-plaza-rabbit" "puppetlabs/plumbing" "storm-cuckoo" "org.clojars.mysterysal/jobim-figwheel" "com.redhat.qe/log-checker" "edu.ucdenver.ccp/kr-core" "clj-quandl-api" "com.ginger/cloujsearch" "org.clojars.mediocregopher/clj-mtgox" "org.clojars.oliverm/nerves" "visi/core" "org.clojars.paraseba/clout" "lein-gorilla" "nt/riemann-clojure-client-proto2.4.1" "clj-blend" "test-deploy" "gnuplot" "org.clojars.uhef/google-api" "fastbeans" "org.clojars.jackmorrill/dotenv" "readyforzero/buckshot" "org.clojars.ylgrgyq/carmine-mock-tool" "om-syncing" "clj-turtle" "tcsavage/data.adts" "prabhasp/hatti" "clj-irc" "org.clojars.zeeshanlakhani/schema-gen" "org.clojars.jaceklach/midje-junit-formatter" "timothypratley/reanimated" "qbits/lein-template" "rodnaph/decker" "mvxcvi/whidbey" "tranchis/cassaforte" "org.clojars.runa/testselector" "me.rossputin/diskops" "de.undeadco/sock" "coconut" "reactjs" "browser_tic_tac_toe" "com.howardlewisship.patched/runtime" "lein-doc-pdf" "org.clojars.aseipp/jogg" "am.ik/clj-gae-users" "o2w" "arohner/foam" "ring.middleware.clojurescript" "se.haleby/fake-http" "org.clojars.pjt/jwnl" "overcode/introvert" "org.clojars.qubbyhole/lzo-java" "daydream/appengine-magic" "com.miguno/storm-kafka-0.8-plus" "danielsz/boot-runit" "laczoka/clj.qrgen" "rplevy-draker/wabbitmq" "com.ieknir/dirwatch" "com.keminglabs/c2" "com.exaptic/watership" "antistock/core" "clj.qiniu" "htmhell" "uk.org.alienscience/ehcache-dot-clj" "cljs-wsock" "nrepl-inspect" "weasel" "emezeske/lein-cljsbuild" "com.google.appengine/appengine-tools-api" "lein-ragtime-gen" "jarohen/phoenix.modules.http-kit" "cooljure" "com.flipkart.poseidon/http-handler" "identifiers" "davidjagoe/incanter-charts" "clarango" "kaleidocs/convert" "org.clojars.jcrossley3/lobos" "rogerallen/leaplib" "org.clojars.tbatchelli/vboxjws" "jeffkayser/bodykit-clj" "shellac" "lein-api-doc" "org.hbase/asynchbase" "pldb" "com.leonardoborges/faraday" "piplin" "com.edbond/postal" "org.clojars.astashov/quiescent" "tie/tie-client-cljs" "tiensonqin/material-ui" "com.taoensso/nippy" "langlab" "cornet" "rkneufeld/google-docs-spreadsheets" "wrap-verbs" "ptaoussanis/clout" "org.clojure/tools.logging" "sosueme" "cloj_ttt_2" "purty" "org.clojars.luminousmonkey/rxtx-native-deps" "juxt.modular/async" "incanter/jplasma" "net.littleredcomputer/sicmutils" "zesql" "com.gfredericks/tools.trace" "jig/ring" "uk.org.alienscience/leiningen-war" "org.clojars.orphid/buddy-auth" "tailrecursion/boot-datomic" "org.clojure/data.int-map" "kastermastandard/lein-template" "tocsin" "org.mariadb.jdbc/mariadb-java-client" "org.clojars.jws/ring-etag-middleware" "env/toolbox" "kixi/incanter-zoo" "org.clojars.oakes/clojail" "im.chit/purnam" "org.clojars.hozumi/twitter-api" "tranchis/photon-riak" "terrastore-cloj" "com.github.tranchis/lein-margauto" "introspect" "org.clojars.sjl.jesus.christ.please.work.already/redis-clojure" "org.clojars.kasyaar.http-kit/lein-template" "org.clojars.cmdrdats/clj-plaza-rabbit" "org.signaut/ring-jetty8-adapter" "raven-clj" "mathmadness" "nevermore" "net.mikera/image-matrix" "language-builder" "qlib/lein-template" "astar" "de.blubberquark/microdata" "clj-scrapers" "me.jakenations/http-server" "org.clojars.chouser/lein-swank" "com.secondchance/scrappy" "org.taoclj/tao" "totalperspective/lob-async" "nmurray/jzmq" "rwilson/clj-lib" "hoopes/pinterest-sdk-cljs" "trevorbernard/jzmq" "com.ydn/db" "simplycredit/slf4timbre" "cascalog-contrib-template" "clj-fst" "gov.nist/closmop" "slmq" "org.clojars.frozenlock/doevery" "com.linkedin.databus/databus-group-leader-api" "lein-kotlinc" "com.stuartsierra/dependency" "thi.ng/geom" "clj-lastfm" "dssga" "org.clojars.nakkaya.jmonkeyengine/jme-gamestates" "cf" "plasma/tokyocabinet-java" "touchme" "org.clojurs.schmidh.fu-template/lein-template" "lein-thriftc" "uncomplicate/neanderthal-native" "hildreth" "cljsjs/vega-lite" "backtype/leiningen" "org.clojars.doo/swank-clojure" "clj-cjdns" "w01fe/clojure-hadoop" "onyx-viz" "throttler" "brainfuck" "com.viasat/arrows" "base64-clj" "treq" "clj-ipfs-api" "cljs-init/lein-template" "crane/lein-crane" "org.clojars.naydenov/assorted-algorithms" "random-seed" "io.hoplon.vendor/jquery-ui-redmond" "uk-gridref" "org.clojars.thobbs/clj-hector" "unicron" "org.cjd-doc/cjd" "org.clojars.nakkaya/team-bots-teams" "clj-base64" "listora/component-utils" "antistock/rabbitmq" "com.stuartsierra/log.dev" "narrator" "vita-io/spark-component" "manners" "org.clojars.fterrier/om-autocomplete" "hipo" "clj-sparql" "org.clojars.mikeq/carmine" "hexdump" "com.linkedin.databus/databus-bootstrap-common-api" "org.clojars.adeel/clj-airbrake" "cljsjs/chance" "standardtreasury/demo" "org.danielsz/lein-runit" "io.replikativ/konserve-couch" "com.bioniccletus/metamorph" "clj-configurator" "clj-emr" "org.clojars.chimpymike/fs" "org.clojars.danielcompton/rethinkdb" "com.flipkart.aesop/sample-snapshot-serializer" "sprsquish/ring-ostrich" "fleetdb-client" "invoke-clojure" "gigaword" "ruiyun/monger" "ru.prepor.utils" "junit" "borneo" "steelval/clj-oauth2" "ring-validateur" "fhofherr/clj-db-util" "starter/lein-template" "conduit-threadpool" "org.clojars.indabamusic/monger" "droid/lein-template" "neo4j-batch-inserter" "io.github.emidln/storm-kafka" "lein-docbkx" "clj-musixmatch" "lein-cljfmt-ona" "com.bwhmather/ring-anti-forgery" "swan" "bf-clj" "lein-project" "org.bituf/clj-stringtemplate" "jarohen.forks/dependency" "org.clojars.snakevash/too-hot" "arre.jclouds/jclouds-core" "clj-rad" "overtone/scsynth-jna" "cljsjs/sinon" "org.clojars.nbsantos/javaquery" "ulisse" "jeffdik/enduro" "altostratus" "chic-text.core.clj/chic-text..core.clj" "de.otto/tesla-jetty" "ash-mcc/friend-jaas" "yap" "trapperkeeper/lein-template" "org.clojars.cemerick/lein-cljsbuild" "com.gfredericks/misquote" "oauth-clj" "minnow" "pa-1-clj" "cljsjs/cropper" "org.clojars.strad/datomic-crate" "sweety" "org.bitbucket.qanderson/rf-topology" "clj-thetvdb" "org.sparx/nano" "ceterumnet-korma" "net.solicode/middlebrow-thrust" "gws/clj-yelp" "org.clojars.s450r1/dcm4che-tool-dcmdir" "org.clojars.dwwoelfel/clj-v8-native" "hub.service/photo" "org.cloudhoist/codeq" "appengine-api-1.0-sdk" "resource-url" "org.clojars.dottedmag/buddy-core" "workshoplib" "skyscraper-cache-mapdb" "com.8thlight/hiccup" "pro.juxt/accounting" "org.clojars.deadghost/ssh-crate" "sablono" "appengy-simple" "org.flatland/phonograph" "lein-nix" "malcontent" "thi.ng/geom-core" "tsmarsh/packager" "tree-config" "com.madriska/excel-templates" "maye" "clout" "keypin" "com.yolodata.riemann.blypr" "joelash/twilio-api" "org.hugoduncan/clutch" "bestcase" "seqcess" "google-civic" "thinktopic/greenhouse" "galdolber/trulia-java-rets-client" "com.manigfeald/vbuffer" "emlyn/timbre" "misc" "ib5k.holon/datomic" "org.clojars.jaen/clojurescript" "org.clojars.compasslabs/congomongo" "ryfow/humane-test-output" "spootnik/kinsky" "clj-ravendb" "uncomplicate/neanderthal-atlas-dumb" "t6/snippets-corenlp" "kinematic-app/lein-template" "com.palletops/mongodb-crate" "clj-rome-fetching" "org.buntin/sfteepee" "thneed" "org.clojars.wjlroe/clj-dropbox" "clj-datadog" "lein-less-npm" "org.clojars.rm-hull/monet" "witan.schema" "whodidthis/infer" "arrdem/ring-proxy" "shire-digest.producer" "org.clojars.bcart3r/lein-compapi" "rsta-auto-completion" "it.uniroma2.art/dtk" "com.aphyr/riemann-java-client" "org.clojars.si14/fnhouse-swagger" "clj-uart" "seancorfield/lein-daemon" "org.clojars.alexguev.ragtime/ragtime.sql" "clj-webapp/lein-template" "org.codehaus.mojo/adtech-wsdl_api" "clj-weather" "die-geister" "com.palletops/ns-reload" "kublai" "org.clojars.orphid/sqlingvo" "com.googlecode.jsendnsca/jsendnsca" "clojuregl" "strokes" "rql" "ciste/ciste-service-tigase" "watt" "uk.me.rkd.xml-validation" "com.reiddraper/clj-aws-s3" "cljsjs/bignumber" "org.flatland/retro" "org.spootnik/http-kit" "arlib" "tomimas/jhs-106" "frankiesardo/pedestal-swagger" "cljsjs/fabric" "ces" "org.clojars.osbert/clj-oauth2" "user-input" "ike/ike.cljj" "org.clojars.keppy/paxdb" "optimus-test-jar" "crafty" "contentjon/kit.cljs" "clj-zookeeper" "cljzjz/gl-matrix" "brightnorth/examinant" "mamun/cljs-net" "org.luminousmonkey/clojure-lanterna" "org.clojars.chapmanb/gatk-tools-public" "ibdknox/clojail" "witan.workspace-executor" "spootnik/watchman" "fullcontact/full.liquibase" "dacamo76/throng" "org.clojars.kovasb/clj-time" "org.clojars.pjb3/clj-redis" "scsynth" "material-design-icons" "cljsjs/pako" "org.clojars.fasterthanlime/dieter-sass" "org.clojars.mcav/lein-javac" "com.spoon16/clj-gson" "meridian/clj-jts" "org.clojars.kjw/lucene-core" "lein-extend-cp" "mavericklou/oauth-clj" "org.clojars.runa/swarmiji" "org.hypercrud/hypercrud-service" "dirtyvagabond/drake-honeyql" "clj-pit" "org.beatlevic/protobuf" "onycloud-middleware" "enlive-helper" "thinktopic/raven" "com.8thlight/filament" "net.nanonation/pedestal.service-tools" "org.clojars.farbetterchad/testjar" "clj-oauth2" "sigar/sigar-native-deps" "om-bootstrap" "org.clojars.rubicks/zip-visit" "back-end-template/lein-template" "com.flipkart.hydra/hydra-examples" "kixi/witan.schema" "redux" "com.flipkart.aesop/runtime-relay" "org.clojars.ato/clojureql" "org.clojars.oskarkv/kryonet" "com.linkedin.databus/databus-core-schemas-test" "deusdatsolutions/travesedo" "tessen" "ryo/clj-ftp-client" "hairball" "resrc" "org.hypercrud/hypercrud.client" "cljsjs/scrollify" "jeremys/converso" "confijulate" "yetibot.core" "outfit/lein-template" "org.williamyaoh/fibbin" "jobim-rabbitmq" "pjstadig/maven-s3-wagon" "org.clojars.tobynance/cards" "org.clojars.perov/anglican-with-incorporate" "mary-tts" "deppy" "rm-hull/ring-gzip-middleware" "language-extensions" "fmn/lein-template" "org.clojars.binaryalchemist/clj-daemon" "cljsjs/ansiparse" "codeexpress" "org.clojars.nuggad/clj-http" "swiss-knife" "cljs-yandex-asr" "net.nanonation/pedestal.app" "goodwin" "arre/cassaforte" "org.clojars.smx/clj-v8" "reagent-bootstrap" "org.tiago/dlink-camera-api" "corroborate" "cljs-tvos" "pandeiro/clj-webjars" "clojure-station" "clache" "cljsjs/chroma" "com.andrewmcveigh/plugin-select2" "clj-mandrill" "medularis-clojure-utils" "org.clojars.jasonjckn/zkclient" "rodnaph/attromic" "simplycredit/ring-proxy" "elephantdb/elephantdb-server" "lein-clean-m2" "daniel42/clj-oauth-daniel42" "cljsjs/react-dom" "samsara/samsara-logger" "com.avos/clj-oauth2" "vision" "tokenshift/short" "kushalp/woven" "org.clojars.therandom9/tmp" "com.zentrope/match-expr" "org.clojars.raek/utf8-with-fallback" "com.twinql.clojure/clj-conneg" "org.clojars.trptcolin/cumin" "my-lambda-project" "gjcourt/clj-titan" "gexf" "tubes" "com.benmabey/test-project" "re-rand" "me.rossputin/pew" "jsc" "degel/degel-clojure-utils" "pacl" "aysylu/titanium-loom" "im.chit/vinyasa.pull" "ring/ring-defaults" "io.curtis/boilerpipe-clj" "cljsjs/react-reorderable" "cascalog/cascalog-elephantdb" "jafingerhut/dolly" "com.avos/quartz-mongodb" "str-helpers" "campanja_tau/lein-cloverage" "glittering" "org.clojars.gberenfield/stockings" "com.jkkramer/clj-redis" "hawk" "sqlingvo.node" "ororo.async" "bensu/s3-beam" "felix" "jarohen/bounce.jdbc-pool" "org.clojars.guv/jppf-server" "cavy" "org.clojars.clizzin/jsoup" "clj-md" "org.clojars.trptcolin/lein-cljsbuild" "milesian/id-component" "bake" "clojush/zip" "yason" "excimer" "re-complete" "org.clojars.folcon/clj-facebook-graph" "cljsjs/localforage" "fobos_clj" "com.github.kyleburton/clj-lfsr" "com.gearswithingears/async-sockets" "org.clojars.adrianr/eqvkey" "clj-jenkins" "mrmcc3/firebase-cljs" "org.projectodd.shimdandy/shimdandy-api" "monads" "deraen/boot-sass" "http-kit-sockjs" "org.clojars.gnarmis/sentimental" "org.cloudhoist/lein-palletbox" "luminus-nrepl" "fuziontech/ring-json-params" "nl.balconystudio/eat-static" "lein-aws-maven" "jsgen" "de.otto/tesla-zookeeper-observer" "me.hspy/defrecord2" "org.clojars.day8/raygun4cljs" "ez-form" "nberger/boot-test" "org.clojars.kjw/geronimo-stax" "kasyaar-test1/lein-template" "con-hash" "org.domaindrivenarchitecture/dda-config-crate" "taffowl/joplin.datomic" "dogfort/lein-template" "com.gfredericks/corncob-cigar" "org.clojars.pjlegato/clj-utils" "emoji" "bwrap" "de.uni-koblenz.ist/jgralab" "simple-test" "org.clojars.amcclosky/smack" "craygo/clj-oauth2" "org.clojure/core.contracts" "cljs-websocket" "org.clojars.ndepalma/jme-game-engine" "devn/clparsec" "com.hoofdust/xml-skim" "clinch" "org.clojars.briprowe/lein-s3-repo" "net.sf.jung/jung-hypergraph-visualization" "schema.contrib" "org.clojars.adhertz/lein-deploy-app" "chloric" "tranchis/clojure-snippets" "cljsjs/hammer" "org.joegallo.robocode/picocontainer" "org.neo4j/neo4j-jdbc" "cljsjs/auth0-lock" "postgresql" "cascading.kryo" "io.nervous/cljs-lambda-example" "lein-servlet/adapter-tomcat8" "com.kurogitsune/wavy" "cljsjs/victory" "qbits/knit" "elephantdb/elephantdb-core" "bocko-fun" "jboss-as-management" "dsbdp" "sass4clj-component" "phronmophobic/ring-http-basic-auth" "metrics-statsd" "com.m6d/filecrush" "org.clojars.rmoehn/clojure" "luminus-immutant" "awtbot" "org.clojars.nakkaya.jmonkeyengine/jme-editors" "manners/manners.victorian" "pg-types" "clj-uclassify" "im.chit/hara." "lein-cuke" "lein-doo" "joplin.jdbc" "ch.exoscale/pallet-exoscale" "pittlcache" "cljs-skeleton/lein-template" "file-wagon" "cats" "dvr4j" "com.gfredericks/lib-7607" "org.clojars.processing-core/org.processing.opengl" "org.clojars.ossareh/clj-riak" "dgraph" "freemarket" "cljsjs/clipboard" "org.clojars.magnusrw/dependensee" "org.clojars.hozumi/clj-http" "traduki" "org.clojars.aliceliang/clj-zipkin" "clj-todo" "clojars-web" "vagrant/lein-template" "org.clojars.hozumi/dommy" "scijors" "retrograde" "lein-ruin" "difference-engine" "gorillalabs/titanium" "cljsjs/photoswipe" "net.mikera/clj-spss" "macroz/archi" "ex-ray" "joplin.lein" "noisesmith/clj-rss" "matthiasn/systems-toolbox" "org.clojars.aberkley/db" "org.clojars.alexbaranosky/print-foo" "e-guzheng" "matrix" "org.trpr/dataaccess-orm" "processing-core/processing.core" "org.clojars.kotarak/clojuresque-clojars-deploy-testcase" "clawss" "cotton/dorothy" "gedcom" "com.fxtlabs/winst" "org.clojars.j1n3l0/jtr" "cljsjs/fastclick" "com.aclaimant/cljs-http" "org.clojars.deraen/jdbc-ring-session" "org.flatland/ego" "org.clojars.cemerick/simple-check" "saturn" "awizo" "monr" "jeroenvandijk-lein-cucumber" "pleasetrythisathome/boot-component" "intronic/bcbio.variation" "arango-cljs/forest" "org.clojars.maravillas/ring-jetty-adapter-gae" "net.boostrot/pso" "mailsling" "net.polyc0l0r/clj-hdf5" "conformity" "org.clojars.jgerman/korma" "michaelblume/lein-marginalia" "servlet" "circle/util" "com.semperos/log4clj" "com.ninjudd/compojure" "com._0xab/chesspresso" "ddellacosta/oauth2-client" "com.knrz/dotenv" "bundle_tracker" "pail-cascalog" "monger-connect" "org.clojars.edipofederle/postmark" "ultra-csv" "io.thdr/pipeline" "co.paralleluniverse/comsat-httpkit" "gen" "wholphin" "tayler" "net.java.dev/gluegen-java-parser" "kuroshio" "blimp" "logger4clj" "org.clojars.wmealing/clj-audio" "org.clojars.gilesc/clojure-neo4j" "cljsjs/ocean" "email-validator" "factual/jre2" "serial-port" "clj-http-mock" "asileon/wait-for" "json-schema" "org.hectorclient/hector-core" "cc.qbits/ash" "org.clojars.ray1729/liberator" "cljs" "com.velicso/re-rand" "halcyon" "cog" "cljdeferred" "org.clojars.raynes/masai" "googlecloud/bigquery" "file-based-buffer" "bactrian" "es.topiq/full.async" "jupiter" "com.report.engine/agent" "cljsjs/nodejs-externs" "org.clojars.phalphalak/jogl-native-deps" "giddyup" "clhue" "gift" "tranchis/incanter-charts" "vhura" "mrmcc3/boot-custom" "ds/dsann.cljs-utils" "clj-s4-core-deps" "lumberjack" "weareswat/request-utils" "spawning-grounds" "org.clojars.lelayf/lmax" "transactified" "me.mj-jadhav/faraday" "asm" "thrift" "antler/lein-autodoc" "text-tiling" "tuples" "org.clojars.pyr/vijava" "cljsjs/stripe" "thi.ng/crypto" "net.bendlas/lein-partest" "com.jkkramer/phpass" "clj-cas-client" "com.boundary/ordasity-scala_2.9.1" "clj-ex" "ccw/ccw.server" "rtircher.illusioniste" "im.chit/hara.concurrent.workflow" "project" "org.commos/delta" "dystopia" "com.slagyr/latlngtz" "reagent-npm-fighweel/lein-template" "nodisassemble" "cascading" "javaquery" "frankiesardo/auto-parcel" "dog-tags" "clabango" "org.clojars.sethtrain/karras" "cascalog-contrib" "valip" "cljcolour" "org.clojars.kubo/clj-foundation" "com.ninjudd/ring-jetty-adapter" "clj-async-test" "clj-spotify" "littlebird-aviary/clj-tagsoup" "lein-scripts" "skeleton" "org.clojars.biallym/jogl-nativeless" "clanhr/clj-librato" "evolution" "fakergb" "org.clojars.frozenlock/caribou-api" "om-kenburns" "org.clojars.dwwoelfel/stefon" "boxuk/finder" "muxx" "jobim-rabbitmq-deps" "com.mefesto/wabbitmq" "hemesh" "datasplash" "condense/ampere" "cfml-interop" "hiccup-bootstrap-elements" "iota" "cljsjs/auth0" "org.clojars.bothacker.jmonkeyengine3/vecmath" "qrcloj" "logos" "org.clojars.storkle/zmq-native" "clj-mook" "org.flatland/laminate" "thing1" "ttt-clojure" "damionjunk/common" "metabox" "clj-net-pcap" "clj-try" "ascent.khroma" "tiesql/client-java" "clj-yield" "uswitch-oauth" "org.clojars.clojure-first-class-objects/firstclassobjects" "uri" "org.eclipse/swt-cocoa-macosx" "cljsjs/rx" "overtone/scsynth-interop-linux-x86-common" "com.andrewberls/predis" "me.alxmnn/ac" "database-clj" "org.clojars.dsteurer/fonts" "com.banzai/quiescent" "ez-mixpanel" "timbre-logentries" "mongologic" "hashlab" "tiensonqin/bt-ui" "com._0xab/jogl" "overtone/clj-repl" "thruster/lein-template" "org.clojars.dina/tabular-functions" "measure" "org.clojars.utini/noir" "jiface" "com.narkisr/clojure-couchdb" "org.rksm/cloxp-repl" "parse-client" "org.clojars.originalsurfmex.processing/gluegen-rt-natives-windows-i586" "huh" "eyewrap" "cljsjs/echarts" "org.clojure.clr/test.generative" "ulfberht" "ragnard/kibit" "com.palletops/pallet-repl" "i18n" "clojurewerkz/ogre" "com.rmoquin.bundle/clojure" "kephale/jblas" "funcool/codeina" "lein-capsule" "org.clojars.nberger/boot-fingerprint" "org.clojars.springify/webdriver-clj" "cascalog-lzo" "spiral" "telehash-packet" "clojuresque/clojuresque-nrepl-runtime" "com.jeditoolkit/node" "org.clojars.ithayer/plaid-penguin" "org.codehaus.mojo/adtech-mgmt_services_client" "org.clojars.jiangh/lein-aggravate" "delaunay-triangulation" "ghostandthemachine-fetch" "org.clojars.jaimeagudo/clj-soap" "org.clojars.stephenarneil/is-hot" "seqspert" "clojurewerkz.cassaforte" "listora/datomic-crate" "degree9/lounge.boot" "re-select" "terminal-render" "org.ibdknox.clojars/ring-reload-modified" "org.clojars.amakurin/lobos" "org.clojars.ghoseb/twilio-java" "tranchis/photon-db" "com.palletops/local-transport" "suspendable" "org.clojars.mattrepl/lein-daemon" "miraj/markup" "url-normalizer" "fine.core" "org.scheibenkaes/toolbelt" "org.clojars.michaelblume/core-kafka_2.9.1" "pleasetrythisathome/bolt" "avout" "mangosteen" "com.zacharykim/clj-http" "onyx-null" "superstring" "com.hmsonline.bundle/jgrapht" "org.clojars.sirzach/hello-cljs" "cljnat" "onaio/vega-viewer" "nippy" "chisel" "org.clojars.earljwagner/sspace" "com.relaynetwork/ring-middleware-index-file" "squelch" "org.clojars.jkk/patricia-trie" "employeerepublic/re-frame" "org.clojars.oskarkv/jme3-all-deps" "overtone/scsynth-interop-windows-x86-common" "org.clojars.tramsey/clojure-hadoop" "hitting-set" "org.codehaus.mojo/adtech-local_policy" "lancet" "simple-om-draggable" "org.erlang.otp/jinterface" "ru.prepor.component" "delayed-map" "org.clojars._vk_/clj-soap" "codox" "clojchimp" "edu.stanford.nlp/stanford-pos-tagger" "netz" "raspberrypi" "lein-depgraph" "reverie-core" "lein-filegen" "yantra" "com.cpclermont/bestcase" "tailrecursion/warp" "lein-quantize" "capstan/lein-template" "lein-autodoc" "icarus" "org.clojars.jartur/kama.rpc" "clojure-unibox" "clj-mtgox" "com.madeye.clojure.ampache/ampache-top50" "cookbook" "pigpen-plugin" "hark" "org.jozias.clojars/codox.leiningen" "auth" "org.clojars.jarpiain/sero-utils" "regexpforobj" "org.clojars.the-kenny/nom" "clj-nativedep" "org.clojars.michaelblume/honeysql" "finagle-clojure/mysql" "coldplate" "datadog-clj" "org.clojars.onaio/hatti" "org.clojars.liquidz/twitter" "laczoka/process" "org.tcrawley/autodoc" "lein-coverage" "quintype/story-elemental" "org.clojars.pjlegato/lock-key" "degree9/silicone" "org.clojars.originalsurfmex.processing/gluegen-rt-natives-macosx-universal" "functionalbytes/sibiro" "uk.org.russet/clojure-owl" "maze" "bag" "jasmine-cljs" "org.clojars.mopemope/kessel" "rm-hull/cljsbuild" "org.flatland/telegraph" "bukkure" "lein-license" "org.clojars.andrewmcveigh/postgresql" "siscia/lobos" "afrey/boot-asset-fingerprint" "mandrill" "form-zip" "clojurewerkz/gizmo" "caribou/lein-template" "midiutils-overtone" "org.martinklepsch/cc-set" "validation" "democracyworks/pedestal-toolbox" "org.fversnel/dnddice" "org.clojars.mlimotte/serializable-fn" "clojurewerkz/spyglass" "org.clojars.andrewzures/java-server" "mccraigmccraig/throttler" "org.clojars.pntblnk/cljs-devmode" "sjdbc" "opencpu-clj" "lein-ring-jetty" "convey" "hirop-redis-store" "testapp" "org.clojars.jcrossley3/korma" "org.clojars.olle/clooj" "messenger" "fdsa/lein-template" "mbuczko/moderator" "org.clojars.chapmanb/snpeff" "ru.cocainum/riemann-cocaine-plugin" "com.redbrainlabs/graph-fnk-viz" "lein-javac" "spootnik/mesomatic-async" "jnanomsg" "lein-jfx" "earthquick/ipplot" "appengine-api-labs" "org.clojars.hopp/lein-js" "org.clojars.ray1729/clj-ldap" "jchardet" "org.clojars.christianblunden/clojure-mail" "org.clojars.pallix/hermit" "funnel-mailer" "om" "org.wildfly.plugins/wildfly-extension-maven-plugin" "file-buffer" "org.clojars.vcharpenay/clj-owlapi" "lein-easyconf" "org.codehaus.mojo/adtech-transactions" "io.dropwizard.maxmind/dropwizard-maxmind-bundle" "org.clojars.slyphon/log4jdbc4" "puppetlabs/trapperkeeper" "my-stuff" "ring/ring-servlet" "occamin/strum" "org.clojars.cesarolea.clojail" "my-website-template-travis/lein-template" "yoyo.closeable" "clj" "hiccup-bridge" "ring-middleware-index-file" "navis/untangled-client" "org.clojars.nakkaya/miglayout" "org.clojars.bothacker.jmonkeyengine3/nifty-examples-1.2_small" "pinger" "littlebird-aviary/conduit" "io.floop/figgus" "keorn/stanfordnlp-clj" "davidwclin/persister" "com.lispcast/moustache" "org.clojars.akiel/lens-odm-parser" "org.clojars.hms/vishma-gwt" "co.uk.egao/lein-npm" "hive/hive-jdbc" "org.clojars.hozumi/clj-reduce-plus" "entrez-vous" "interval-trees" "xapivalidator" "org.clojars.aseipp/ibxm" "clj-grid-kernel" "com.danieldyba/fellowship-one" "monarch" "transdoge" "lock-key" "org.clojars.rhododendron/etcd-clojure" "org.clojars.martinklepsch/boot-runit" "org.clojars.pocket7878/file-tracker" "foursquare-clj" "juxt.modular/test" "goboard" "im.chit/cronj" "finagle-clojure/thrift" "viz" "lein-docker" "sql-finder" "titan-clj" "rm-hull/table" "org.clojars.alexbaranosky/slamhound" "trevorbernard/jzmq-api" "name.stadig.javamail/javax.mail" "card-shuffle" "xcljb" "flyer" "babbage" "org.clojars.shenfeng/ring-netty-adapter" "org.conjure/conjure-util" "org.clojars.nathell/clojuratica" "org.clojars.aperiodic/hbase" "org.clojars.hypirion/quux" "org.clojars.rmoehn/theatralia" "bubble-chart-demo" "purefrege/lein-template" "tupelo" "bdesham/clj-plist" "org.clojars.leadtune/apparatus" "clj-rome" "info.yasuhisay/clj-utils" "org.clojars.rayne/marginalia" "clj-coffee-script" "org.clojars.s450r1/dcm4che-tool-dcmof" "clj-chardet" "clojenium" "rbl/dieter" "irresponsible/utrecht" "org.clojars.technomancy/heroku-json-gson" "ccw/clojure-ccw" "candlepin-api" "almonds" "org.clojars.bothacker.jmonkeyengine3/gluegen-rt" "map-sql" "ca.grammati/daisy" "bilus/jdbc" "clj-camel" "org.clojars.stumitchell/re-frame" "pe-jdbc-utils" "lein-release-4digit-version" "colinkahn.flux.scroll-list" "armadillo" "edu.stanford.smi/protege-owl" "cljsjs/parinfer" "boot.task/boot-reload" "rplevy/clj-apache-https" "gws/yelp" "org.quilt/splice" "sandbar" "noisesmith/cryptlj" "bakery" "fletching-macros" "com.cognitect/transit-clj" "dag-unify" "bert-java-serialization" "org.cloudhoist/hadoop-crate" "thieman/marginalia" "paddleguru/clutch-clojurescript" "w01fe/fibonacci-heap" "juxt.modular/less" "im.chit/gyr" "expectations" "datomic-free" "org.clojars.choas/appengine" "com.keminglabs/singult" "bitcoin-trader" "org.clojars.charles-stain/htmlcleaner" "radicalzephyr/repl-utils" "org.kovas/paredit-widget" "org.clojars.thnetos/maxent" "clj-nntp" "org.clojars.kiril/async-redis" "org.clojars.rozifus.webtorrent-cljs/addr-to-ip-port-cljs" "factual/clj-leveldb" "lein-incise" "degree9/lounge.report" "org.clojars.wjlroe/clj-ldap" "io.hoplon.vendor/momentjs" "org.clojars.smallrivers/snacktory-prod" "org.clojars.hiredman/clojure" "org.clojars.meeh/mstreaming" "org.clojars.colorgmi/robot-kbhit" "com.vijaykiran/clj-configurator" "cooler" "pay/chinaums" "org.clojars.gilded_honour/frank-mandrill" "prob" "puny" "org.clojars.raek/tagsoup" "reify/bslite" "condense/select-om-all" "franz" "io.nervous/lein-cljs-lambda" "org.clojars.jfeng/random-aws-stuff" "net.nanonation/piggieback" "org.clojars.relaynetwork/clj-avro" "fernet" "strucjure" "yayitswei/clj-facebook-graph" "jreg" "clj-scripts-2" "lein-servlet/adapter-tomcat7" "elephantdb" "tangrammer/lein-zip" "org.clojars.sean_devlin/decorators" "cronj" "monet" "ec.datil/xml-validation" "enlive" "org.toomuchcode/clara-rules" "siren" "hashthread" "org.spootnik/uncaught" "com.sattvik/clj-http-lite" "futils" "gregor-stocks/cljs-http-node" "clj-rfid" "mccraigmccraig/cassandra-all" "matross/mapstache" "im.chit/hara.concurrent" "clj-website/lein-template" "yaml" "eightnotrump/lazytest" "hlisp-macros" "com.github.pmerienne/trident-cf" "tempfile" "org.hyperic/sigar" "puppetlabs/dujour-version-check" "cljsjs/highcharts" "raywillig/geo-cache" "org.clojars.thejohnnybrown/xercesimpl" "janino" "fitzoids/hoshi" "eu.us/settings" "polymer/elements.neon" "com.palletops/leinout" "biosequence" "com.andrewmcveigh/plugin-jcrop" "cubane/cublono-quiescent" "rill-event-sourcing/rill.handler" "edgewise" "org.clojars.smallrivers/netty" "clj-bcrypt-wrapper" "traversy" "ciste/ciste-service-aleph" "savagematt.toshtogo/server" "overtone/scsynth-interop-linux-x86_64-maverick_portaudio" "clj-fakes" "lein-maven-s3-wagon" "org.eclipse/swt-win32-win32-x86_64" "clj-sockets" "screeps/lein-template" "clj-ejson" "com.cemerick/url" "imagej/ij" "org.clojars.rmoehn/grenada-lib" "org.trpr/platform-integration" "im.chit/hara.io.classloader" "clojurefx" "clj-jdbc-namedparameters" "marginalia" "lein-ldapimem" "hackasm" "clj-dbcp" "frege/lein-template" "ring-logging" "common-clj" "packman" "cljsjs/react-input-mask" "org.clojars.siyu798/clj-http" "clojerks" "lein-ping" "org.clojars.arohner/opennlp" "org.clojars.starry/clj-forex-indicators" "cljsjs/autobahnjs" "lein-bnd" "carcajou" "com.manigfeald/raft" "korma-enhanced" "clj-leaflet" "rocky" "org.clojurecast/clojurecast" "manners/manners.really" "simlun/enduro-session" "kc/syncwhole" "cljfmt" "com.ozjongwon/pgxjdbc" "workflo/app-macros" "hyperion/hyperion-core" "cljsjs/mithril" "cmis-core" "co.zensight/natural-log" "org.clojars.frozenlock/noir" "bytebuffer" "mocha-latte" "org.clojars.paul.cdh/hadoop-core" "net.bzdyl/clj-http" "asphalt" "edw/pomjars" "quil/jogl-fat" "ithayer/clojure" "org.clojars.tcrawley/lazybot" "org.clojars.ctdean/hector" "gov.usgs.eros/lcmap-config" "clojang/agent" "farbetter/pete" "speccy" "org.clojars.metal-slime/javafx2.2.0" "org.clojars.btw0/enlive" "org.clojars.liquidz/compojure" "gaeshi/gaeshi-dev" "cljmb" "org.clojars.kosii/storm-kafka" "narkisr/misaki-clostache" "deraen/boot-ctn" "im.chit/repack.advance.resources" "longstorm/enlightened" "com.timezynk.domain" "org.clojars.mthomure/marginalia" "org.clojars.luzhuomi/storm-kafka" "org.clojars.robertpfeiffer/webshell-backend" "cristian/amazonica" "puppetlabs/clj-jwt" "org.clojars.charles-stain/jheora-jst-debug" "chic-text/chic-text.tools.cli" "tie/tie-client-clj" "org.clojars.timvisher/ring-json-params" "org.clojars.bothacker.jmonkeyengine3/j-ogg-oggd" "clj-stress-ng" "jungerer" "authy-clojure" "fg-netzwerksicherheit/clj-jms-activemq-toolkit" "clcl" "dsann/dsann-cljs-jquery" "com.jcraft/jsch" "osbert/pallet-docker-http" "clojars.org.hms/midje" "navis/untangled-server" "qarth" "org.clojars.tisnik/clj-fileutils" "openide-util-lookup" "org.clojars.tcrayford/clj-haml" "org.azjure/azjure" "json-to-pdf" "calabash-jvm" "me.arnaudsj/corenlp" "boot-absolute" "n2w-vi" "immutable-bitset" "org.clojars.sandropadin/ticlj" "mkremins/twitter-oauth" "clojure-twitter" "org.clojars.shawnspooner/bandalore" "org.clojars.mhuebert/re-view" "org.ozias.cljlibs/scm" "overtone/vimclojure" "weathergov-hourly-forecast" "juxt.modular/ring" "html-soup" "com.flipkart.phantom/task-http" "com.github.frankiesardo/icepick-processor" "org.clojars.bagucode/atlwjgl" "org.clojars.briprowe/clj-util" "hoplon/castra" "shoreleave" "org.clojars.pmbauer/clojurescript_svced" "org.clojars.rosejn/clansi" "quantum/java" "hoplon/lein-template" "anglican" "ring-okta" "org.clojars.slyphon/ring-core" "daydreamt/clatrix" "org.clojars.sickcuchulainn/enfocus" "mies-brepl/lein-template" "baseet-twdb" "schnipseljagd/prometheus-clj" "net.java.dev.scenegraph/decora-runtime" "org.clojars.lelayf/dfs-datastores" "cljs-log" "org.clojars.tbatchelli/vboxws_java16" "processing-video" "cljsjs/svgjs" "reimann" "org.van-clj/zetta-river" "org.clojars.smaant/elastisch" "fullcontact/full.metrics" "geni-gedcom" "gws/mandrill" "reptile" "com.ibdknox.socket_io-netty/socket.io-netty" "bsima/flickr-clj" "im.chit/repack.advance.util.data" "com.ozjongwon/dynohub" "sourcewerk/friend-jwt" "alandipert/jasmin" "lein-profiles" "boot/pod" "net.polyc0l0r/hasch" "duct/hikaricp-component" "campanja/ring-codec" "cc.qbits/casyn" "org.clojars.frozenlock/bacnet4j" "org.clojars.cldwalker/pedestal.service" "lein-cljsnoir" "org.clojars.andrewzures/ruby_ttt" "webnf/cljs" "mbuczko/cerber" "clj-fluiddb" "lein-aggravate" "org.clojars.jds02006/lein-dash" "com.keminglabs/sliced-bananas" "cc.artifice/geppetto" "com.manigfeald/selfsigned" "com.dsci/clj-exceptional" "org.clojars.jasonjckn/pallet" "die-roboter" "com.flipkart.aesop/runtime-snapshot-serializer" "com.bigml/clj-time" "com.palletops/locos" "org.clojars.samrat/oauth-clj" "muon-clojure/lein-template" "org.clojars.pallix/lobos" "clj-jb" "org.clojars.mchldvrk/too-hot" "iloveponies.tests/i-am-a-horse-in-the-land-of-booleans" "atollier.xlet" "cljs-repl-project/lein-template" "burningswell/http-pool" "org.clojars.mrwhelan/hue" "org.clojars.processing-core/org.processing.core" "vitalreactor.pedestal/pedestal.jetty" "figwheel-node/lein-template" "org.clojars.racoon/csv" "cljsjs/dexie" "org.clojars.dbasch/geohash" "clj-ini" "com.vgeshel/korma" "deploy-test" "com.gfredericks/nrepl-53-monkeypatch" "compojure.tools" "netcdf-clj" "im.chit/ova" "org.clojars.amit/postgresql" "org.clojars.dmiller2718/cljclr.data.generators" "com.github.serceman/asset-minifier" "net.colourcoding/validate" "crackle/crackle-core" "com.madeye/lein-wsimport" "org.clojars.jmreidy/schema-contrib" "clecs" "org.clojars.s450r1/dcm4che-net" "lein-protobuf" "org.clojars.freeagent/clj-facebook-graph" "rst-format-parser" "org.clojars.jcrossley3/http.async.client" "org.jmatt/strap" "rill-event-sourcing/rill.event_store.psql" "org.clj-grenada/lib-grenada" "org.danielsz/lang-utils" "org.clojars.guilespi/sqlingvo" "gnl/clairvoyant" "org.clojars.datasio/onyx" "clojurewerkz/lein-template" "lein-unpack-resources" "org.joegallo.robocode/robocode.battle" "imintel/ring-xml" "hiccup-find" "ragnard/ring-middleware-format" "effectivejava" "cascalog/midje-cascalog" "org.clojars.soundcloud/clj-exceptional" "org.clojars.petterik/clojure-mail" "regex" "org.clojure/tools.reader" "pircbot" "im.chit/hara.namespace" "imap" "org.clojars.jiangh/clojurejs" "functionalbytes/zookeeper-loop" "org.clojars.gorsuch/korma" "bigml/sampling" "cljs-rest" "nrt-sc" "org.clojars.amit/smackx" "com.sherbondy/singult" "tranchis/photon-redis" "bocko/lein-template" "org.clojars.oakes/rsyntaxtextarea" "org.clojars.ctdean/libthrift" "org.clojars.charles-stain/eventbus" "eighty-cascalog-more-taps" "com.dirtybrussels/clojure-plupload" "metosin/potpuri" "metrics-clojure-ganglia" "yarec/clj-t" "clojure-options" "shire-digest.generator" "com.michaelgaare/kr-jena-core" "cljsjs/pouchdb" "org.clojars.arohner/swank-clojure" "robust-txt" "org.clojars.xumh/db-meta" "spootnik/uncaught" "lein-wsimport" "ohpauleez/confil" "clj-jaxb/lein-xjc" "org.dashkb/boot-garden" "reddit.clj" "org.gostrategy/libs" "ringfinger/toolfinger" "org.clojars.noodle-incident/leap-linux-native-deps" "com.banzai/memcached-component" "mvc-works/respo" "evil-ant" "narkisr/cljs-d3" "org.clojure/tools.emitter.jvm" "org.taoclj/pure" "gogo" "multimedia.streaming/sdp" "org.clojars.technomancy/heroku-http-apache" "cljsjs/msgpack-lite" "com.taoensso.forks/hiccups" "org.flatland/sqleton" "jenko" "mpare-net/ring-xml" "clojurewerkz/route-one" "finder" "batcher" "yfinance" "org.clojars.arbscht/clout" "echonest-api" "com.fxtlabs/autodoc" "clevolution" "antistock/curator" "lein-grep" "onaio/milia" "ru.prepor.component/compojure" "silasdavis/mantle" "test.tree.runner" "quantstruct" "campanja/riemann-java-client" "com.palletops/bakery-secretary" "org.clojars.daaku/lein-swank" "migrate/migrate.lein" "org.clojars.smallrivers/lamina" "com.walmartlabs/smf-crate" "faraday" "com.solita/lein-test-refresh-gui" "net.unit8/gring" "ruiyun/clojureql" "honnect" "org.clojars.wjlroe/clj-campfire" "clj-ml" "org.clojars.nathell/clojure-jna" "turbovote.aws-toolbox" "swift" "actfp" "puppetlabs/structured-logging" "org.clojars.prasincs/metrics-clojure" "be.niwi/clj.jdbc-c3p0" "os_template" "betfair-lib" "puppetlabs/certificate-authority" "jasmin" "work-queue" "cristian/java.data" "rhizome" "chart" "com.flipkart.aesop/aesop" "bk/ring-gzip" "hb-scraper" "org.trpr/service-model" "clj-wordnet" "org.clojars.osbert/clj-slackbot" "com.zachallaun/bencode" "org.clojars.jcsims/codeq" "org.taoclj/tao-mustache" "net.lstoll/utils" "org.clojure-android/pumpet" "gbuisson/frontmatter" "stch-library/stateful" "lein-libdir" "org.nakkaya.robocode/robocode.repository" "paddleguru/util" "mecha1/boot-prerender" "clojure-msgpack" "lein-standalone-repl" "cascalog-checkpoint" "funcool/boot-codeina" "org.clojars.bluemont/ring-anti-forgery" "lein-up" "com.manigfeald/graph" "org.clojars.edbond/lein-cljsbuild" "prepor/figwheel" "org.clojars.brenden/scala-storm_2.9.2" "factual/c4" "funcool/promissum" "org.clojars.michaelblume/test-project" "ib-re-actor" "org.clojars.sunng/clj-redis" "clj-gist" "im.chit/hara.coerce.map" "ring/ring-core" "org.clojars.tcrawley/hambiscuit" "org.clojars.paraseba/clj-html" "soy-clj" "aaronbabcock/appengine-local-runtime-shared" "banach" "io.tilde.momentum/momentum" "com.creeaaakk.dtm-dispatch" "org.clojars.osbert/tentacles" "org.onyxplatform/onyx-datomic" "heimdallr" "ilshad/edn-keeper" "appledelhi2" "com.leadtune/clojure-zmq" "org.clojars.mishok13/clj-oauth" "html-template" "metrics-clojure-health" "tnetstrings" "org.clojars.kovasb/cascalog" "org.clojars.nmurray/clucy" "arohner/clj-webdriver" "org.clojars.flatland/java.classpath" "puppetlabs/ring-middleware" "fulab.zarnidict/fulabdsl" "org.clojars.philandstuff/polynome" "rfkm/cloverage" "org.clojars.maxweber/http-kit" "eye-boof" "y42/cljs-http" "org.immutant/deploy-tools" "gh-file-reader" "ncljs/lein-template" "vertx-template/lein-template" "myproject" "ninjakoala/tentacles.custom" "kmp-search" "neorest" "org.clojars.rafflecopter/schema-extensions" "aviary" "xsc/clj-oauth" "crazzyford/clj-haml" "overtone/sclang-interop" "org.rathore.amit/medusa" "antler/xyzzy" "ekimber/clj-strava" "com.sattvik/nailgun" "org.bodil/redlobster" "reaver" "mbuczko/boot-flyway" "asciidoclj" "org.clojars.paraseba/ring-jetty-adapter" "captcha" "racehub/om-bootstrap" "datomic/codeq" "double-run-bug-fix-midje" "lein-catapult" "overtone/jinput" "treatwell/http-kit" "org.clojars.eduardoejp/jnativehook" "clj-liquibase" "org.clojars.deltam/epubcheck" "eu.cassiel/tramway" "geonames" "org.clojars.shaiguitar/snow-client" "grimradical/clj-semver" "clj.qrgen" "io.forward/clojure-mail" "darzana/lein-template" "compojure-test" "org.trpr/example-seda-cep" "specljs" "lein-wisp" "chantrix" "ring/ring-headers" "octohipster" "yeller-java-api-http-client-4-2" "boxuk.versions" "org.clojars.hms/karras" "reduce-fsm" "lazy-map" "zme/zme-net" "qplan" "org.clojars.lhanson/appengine" "condense/om-tick" "yeller-timbre-appender" "cc.stepien/skrot" "com.layerware/hugsql-core" "org.clojars.arthurprs/metrics-clojure-ganglia" "fluentsoftware/cljs-binding" "gov.nih.nlm.nls.lexaccess/lexaccess-dist" "clj-esri" "juxt.modular/mqtt" "confiture" "clj-openweathermap" "fullcontact/full.json" "cljsjs/chartist" "caribou/rss-plugin" "me.raynes/moments" "rodnaph/bernie" "lein-cloudbees" "com.emidln/ssg" "smee/binary" "fixdit" "suub/bote" "org.clojars.thobbs/hector-core" "org.clojars.miau.biz/fleet" "soundcloud" "org.clojars.chriscnc/clj-utils" "boot-jruby" "org.clojars.s450r1/dcm4che-tool-dcmsnd" "clj-exceptional" "loom-gorilla" "com.yetanalytics/multipart" "inflections" "juxt/lein-dockerstalk" "csspool" "org.immutant/immutant-web" "lein-oneoff" "marathon-client" "wormbase/acetyl" "io.replikativ/konserve" "cljsjs/husl" "danlentz/clj-fgl" "com.clojurewerkz/cascading-mongodb" "gardendb" "httpurr" "org.tcrawley/leinjacker" "org.pauldeschacht/xlsx-pivot-to-csv" "ghostandthemachine-jayq" "org.clojars.ereteog/clj-tokenizer" "com.notbot/smoax" "pluto" "fluentsoftware/lein-cucumber" "com.outpace/remote" "edu.standford.nlp/stanford-parser" "elephantdb/elephantdb-ui" "radicalzephyr/clansi" "org.clojars.james-henderson/dommy" "faker" "org.clojars.kjw/lucene-highlighter" "org.clojars.brenton/clucy" "rodnaph/fisher" "clj-maxmind-geoip" "org.clojars.tuomask/leiningen" "twinfoxcreations/fusion" "fn" "org.clojars.hzhao/clojure-hbase" "org.clojars.benalbrecht/compojure-api" "com.kurogitsune/sulfur" "clj-jpa" "working-template/lein-template" "mysql-java" "ca.takeoutweight/cljscm-sample-repl" "hsl" "simple-geocoder" "mavericklou/clj-oauth2" "org.dthume/ring.middleware.prefer" "org.clojars.miau.biz/selenium-server-standalone" "rtfc" "lob" "clj-simple-config" "hiccup-watch" "net.nanonation/marginalia" "irobot" "rsa-signer" "com.birdseye-sw/dalap" "org.clojars.r0man/ring-middleware-format" "org.clojars.bagucode/jorbis" "com.lemondronor/pid" "duct/ragtime-component" "org.clojars.pw4ever/neko-sdk18" "clj-karabiner" "clj-eventlog" "ritz/ritz-repl-utils" "org.clojars.abedra/hiccup" "jmorton/clj-gdal" "inin-purecloud/ring-jetty-ws" "org.clojars.ralmoritz/data.xml" "hive/hive-hwi" "com.asimjalis/useful" "com.linkedin.databus/databus-tools-pkg" "org.clojars.bo-chen/postal" "org.clojars.cjschroed/sandbar" "ring-rewrite" "cljsjs/jszip" "lwjgl-clj" "generators/lein-template" "org.vlacs/traveler" "org.clojars.bouzuya/lein-tarsier" "com.mdrogalis/onyx-kafka" "racehub/sente" "com.ivaneye/cdraw" "weissjeffm/clojure.prxml" "datasource" "munge" "ru.sunsite/cats" "org.clojars.firesofmay/calabash-jvm" "org.clojars.tommyettinger/clucy" "funcool/postal" "unk" "com.jamiei/com.jamiei.betfairsports" "clj-hl7-fhir" "com.mdimension/jchronic" "org.clojars.occamin/batman" "de.tarn-vedra/clj-oauth2" "org.marianoguerra/clj-rhino" "org.clojars.bothacker.jmonkeyengine3/jogl" "clj-msgpack" "com.quantisan/clatrix" "org.quintype.banana" "org.clojars.xumingmingv/jdic-macos-tray" "shrink" "duri" "lein-scala-repl" "org.metastatic/yason" "packss" "grafter/extra" "webjure/jeesql" "com.palletops/stevedore" "fullcontact/full.edn" "org.meshy/jshotgun-osx" "de.paymill/paymill-java" "org.lpetit.ring/ring-java-servlet" "fogus/reinen-vernunft" "clj-simpleflake" "stringtemplate-clj" "keechma/router" "ring-partial-content" "clj-lqs" "ptaoussanis/lein-beanstalk" "ring-middleware-format" "high-c" "org.clojars.stuarthalloway/compojure" "org.clojars.dmiller2718/cljclr.tools.nrepl" "gorillalabs/tesla" "ring-upload-progress" "clj-extensions" "single-file-lein-zip" "net.mikera/core.matrix.stats" "org.clojars.brightcove/cassaforte" "org.clojars.shadizzle/jury" "org.clojars.okkop/clojure-couchdb" "com.palletops/aws-instance-types" "edu.mit/openblocks" "edit-distance" "org.clojars.myfreeweb.clojuresque/runtime" "org.clojars.sergey-miryanov/ring-servlet" "cljs-npm/to-utf8-unix" "clj-kilim" "panzee" "clojure-paypal-ipn" "dropship/lein-template" "lein-swank-clj" "clj-carbonapi" "gov.usgs.eros/lcmap-logger" "midje-gntp" "org.clojars.regularlambda/lzma" "noir-auth" "storm-mongo" "org.clojars.doo/uri" "org.clojars.fukamachi/appengine" "cljsjs/web-animations" "mbuczko/fuzzy-matcher" "org.clojars.bschwind/html-parser" "com.clojars.eploko/prerenderer" "org.mongodb/mongo-hadoop-streaming" "koh" "lein-kibit" "cloujsearch" "trout" "yij/atom-feeds" "org.clojars.cvkem/jsonedit" "encoder" "lucky-client" "atp-api" "org.clojars.kriyative/cynojure" "com.ruiyun.dvr4j/dvr4j" "org.rksm/cloxp-trace" "ib5k/async" "vasco" "couch-session" "full-template/lein-template" "clj-hdf5" "borg/compojure" "clj-sitemap" "delver/clojureql" "limo" "im.chit/hara.string.path" "darongmean/boot-lein-generate" "clokado" "com.seandoig/tools.namespace" "org.toxiclibs/toxiclibs-clj" "crosscram" "numberto" "metosin/maailma" "org.clojars.gilesc/clojure-solr" "tubular" "blobstore" "org.clojars.raywillig/ring-middleware-index-file" "morri/append-reports" "selmer-zuriar" "polymer/paper" "progress-light" "domaintypes/lein-domaintypesdoc" "clj-fuzzy" "com.palletops/cli-cmds" "jarohen/ringless" "lein-antlr" "babe-the-blue-ox" "com.laurent.utils/scl" "com.brunobonacci/synapse-core" "kawa" "aatree" "occamin/batman" "dbox" "joplin.zookeeper" "lein-servlet" "full-control" "open-exchange" "states" "cadence" "thi.ng/strf" "se.sics/tasim" "jogl/jogl-util-gl2" "com.andrewmcveigh/lein-boot" "supportwn" "org.clojars.thomaswhitcomb/compojure-api" "org.clojars.smx/lein-release" "com.mmcgrana/node.x" "com.ryanberdeen/lead-cloudwatch" "org.tomdz.storm/storm-esper" "daydreamt/corenlp" "cirque" "cj" "org.clojars.rmoehn/lein-grim" "ring.middleware.jsonp" "clojure-geeklist" "org.clojars.hoopes/pinterest-sdk-cljs" "org.clojars.shenfeng/clojureql" "ellinia" "net.unit8/darzana" "me.arrdem/crajure" "thi.ng/shadergraph" "byteable" "lambda-blog" "tinsel" "lein-virgil" "om-async-tut/lein-template" "cljs-async/lein-template" "kibu/bidi-tools" "apollo" "echo-chamber/alexa-skills-kit" "org.clojars.jds02006/reloaded.repl" "org.clojars.aberkley/entomic" "cljsbuild-release" "net.defn/moustache" "guzheng" "cljsjs/leaflet" "clojurewerkz/vclock" "sqlinsql" "macroz/graphqlviz" "cljsjs/labella" "stint" "edocu/clj-edocu-configuration" "clj-htmltpl" "shi" "lein-codox" "github-jobs" "lein-control" "keorn/corenlp" "piccup" "opencv" "conclujon" "org.clojars.bpdp/ring-reload-modified" "selmeci/core.async" "mccraigmccraig/alia" "gridref" "opentable/clj-http" "lein-ver" "flare-core" "org.omcljs/om" "yieldbot/marceline" "org.clojars.mikeitz/gluegen-rt-natives-linux-x86_64" "org.pupcus/authentication" "maybe-thread" "com.flipkart.poseidon/dependencies" "zenedu/one" "zuldi/jeromq" "org.clojars.iamedu/fortress-ring-adapter" "org.clojars.artdent/postgis" "knossos" "org.clojars.mccraigmccraig/drift" "com.ninjakoala/ttlr" "h2" "overtone/clj-jack" "jepsen.rabbitmq" "com.plumbee/plumbot" "com.rallydev/jarvis-meme-plugin" "me.cristian/clj-slack" "netty-ring-adapter" "facjure/mesh" "slugger" "org.clojars.tisnik/clj-flotr" "org.clojars.mopemope/clarsec" "org.clojars.icm-consulting/confijulate" "overtone/scsynth-interop-linux-x86_64-lucid_portaudio" "cljs-server/lein-template" "zjhmale/korma" "org.clojars.pnarode/elasticsearch-clj" "scriptjure" "wink/kibit" "shepherd" "org.clojars.jim/iceclient" "bilus/crypto" "ring-custom-jetty-server" "com.offbytwo.iclojure/iclojure" "mschuene/core.logic" "buddy/buddy-hashers" "org.flatland/tokyocabinet" "com.avos/postal" "org.clojars.ato/test-clisk" "jest/brick" "com.linkedin.databus/databus-bootstrap-common-impl" "unapply" "org.clojars.mccoy/too-hot" "org.clojars.tclev/lein-voom" "org.clojars.ericlavigne/clojure-hello" "prepor/clojure" "com.github.bdesham/clj-schulze" "cljsjs/marked" "antisynergy/substratum" "cljsjs/eccjs" "org.foo/bar" "storm/kryo" "im.chit/hara.namespace.eval" "cljsjs/llexus-validate" "factual-cljs-issue" "zombie" "cuillere" "tailrecursion/boot.task.cljs" "es.topiq/replikativ" "mccraigmccraig/cassandra-parent" "cljs-http-node" "clj-rpc" "org.sift/runtime-model" "org.clojars.jhosteny/lein-elastic-beanstalk" "tonyduan/clj-yahoo-boss" "clj-zeromq-majordomo-fix" "osbert/gh-fork-explorer" "org.codehaus.mojo/adtech-db_interface" "org.clojars.ollez/clooj" "clojure.java-time" "org.clojars.mstump/clj-jgit" "info.yasuhisay/vijual" "adzerk/boot-beanstalk" "com.projector/lein-kinesis" "org.clojure-grimoire/var-link" "clj-ripple" "ifesdjeen/stateless4j" "gorillalabs.tesla/titan" "net.java.dev.jets3t/jets3t" "frost" "com.sherbondy/markdown-clj" "org.clojars.soundcloud/exceptional-clj" "danger-date-expr" "dst" "cascalog/cascalog-math" "org.clojars.floriano.clj-tika" "org.clojars.gregb/storm-amqp-spout" "simple-xhr" "clj-unit" "ring-vertx-adapter" "com.ingemark/pbxis-ws" "org.clojars.michaelr524/ring-undertow-adapter" "com.aphyr/riemann-java-client-parent" "org.clojars.enricodk/avro-scheme" "org.clojars.robertpfeiffer/swank-clojure" "com.rmoquin.bundle/curator-framework" "saml20-clj" "nimrod/nimrod-java" "signe" "refactor-nrepl" "jimbru/ragtime" "com.intelie/lazytest" "ring-jetty/ring-server" "antistock/config" "clj-hdfs" "goog-jar" "mixradio/clafka" "clargo" "patterned" "gws/clj-dynamodb-session" "reiddraper/simple-check" "org.clojars.coldnew/opencv-native-linux-x86_64" "org.clojars.kjw/lucene-queries" "with-gorilla/lein-template" "org.clojars.kjw/rabbitmq-client" "onaio/leaflet-cljs" "racehub/atlas" "randest" "org.clojars.charles-stain/lwjgl" "push" "fipp" "ring-param-obfuscator" "org.clojars.dajac/clojure-hadoop" "figwheel/lein-template" "com.2tothe8th/system" "yaclot" "kixus/reduce" "org.clojars.luminousmonkey/greentree-interface" "clj-dde" "aleph-core" "grape" "franks42/debug-repl" "ring-cors" "kibu/component" "cljsjs/reactable" "io.dropwizard/dropwizard-msgpack" "slothcfg" "name.rumford/clojure-carp" "lyceum" "slack-rtm" "zolodeck/hiccup" "cljsjs/react-dom-server" "org.clojars.amit/swarmiji-java" "cc.qbits/alia-all" "two-probs" "org.clojars.sparx/kits" "conversions" "cljs-webgl" "d3-compat-tree" "geocoder-clj" "bitsplit-core" "org.clojars.pesterhazy/boot-react-native" "org.clojars.ring/ring-core" "org.clojars.leanpixel/clj-utils" "org.clojure/core.logic" "org.clojars.nmeyer/simple-avro" "active-vars" "org.clojars.cwyckoff/clj-gapi" "earthen/clj-cb" "lein-archaic" "adzerk/boot-bookmarklet" "org.flatland/turntable" "spymemcat" "clojure.options" "mozgas" "ritz/ritz-nrepl" "codox/codox.leiningen" "any-route" "org.clojars.jwhitlark/clj-time" "gorillalabs.tesla/quartzite" "com.layerware/hugsql-adapter-clojure-java-jdbc" "org.clojars.chicagofan98/honeysql" "topix" "com.redhat.qe/qe-tools-clients" "imprimatur" "overtone/javadocking" "drtom/clj-uuid" "steamweb" "instilled/boot-ext" "concerto" "org.domaindrivenarchitecture/dda-httpd-crate" "pid" "org.clojars.compasslabs/incanter" "smichal/curator" "com.gfredericks/clojure" "org.domaindrivenarchitecture/httpd" "org.clojars.technomancy/jlayer" "org.clojars.populaceio/twilio-rest" "com.banzai/raven-clj" "com.palletops/lein-pallet-crate" "timewarrior/mongodbsession" "org.maravillas/ring-servlet-gae" "core-deploy" "scribble" "jkkramer/purty" "nberger-sqlingvo" "migratory" "org.clojars.davidjagoe/dbus" "similar-set" "bashpipe" "facjure/gardener" "org.codehaus.mojo/adtech-security-ng" "factjor" "noir-template" "me.vlobanov/libphonenumber" "ua.modnakasta/schema-transform" "com.emidln/honeysql" "trevorbernard/hiccup-bootstrap" "quantum/figwheel" "hyperion/hyperion-postgres" "com.akolov.enlive-reload" "me.kanej/s3-sync" "sputnik" "org.clojars.s450r1/dcm4che-hp" "storm.trident.syslog/trident-syslog" "autodoc/lein-autodoc" "com.navgeet/clojure-flickr-api" "org.clojars.krisajenkins" "alandipert/boot-yeti" "oljs-asynchronize/cljs-asynchronize" "incise-stefon" "ovation" "kaibra/mount-ms" "storm-redis-pubsub" "lein-zip" "com.keorn/persistent-memoizer" "com.github.pmerienne/stormy-pythian-test-utils" "zhhkay/dahua4j" "org.clojars.paxan/amazon-kinesis-client" "com.ryanmcg/stefon" "nginx-clojure" "overtone/scsynth" "scenegraph/decora-runtime" "org.codehaus.mojo/adtech-security_services_client" "clj-range" "stopwatch" "crafty/generate" "failjure-logging" "factual/riffle-hadoop" "org.clojars.mcav/parboiled" "rksm/subprocess" "bilus/clojure-humanize" "cli-app/lein-template" "org.clojars.frozenlock/ring-swagger" "org.immutant/immutant-messaging" "org.clojars.hiredman/fnparse" "thirtyspokes/hindrance" "shiroko" "narkisr/misaki" "org.clojars.bouzuya/misaki-lesscss" "cljs-jquery-sparkline-1-6" "org.clojars.gzmask/rich_pos" "its-log" "clojure_tic_tac_toe" "qubbyhole/lzo-java" "com.cemerick/friend" "cc.artifice/granary" "davstore" "christo-auer/dynne" "brh/jzmq-native-deps" "cc.qbits/alia-manifold" "my-grafter-project" "precursor/om-i" "com.akolov/mirador" "ducttape.cljs" "xeric/cucumber-alt" "im.chit/repack.advance.core" "lein-instant-cheatsheet" "net.intensivesystems/conduit-rabbitmq" "joiner" "sonian/apodini" "zonotope/secretary" "org.mule.transports/mule-transport-rabbitmq" "com.flipkart.aesop/runtime-client-cluster" "metosin/ring-swagger-ui" "cljs-tooling" "parsure" "cluwrap" "org.clojars.nomanisanisland/fun_migrations" "democracyworks.datomic-toolbox" "dtc" "apricot-soup" "vlacs/helmsman" "clj-miscutil" "ken-cljs-2/lein-template" "rclosure" "clj-norwegian-holidays" "net.swiftkey/keysync-crate" "lolg" "org.clojars.mikeitz/gluegen-rt-natives-windows-x86" "org.platypope/esfj" "com.flipkart.hydra/hydra" "jing-fm" "cljsjs/js-beautify" "clj-kdtree" "gridster" "endive" "com.uswitch/kafka_2.9.2" "quantum/seqspert" "org.clojure.clr/data.generators" "to-jdbc-uri" "shegon" "cljs-compiler" "goodwink/fleetdb-client" "im.chit/adi" "com.gfredericks/webscale" "om-datascript" "tierlieb" "com.notbot/chai" "net.mikera/mikera-pom" "brandonparsons/excel" "org.immutant/transitive-immutant-deps-test-lib" "lein-hydrox" "crackle/crackle-hbase" "tranchis/incanter-core" "ona-lein-cljfmt" "com.helpshift/zk-queue" "com.github.tranchis/lein-ring" "zet" "org.clojars.doo/ring-anti-forgery" "drawbridge-cljs" "org.clojars.laforge49/agent2" "onyx-twitter" "cascalog/cascalog-more-taps" "sofs" "hud" "pe-apptxn-core" "sphinxapi" "org.clojure-android/data.json" "cc.qbits/alia-eaio-uuid" "org.clojars.edbond/talib" "org.clojars.gumvic/remloc" "aof/lein-jsvc" "clj-geoip" "thi.ng/raymarchcl" "com.taoensso.forks/async-ring-adapter" "org.clojars.cwiggler/data.xml" "com.2tothe8th/example" "kixipipe" "geschichte-gorilla" "com.layerware/hugsql-adapter" "reagent-devcards/lein-template" "org.clojars.nmurray/tokyocabinet" "parsepy" "com.contentjon/libs" "org.clojars.doo/process" "clj-jsr223-v8" "com.parsely/streamparse" "org.funzt/datomic-schema-grapher" "rave" "au.com.auspost/cassius" "om-mini-form" "degree9/lounge.toolbar" "goat" "org.clojars.blucas/postal" "lleo/utils" "leveldb-server" "lein-yaml-validators" "org.clojars.ema/util" "process-tree" "nrepl-figwheel-node/lein-template" "proto-repl" "org.clojars.ato/compojure" "org.joegallo.robocode/robocode.host" "com.gfredericks/java.jdbc" "clojars-test" "org.clojars.pyr/pallet" "carry-logging" "pe-user-core" "functors" "qseq" "kithara" "many-worlds" "org.clojars.meeh/i2p" "epublib-clj" "me.shenfeng/swank-clojure" "seesaw" "epicea/process" "org.clojars.kostafey/clucy" "com.enterpriseweb/open-stack-wrapper-java-api" "org.clojars.doo/mongodb-key-value-store" "com.kahui.spider/spiders-cljs" "arre/protobuf" "org.clojars.nakkaya.javax.mail/pop" "org.clojars.adamschmideg/clojurescript" "geocoordinates" "expresso" "rbl/ordered" "ttc-2013-pn2sc" "com.gfredericks/doubles" "jonase/termito" "historic_twitter" "org.jpedal/jpedal-lgpl" "org.clojars.s450r1/dcm4che-tool-dcm2jpg" "mvc-works/respo-spa" "cats.typed" "clj-redis-map" "azql" "org.clojars.oakes/rangy-textrange" "org.clojars.krisajenkins/m-parser" "rodney.leonard.stubbs" "datomic-compound-index" "org.clojars.populaceio/clj-stripe" "fact/clara-rules" "org.clojars.brenton/clojurescript" "gd_client" "org.clojars.myfreeweb/korma" "palynate_common" "prabhasp/slickgrid-cljs" "org.bittorrent.scribble" "quest" "org.clojars.gilesc/congomongo" "org.clojars.kris/lein-axis" "farbetter/roe" "slack-ghost" "clj-exif" "github-percentile" "filemodc" "org.flatland/protobuf" "dbutil" "im.chit/hara.extend.abstract" "aitu-e2e" "org.clojars.pallix/clojure.prxml" "org.clojars.mschristiansen/lein-cloudfront" "org.clojars.nakkaya/team-bots-collections" "org.clojars.kurtharriger/clojure-hbase" "words" "indolent" "lein-palpatine" "file-cabinet" "org.clojars.originalsurfmex/processing-jars" "com.jme3-contribution/zay-es" "jilch" "net.intensivesystems/js-gen" "org.eclipse/swt-cocoa-macosx-x86_64" "irclj" "svarcheg/rincanter" "fx-clj" "org.codehaus.mojo/adtech-xml-parser-apis" "kixi/incanter-core" "com.madeye.clojure.ampache/ampache-top100" "tester" "ellipso" "lexical-chocolate" "com.notbot/react-with-addons" "n01se/deltype" "clj-php" "cirru/parser" "org.clojars.slyphon/simple" "wlxy" "jsyntaxpane" "so.modernized.high-concept" "lein-templater" "org.clojars.magomimmo/enfocus" "org.clojars.mccraigmccraig/core.incubator" "clj-spymemcached" "iron_mq_clojure" "incanter/incanter-excel" "org.clojars.frozenlock/entanglement" "feedparser-clj" "speclj-twmn" "rm-hull/ring-cede" "tiensonqin/curator" "cristian/clj-slack" "longship" "hoopes/pinterest-clj" "org.clojars.nmurray.com.eaio/stringsearch" "robot-kbhit" "scenegraph/decora-hw" "com.linkedin.databus/databus2-cmdline-tools-pkg" "org.clojars.lprefontaine/boing" "clj-bonecp-url" "rerenderer" "gnomon" "clogems" "com.sematext.hbase.ds/hbase-ds" "org.clojars.ato/lein-release" "lingo" "teaser-clj" "puppetlabs/trapperkeeper-webserver-jetty7" "io.curtis/btc-e-client" "gita" "rm-hull/boyer-moore-search" "org.clojars.rayne/cake-marginalia" "org.clojars.processing-core/org.processing.jogl" "frankiesardo/lein-test-out" "pleasetrythisathome/tao" "webnf/base" "kioo" "gorillalabs/sparkling" "com.smnirven/biomass" "ring-bounce-favicon" "ai.cubic.ragtime-alia" "clj-v8" "number-theory" "apparatus" "com.taoensso/carmine" "cljsjs/emojione" "org.clojars.adamwynne/clojure-twitter-streaming" "nrepl-complete" "gaeshi" "com.diogodualibe.lzstring4j/lzstring4j" "wit/duckling" "jig/protocols" "jogl/jogl-util-awt" "joplin.hive" "org.clojars.ludug3r0/go-schema" "josephwilk.monome-serial" "clj-radix" "alandipert/yeti-lib" "clojurewerkz/balagan" "org.clojars.smallrivers/lein-zi" "jogl/jogl-gl2-win" "lein-sha-version" "cljsjs/bankersbox" "nodecljs/lein-template" "rgad/stompjms-project" "clj-marc" "dtolpin/gorilla-repl" "org.clojars.otabat/closure-stylesheets" "net.cgrand/confluent-map" "org.baznex/imports" "org.maravillas/ring-devel-gae" "clj-rsyntax" "hjdserver.exchange" "clj-saml-adfs" "chrisbetz/flambo" "ptaoussanis/clj-serializer" "com.linkedin.databus/databus2-event-producer-mock" "org.clojars.smx/clj-v8-native" "io.moo/tars" "clj-oauth2-ls" "pe-fp-core" "im.chit/hara.load" "org.clojars.nakkaya.jmonkeyengine/jme-scene" "mongo-component" "atompub" "org.clojars.oliyh/lein-test-out" "var-schema" "com.xorlev/storm-amqp-spout" "michaelrkytch/streamsum" "im.chit/hara.common.checks" "ordered-set" "compojure-app/lein-template" "im.chit/hara.string.case" "http-kit/lein-template" "marcoy/zookeeper-clj" "com.hmsonline.bundle/json-simple" "com.banzai/salesforce" "leipzig" "com.manigfeald/roundabout" "org.clojars.kbuchanan/tic-tac-toe" "org.drift-db/drift-db-h2" "threatgrid/ctim" "basex" "audio3d" "qbits/clj-esearch" "org.clojars.kovasb/clojure" "jig/cljs-builder" "org.clojars.circleci/gcal" "degree9/lounge.db" "ant-colony-optimizer" "nilenso/clj-oauth2" "ceebee" "mishadoff/numberto" "com.nuroko/nurokit" "listora/whitespace-linter" "com.hmsonline.bundle/clojure.osgi" "com.ullink.rx/rx-cron-scheduler" "kephale/neat4j" "psalaberria002/clj-oauth2" "language-extension" "gcloud-wagon-private" "wrap-js" "org.flatland/lamina" "sqleton" "jogl/newt-ogl" "lwjgl-new/lwjgl" "clj-gremlin" "com.liaison/onyx-elasticsearch" "mrroman/clj-slack" "cubrid/cubrid-jdbc" "org.clojars.dhleong/speech-synthesis" "mars0i/core.matrix" "org.flatgui/flatguiwidgets" "svgsalamander/svg-core" "ring-ttl-session" "tcp-server" "reader-macros" "org.clojars.originalsurfmex.processing/jogl-all-natives-linux-armv6hf" "pythagoras" "deraen/boot-livereload" "clj-nanomsg" "rill-event-sourcing/rill.event_store.memory" "org.clojars.strongh/clojure-hbase" "com.banzai/medley" "rplevy-draker/clojure-tools" "poller" "topojson" "org.clojars.ghoseb/stringtemplate" "overtone/midi-clj" "org.clojars.phronmophobic/datomic-crate" "incanter" "org.prognostic/reagent-json-editor" "delaguardo/boot-gettext" "com.wilker-dev/cljs-noderepl" "raywillig/facebook-sdk" "me.arrdem.decomp" "im.chit/gita" "ljudge-clj" "antler/caribou-core" "org.clojars.nakkaya/hidapi" "lein-sync" "johncowie/kerodon" "gorilla-repl" "io.dominic/mc-ping" "com.birdduck/mml" "clj-audio" "cljs-numbers" "cljsjs/oboe" "fafnir" "barp" "cljsjs/dom4" "rec-mong" "coci/coci-prismic-api" "com.gfredericks/clj-date" "net.mikera/trellis" "jogl/jogl-gl2-x11" "org.clojars.euler" "com.github.bdesham/clj-plist" "com.intception.components/jetty" "Hermes" "fiber-zookeeper" "cluster-connector" "ptaoussanis/tower" "org.clojars.oliyh/akismet" "finagle-clojure/core" "net.sourceforge.barbecue/barbecue" "ring-test" "htmlcleaner" "scribe" "pusher" "sig-gis/magellan" "org.clojars.brightcove/lein-junit" "benekastah/dropblog" "info.sunng/debug" "com.flipkart.flux/runtime" "lein-mustache" "dragonmark/util" "jmatt/clojure.algo.generic" "cassandra-hadoop" "rojat/rojat-arrphys" "org.clojars.bbirec/bandalore" "rill-event-sourcing/rill.repository" "com.clojars.stumitchell/raygun4cljs" "nanonation/enlive" "es.qiu/stanford-corenlp" "com.flipkart.aesop/hbase-producer" "foreclojure-plugin" "sunog" "org.tobereplaced/jetty9-websockets-async" "org.clojars.icylisper/j2ssh-common" "reactnet" "andrew-nguyen/lein-ring" "bocko-ios/lein-template" "byu-odh/byu-cas" "clojuresque/scriptoresque-base-runtime" "ildipo-docker-client" "emlyn/irclj" "blaber" "opennlp/tools" "cljsjs/object-assign-shim" "org.clojars.cemerick/cljx" "com.alchemyislands/patterning" "com.keminglabs/cljx" "racehub/drawbridge" "org.clojure/core.typed.rt" "org.clojars.pallix/aterm-java" "date-as-integer" "lein-misaki" "com.nberger/ring.middleware.logger" "raygun4cljs" "rarous/quip" "marks" "megaref" "clj-wamp/lein-template" "url64" "cljs-devmode" "silc" "precursorapp/react" "viebel/webaudio" "arrows" "clojure-hadoop" "tikkba" "crumpets" "wile" "mysema/datomic-tools" "com.intception.components/lifecycle" "overtone/scsynth-interop-linux-x86-maverick_jack" "paths" "lein-inky" "org.clojars.chapmanb/gatk" "om-cljs/lein-template" "pseidon/riemann-java-client-proto2.4.1" "tst-clj" "io.hoplon.vendor/jquery" "lein-lobos" "org.cojars.jaen/boot-cljs" "freeport" "lein-clojuredocs" "kirasystems/aging-session" "fogus/trout" "clanhr/ring-test-client" "clj-avro" "org.flatland/teleturn" "clef-tools" "org.clojars.ryanmcg/lein-kibit" "fileape-lzo" "uplift/twilio-sms" "org.graylog2/gelfj" "com.lemonodor/pronouncing" "com.leadtune/clj-ml" "overtone/byte-spec" "de.otto/tesla-cachefile" "schmetrics" "org.clojars.iamedu.clj-jsr223" "ziputil" "com.flipkart.fdp/fdp-irm-dataproc" "test-clj" "ring-mock" "ib5k/cylon" "com.linkedin.databus/databus-util-cmdline-impl" "k13gomez/korma" "org.clojars.runa/clj-hazelcast" "clj-service-locator" "org.clojars.mccraigmccraig/swank-clojure" "uberjar-release" "cbass" "pirate" "umbrella" "normal" "yoyo-webapp/lein-template" "cljsjs/textures" "im.chit/hara.protocol.state" "kul/flambo" "rip" "cljsjs/parse" "ontodev/owlapi" "pedestal-app/lein-template" "obb-rules-api" "defprecated" "drake-rows" "org.clojars.samumbach/shoreleave-remote" "org.clojars.whamtet/hiccups" "com.beardandcode/forms" "bloguito" "intronic/ion-torrent-api" "org.clojars.brunchboy/colors" "overtone/sclang-interop-linux-x86" "clozen" "ccfontes/core.match" "com.gfredericks/compare" "circleci/version-specs" "jig/bidi" "cljsjs/typeahead-bundle" "cider-ci/clj-auth" "quoin" "kaj-default/lein-template" "org.clojars.alexguev.ragtime/ragtime.lein" "geo-clj" "org.hawkular/hawkularqe-parent" "debug-repl" "clj-bookmarks" "yayitswei/fb-sdk-cljs" "com.palletops/meteor-crate" "cljos" "elv.mongodb-storage" "org.clojars.raywillig/google-maps-web-api" "dtolpin/lein-gorilla" "tokomakoma123/shoreleave-remote-ring" "org.clojure.contrib/djui" "clj-nytimes" "gukjoon/appengine-local-runtime-shared" "me.kanej/twilio" "jogl/jogl-egl" "com.ninjakoala/monotony" "learnclojure" "com.redhat.qe/test.assert" "condense/freactive.core" "org.clojars.ndimiduk/reservoirsampler" "org.clojars.nmurray/java-bloomfilter" "org.clojars.gw666/piccolo2dcore" "org.bioclojure/bio.io.vcf" "pallet-hadoop" "org.clojars.boorad/cascading.hbase" "im.chit/hara.extend.all" "tjpext" "org.clojars.nathell/tagsoup" "steam-api-clj" "tailrecursion/castra" "org.domaindrivenarchitecture/dda-backup-crate" "im.chit/hara.component" "org.clojars.datasio/clj-excel" "appengy-redis" "degenerate" "shire-digest.crawler" "cljs-complete" "om-utils" "com.flipkart.phantom/channel-handler-http" "core-async-storage" "pygdown" "ymilky/franzy" "com.palletops/crates" "ganymede" "org.clojars.doo/bandalore" "lein-octia" "clj-honeybadger" "flowing" "wwa-windows-om/lein-template" "kritzelei" "lein-meta" "clj.rb" "webparse" "org.clojars.rayne/stupiddb" "com.flipkart.fdp/fdp-irm-java-client" "clj-twiml" "org.clojars.kriyative/compojure" "mori" "org.clojars.squest/squest.questdb" "org.spootnik/logconfig" "jarohen.forks/bidi" "ring-gae/ring-core-gae" "antistock/accounts" "clj-xero" "wotiz" "record-utils" "gmatheu/quickie" "birdseye" "handy/map-values" "org.pingles/thrift-clj" "game-utils" "org.clojars.amit/zolo_contextio_provider" "org.clojars.sritchie09/gdal-java-osx-native-deps" "zololabs/world-country-list" "org.clojars.s450r1/dcm4che-image" "fasiha/incanter-core" "org.clojars.mylesmegyesi/tic-tac-toe" "org.bytescale.keywordize-json-body" "org.clojars.r0man/coolant" "org.clojars.leanpixel/cljs-uuid-utils" "christianblunden/clj-airbrake" "adamclements/vijual" "funcool/hodgepodge" "hirop" "org.uncommons.maths/uncommons-maths" "clojure-rabbitmq" "gfzeng/boot-http" "org.clojars.danielcompton/lein-doo" "org.clojars.rix0rrr/forjery" "bk/ring-json" "org.clojars.xafero/clojure-jsr223" "conceit/conceit-returnable" "ring-cache-buster" "sv/system.nrepl" "org.clojars.trptcolin/friend" "joplin.dynamodb" "archive-bolt" "org.clojars.hlolli/panaeolus" "com.twilight/h264" "brendanyounger/matchure" "rich_pos" "persona-kit" "storm-contrib-mongo" "datomic-boundary-reporter" "com.madeye.clojure.notifymyandroid/notifymyandroid" "cljsjs/react-select" "org.clojars.llasram/lein-otf" "org.clojars.bobby/jzmq-clojars" "crison" "email-parser" "cav/mtj" "reagent-liveedit/lein-template" "clj-webdriver" "lein-deploy-uberjar" "bigml/histogram" "plural" "clj-blueprints" "org.clojars.nakkaya/ode4j" "orolo" "jhickner/mongo-session" "yieldbot/storm" "lein-javac-resources" "org.clojars.bapehbe/jzmq-native-deps" "hornetq-tube" "morri/htsjdk" "org.clojars.sritchie09/gdal-java-native" "pjagielski/disclojure" "redis/redis-clojure" "flupot/pixi" "net.cgrand/parsley" "org.clojars.kjw/postgresql" "nl.studyflow/exceptions" "wikla" "net.thegeez/clj-browserchannel-server" "org.clojars.pauld/libpja" "com.vgeshel/aleph" "antler/postmark" "org.clojars.ezand/cloogle-api" "suweet" "com.redhat.qe/bz-checker" "im.chit/hara.class.multi" "naipmoro/qrng" "stanfordnlp-clj" "com.palletops/cassandra-crate" "mixradio/graphite-filter" "bbloom.vdom" "clojure-contracts" "democracyworks/datomic-toolbox" "clj-uniprot" "org.jinterop/j-interopdeps" "net.dnolen.clj-cont" "sql-migrate" "teamwall/formative" "backtype/clj-time" "clj-nexmo" "burningswell/scheduler" "foundation/cljs.core.logic" "com.oakmac/util" "compojure-func" "roap" "local.var" "org.clojars.qaston/lein-ns-dep-graph" "com.howardlewisship.patched/clojuresque" "clj-stream-sh" "roxxi/simple-avro" "kixi/liberator" "clj-grid-mvc" "up/up-http" "lein-light" "thunknyc/nrepl-profile" "com.ashafa/nozzle" "com.kurogitsune/cmaes" "bureaucrat" "qqs" "net.mikera/mikera-clojure" "org.clojars.automata/jsminim" "midje-readme" "org.clojars.kjw/lucene-analyzers" "lein-hadoop" "lockedon/lovii-schema" "cloture" "tie" "org.clojars.mcav/crate" "com.zachallaun/datomic-cljs" "jmorton/gdal" "json-path" "org.clojars.pauld/slacker" "org.clojars.doo/aleph" "io.torsten/hexcompress" "receipt" "org.clojars.ezand/clojure-config" "org.clojars.runa/metrics-clojure-ring" "org.clojars.stanistan/clostache" "zhu/clout" "om-weasel/lein-template" "com.wjoel/reddit-listener" "net.cgrand/replay" "net.kronkltd/octohipster" "clipchat" "yetibot-stackstorm" "malcolmsparks/ring-mock" "thunknyc.profile" "contentjon.d3" "gavagai" "org.ldenman/s3-beam" "hhu1" "overtone/jvi" "pudge-app/lein-template" "incanter-sql" "re-console" "lein-elastic-beanstalk" "matross.mapstache" "org.clojars.brentshields/jasmine-cljs" "dora" "dl4clj" "com.invisiblefriend.component/redis" "org.clojars.dgiri101/http.async.client" "com.2tothe8th/dominator" "request-clj" "clj-text" "eu.cassiel/monome-fu" "org.trpr/example-seda" "org.clojars.sir-pinecone/cryogen-core" "navis/untangled-lein-i18n" "org.clojars.osbert/clj-time" "lein-pom-dev" "org.clojars.strongh/yetibot" "ms-search" "org.clojars.zak/clojure-yahoo-finance" "bootblack" "rbl/useful" "clj_blekko" "clj-jade" "rete" "org.fressian/fressian" "factual/timely" "aparapi-matrix" "gabo" "caribou/butterfly" "pub-oss" "lein-collisions" "zololabs/clj-librato" "yij/lein-plugins" "bridge" "com.github.kyleburton/impresario" "listora/constraint-config" "epicea/failure" "org.clojars.roti/swt-gtk-linux-x86_64" "org.clojars.pauld/ejml" "com.intception.components/metrics" "binaryage/pure-frame" "hafni-seesaw" "lein-margauto" "edpaget/react-bootstrap-datetimepicker" "heliapi" "org.clojars.zefhemel/congomongo" "ev3dev-lang-clj" "org.clojars.quintona/storm-contrib-core" "fresher" "athena" "core.logic" "tailrecursion/jslib-momentjs" "crsh/lein-template" "sabre" "mongodb-event-store" "rsta" "qbits/jayq" "majumble" "dog-lib/lein-template" "copy-shit" "mdl/vault-clojure" "kixi/data.vendor.lotame" "tachyon" "rsyntaxtextarea" "org.clojars.rayne/clj-highlight" "squirrel" "com.slagyr/blobstore" "racehub/http-kit" "org.ssutch/clj-aws-s3" "noirmon" "bandit/bandit-core" "org.clojars.chapmanb/variant" "org.clojars.mcav/amotoen" "clj-gift-wrap" "com.intception/datomic-manage" "com.kurogitsune/ccgjp" "com.redhat.qe/tools.verify" "ursacorp/ragtime.sql" "yle-ring-error-handling" "com.unbounce/freebie" "degree9/boot-d9micromgmt" "net-mikera/vectorz-clj" "org.clojars.stephen-charles/re-com" "tk.skuro/clj-oauth2" "org.rksm/cloxp-com" "sparkly" "com.instrument.triface/triface-action-adapter" "net.cgrand/regex" "purnam" "com.benburkert/korma" "sonian/carica" "yogsototh/kibit" "org.clojars.jeffdik/lein-ring" "onyx-plugin/lein-template" "juxt/clj-index" "dvr4j/dvr4j-contrib" "org.clojars.frozenlock/cljx" "net.nanonation/friend" "jogl/nativewindow-core" "org.clojars.org.sorenmacbeth/lucene-stanford-lemmatizer" "clj-factory" "ovirt.client" "zephyr" "talaria" "org.clojars.pmonks/depends" "org.bituf/clj-liquibase" "fab" "dag_unify" "co.grubb/clj-utils" "pjstadig/es" "me.shenfeng/enlive" "org.clojars.aqexwayi/testlib" "org.clojars.mcohen01/ring-undertow-adapter" "espejito" "org.clojars.arohner/lein-stefon-precompile" "org.clojars.adeel/ring-basic-authentication" "org.clojars.doo/avout" "com.heyzk/dommy" "dimensional-math" "org.clojars.jjttjj/illusioniste" "org.clojars.bmabey/congomongo" "naive-xml-reader" "ritz" "narkisr/ring-jetty-adapter" "org.clojars.weissjeffm/testng" "clash" "com.th3alchemist.clojure/matrix" "org.technomancy.clojars/jmdns" "cc.rightangle/mandrill" "incanter/processing-core" "dommy-crate" "org.clojars.john/hello-world" "org.clojars.alexbaranosky/clj-webdriver" "lein-kinesis" "net.java.dev.gluegen/gluegen-rt" "jlk/system" "rowtr/google-maps-web-api" "jenome" "helpshift/secor" "chime" "gorillalabs.tesla/mongo" "diff-as-list" "jarppe.btest" "lein-release" "org.clojars.mpenet/clj-redis" "blank-angular-website/lein-template" "com.flipkart.polyguice/polyguice-dropwiz" "rgad/stompjms-client" "com.vijaykiran.processing/org.processing.jogl-all" "juxt.modular/postgres" "googlecloud" "zjhmale/reagent-hickory" "com.github.ragnard/hamelito" "com.birdseye-sw/lein-dalap" "sicp-generator" "org.clojars.mikejs/ring-etag-middleware" "tesser.core" "tangrammer/co-dependency" "electric-it/clj-tosca" "feedback" "djy" "jogl/jogl-gl2es12-osx" "org.clojars.slocklin/jblas-minimal" "casyn" "enaeher/contrail" "nicolasoury.distributions" "org.clojars.bgruber/clj-slack" "clj-appengine-oauth" "poijur" "net.nanonation.pedestal/lein-template" "thi.ng/math" "lein-antlr4" "net.defn/enlive" "com.postspectacular/modelcouch" "baard" "org.openrdf.sesame/openrdf-sesame-onejar" "com.banzai/dommy" "clojurewerkz/neocons" "dynamo4clj" "cljsjs/dropbox" "org.ccil.cowan.tagsoup/tagsoup" "cljsjs/bitauth" "org.sift/runtime" "udp-wrapper" "net.nanonation/pedestal.service" "growmonster" "rkworks/lein-baum" "cc.qbits/commons" "prolefeed" "cc.qbits/hayt" "hive/hive-service" "org.rerenderer/rerenderer" "org.clojars.sivajag/clj-record" "touchstone" "cljsjs/aws-sdk-js" "clingr" "org.clojars.jasonjckn/curator-framework" "oss-jdbc" "libvirt-clj" "clj-wordnik" "analyze" "safe-append" "cljsjs/lamejs" "ampere" "org.clojars.nakkaya.jmonkeyengine/jme-terrain" "org.clojars.sunng/geohash" "de.no.number23/commons-lib" "edu.ucdenver.ccp/kr-jena-core" "com.palletops/pallet-docker" "io.hoplon.vendor/google.jsapi" "de.sveri/clojure-commons" "org.clojars.weissjeffm/serializable-fn" "org.clojars.edtsech/lein-lobos" "redis-mq" "datasio/kioo" "cljsjs/hashids" "org.myfreeweb.runtime.clojuresque/clojuresque" "garden" "clojure-twitter-streaming" "org.clojars.d-n-ust/valip" "org.clojars.leon/clj-jxls2" "org.clj-grenada/darkestperu" "est-utils" "ursacorp/ragtime.core" "jen" "reacl" "com.quantisan/jblas" "org.clojars.ordnungswidrig.congomongo" "clojure-protobuf" "org.clojars.cliffcrosland/java-gmail-imap" "com.swisscom.bigd/flambo" "net.cgrand/megaref" "techne" "hlisp-reactive" "colorbars-clj" "org.saunter/keyczar" "lein-test-is" "test-this" "im.chit/hara.common.error" "jblas/native" "org.clojars.laujensen/clj-oauth" "net.mikera/enlight" "com.draines/postal" "kuromadoushi" "lein-s3-sync" "org.clojars.deadprogram/oauthentic" "cljsjs/react-router" "org.flatland/ordered" "fullcontact/full.time" "factories" "lein-lesscss" "pharrellel-test" "org.clojure/core.cache" "org.conjure/conjure-view" "serializable-fn" "clojider" "marshallbrekka/clj-aws-s3" "org.bituf/clj-dbspec" "xmpp-clj" "marco-fiset/lein-datomic" "com.hmsonline.bundle/jeromq" "alwaysbcoding/spore" "org.clojars.pdoctor/tools.logging" "csv-to-json" "org.clojars.dmac/clj-statsd" "storm-commons" "com._0xab/common-clojure-platform" "ckirkendall/lein-package" "evently" "org.clojars.jkandasa/sshxcute" "clojurewerkz/eventoverse-collector" "org.clojars.charles-stain/nifty" "com.palletops/app-deploy-crate" "io" "org.clojars.tropicalmug/summarizer" "domshot" "me.arrdem.imprecise" "funcool/wydra" "clj-pam" "org.clojars.cvillecsteele/aleph" "com.onekingslane.danger/diesel" "org.clojars.roti/swt-win32-win32-x86_64" "org.clojars.nitin-punjabi/fix-translator" "rum" "com.palletops/ami-crate" "newt/newt-win" "com.lemonodor/xio" "com.aliasi/lingpipe" "org.clojars.prepor/riak-client" "lupapiste/lein-scss-compiler" "boost" "milesian/aop" "com.flipkart.phantom/sample-http-proxy" "onyx-s3" "trie" "org.clojars.chenlincong/chenlc" "datasio/lein-beanstalk" "io.forward/swagger-gen" "craygo/rss" "merkki" "com.velisco/wilkins" "com.flipkart.aesop/sample-bootstrap-server" "net.java.dev.jogl/jogl-macosx-universal" "arohner/lein-docker" "stringcheese" "fm.util" "org.clojars.sethtrain/postal" "ohua" "cc.qbits/http-kit" "clj-record" "org.clojars.slocklin/jblas-static-sandybridge" "lein-pdf" "elliot42/d3-deps" "com.rmoquin.bundle/jeromq" "boot-deps" "cc.qbits/cljque" "org.myfreeweb.runtime.clojuresque/runtime" "cryogen-asciidoc" "org.clojars.hookercookerman/yesql" "dibble" "clamq/clamq-jms" "om-datepicker" "kdtree-utils-clj" "incstats" "thi.ng/geom-physics" "com.novemberain/leiningen" "org.clojars.clizzin/clj-oauth" "org.clojars.btw0/twitter-api" "clj-cav" "puppetlabs/tools.namespace" "clj-sub-command" "cheshire" "com.floatbackwards/multipart" "clj-logging-config" "com.uswitch/clj-soap" "uncomplicate/neanderthal" "malabarba/lazy-map" "org.solovyov/foo" "viebel/audyx-toolbet" "sundry" "edu.sinica.bioagent/bioadi" "com.shareablee/http-bolt" "com.rallydev/clojure-mail" "org.clojars.amalloy/utils" "pliant/process" "com.relaynetwork/encase" "clj-tcp" "pl.randomseed/futils" "lein-shell" "com.ericsson.otp.erlang.lfe/otperlang" "clj-mesos-twosigma" "reloaded-with-tests/lein-template" "org.clojars.davidykay/strokes" "org.van-clj/json-zetta" "thing/lein-template" "org.clojars.nakkaya.jmonkeyengine/jme-collada" "rodeo" "ecimon/stencil" "net.unit8/fressian-cljs" "arre.jclouds.provider/aws-s3" "fullcontact/full.db" "ccw/clojure-maven-plugin" "clj-cas-rest" "org.clojars.benfb/gorilla-repl" "echo-chamber-middleware" "org.clojars.raynes/clj-sandbox" "jsch-agent-proxy/jsch-agent-proxy-jna" "conveyor-coffeescript" "metosin/palikka" "cascading-mongomigrate" "binnacle" "weissjeffm/data.xml" "drtoms-clj-sql-up" "kephale/javacv" "outpace/lein-assemble" "ring-gunzip-middleware" "com.joelafriedman/clj-pusher" "net.sf/ghost4j" "espersso" "net.matlux/jvm-breakglass" "com.utahstreetlabs/lein-release" "io.dropwizard.xml/xml-bundle" "com.jquery/jquery" "org.clojars.expectations" "infinitelives/infinitelives.pixi" "ccfontes/bitpay-java-api" "net.info9/boot-codeina" "lein-marginalia" "grid-clj" "om-sync" "gift/gift-android" "com.keminglabs/c2po-livereload" "com.report.engine/udp-communication" "embedded-kafka" "com.siili/memocks" "daslu/clj-utils" "com.climate/boomhauer" "jamesmacaulay/cljs-promises" "org.clojars.shicks/debug" "tailoredshapes/tephalome" "bloomin" "org.clojars.firesofmay/sauce-api" "rufster" "cljolokia" "com.ninjakoala/lamarck" "org-debugme-pronounce" "devth/naan" "webfunction" "corax" "korma.incubator" "macroz/tangle" "lein-uberscript" "not-yet-commons-ssl" "cc.artifice/ring-session-timeout" "binpack" "alandipert/cljs-priority-map" "upshot" "ru.prepor/utils" "com.unbounce/treajure" "fontselector" "clj-piccolo2d" "org.clojars.joshuathayer/clap" "com._0xab/common-clojure" "mastodonc/clj-kafka" "cristian/gniazdo" "platonus" "yeller/fressian-clojure" "org.domaindrivenarchitecture/dda-basic-crate" "wharf" "grafter-vocabularies" "org.clojars.erikcw/sdb" "om-ssr-app/lein-template" "dreamcatcher" "org.clojars.chptx/zbox" "shen.clj" "silasdavis/liberator" "clossher" "factual/sosueme" "hikari-cp-java6" "elephantdb/elephantdb-leveldb" "cljsjs/nprogress" "org.clojars.gixxi/lambdaroyal-memory" "caribou/caribou-plugin" "pandect" "foobar" "feedme" "org.clojars.brockrockman/lastfm-bindings" "spootnik/signal" "org.clojars.minikomi/jughead" "jayq" "org.senatehouse/expect-call" "gaka" "meridian/shapes-impl" "org.clojars.lypanov/google-closure-library-third-party-repackaged" "org.domaindrivenarchitecture/dda-pallet-commons" "im.chit/hara.protocol.map" "yarec/semantic" "org.clojars.jasonjckn/elephant-bird-cascading2" "org.clojars.kriyative/clj-http-client" "datamatrix-clj" "viebel/shodan" "silasdavis/at-at" "pedestal-micro/lein-template" "gantry" "org.clojars.samroberton/boot-autoprefixer" "oauthentic" "cddr/javelin" "lein-reload" "com.clojars.jfeng/random-aws-stuff" "org.jaunt-lang/jaunt" "cljs-asynchronize" "org.clojars.larme/sms-macosx-native-deps" "twalk" "ajchemist/classname" "org.clojars.sidec/fullscreen-native-deps" "mimic" "net.unit8/ulon-colon" "com.joshuadavey/boot-haml" "me.shenfeng/http-kit" "org.clojars.hozumi/clj-det-enc" "org.cloudhoist/lazybot" "prepor/figwheel-sidecar" "com.ifesdjeen/utils" "test-sugar" "puppetlabs/trapperkeeper-webserver-jetty9" "precursor/sente" "intentions" "libtest" "hub.util/facebook" "stereotype-clj" "org.clojars.paul/jspotify" "pg-hstore" "org.clojars.blrm/bugzilla.checker" "lupapiste/pdfboxing" "org.clojars.mysterysal/jobim" "combit" "google-app-engine" "org.clojars.kane.overtone/device.launchpad" "com.hypirion/conduit" "stately" "cljswidget" "noir-cljs-lypanov" "flutter" "org.craigandera/causatum" "markgunnels/reddit.clj" "org.clojars.trptcolin/ring-anti-forgery" "asystant" "org.clojars.samumbach/shoreleave-remote-ring" "org.clojars.zef/adia" "lein-eb-deploy" "com.galebach/maximator" "rm-hull/lein-cljsbuild" "cljsjs/react-slider" "chrisbetz/sparkling" "yayitswei/bitcoinj" "iloveponies.tests/sudoku" "monolith/lein-template" "boot-fingerprint" "com.flipkart.aesop/sample-client-bootstrap-producer" "spec-tacular" "org.clojars.amu/lwjgl" "cljs-http" "org.clojars.jgre/compojure-aleph" "clojail" "aaron-santos/clj-tiny-astar" "brutha/example" "com.rafflecopter/schema-extensions" "clj.lein/packr" "jessitron/lein-template" "aaron-santos/lwjgl" "org.clojars.tcrawley/lein-release" "yoyo-clj-kafka" "conduit-hornetq" "lein-version-spec" "io.screen6.cascading/redis" "cljsjs/reactabular" "iloveponies.tests/training-day" "cljgp" "potapenko/micro-rn" "bifocals" "wormbase/pseudoace" "lein-sitemap" "lein-finagle-clojure" "la.tomoj/camxes-rats" "com.vitalreactor/derive" "hermod" "com.andrewmcveigh/plugin-tinymce" "awohletz/validations" "ext" "lwjgl-native-platform" "org.clojars.bothacker.jmonkeyengine3/nifty-default-controls-1.2-snapshot" "com.galebach/friend-json-workflow" "element84/clj-gdal" "com.github.juliangamble/storm-jms" "org.marianoguerra/pipe-metrics" "progrock" "bbirec/appengine-magic" "route-map" "jruby-lein" "bostonaholic/utils" "org.clojars.mpenet/congomongo" "com.onekingslane.danger/date-expr" "racehub/stripe-clj" "savagematt/bowen" "clj-toml" "org.clojars.stumitchell/clairvoyant" "ithayer/stencil" "ccfontes/cljs-info" "reagent-chess-board" "org.clojars.cddr/honeysql" "clojurecom" "seqsy" "boot-environ" "org.clojars.clizzin/clojure-twitter" "jamesnvc/lein-lesscss" "taffowl/joplin.dynamodb" "kixi/postgresql" "org.clojars.danielcompton/doo" "org.clojure/tools.cli" "org.clojars.mylesmegyesi/hiccup" "biscuit" "org.clojars.quoll/datomic-transactor" "vlacs/timber" "logutil" "org.clojars.sc13-bioinf/load-fixtures-sql" "org.clojars.nakkaya.jmonkeyengine/jme-effects" "edw/clj-mustache" "ragtime" "pleasetrythisathome.modular/co-dependency" "google-maps-clj" "overnight" "chptx/material-ui" "eames" "com.cemerick/cljs-sanity" "com.ryanberdeen/lead-graphite" "clj-oauth-eighty" "com.spariev.lamina/lamina" "confusion" "lein-dynalint" "my-website-template/lein-template" "com.wagjo/data-cljs" "io.pithos/pithos" "org.van-clj/disposables" "clj-stingray" "com.positronic-solutions/pulley.cps" "clj-generators" "beanstalk-docker-app/lein-template" "cljsjs/mousetrap" "com.rafflecopter/lein-s3-uberjar-release" "bosky101/tabela" "cljsjs/react-day-picker" "cubicrobotics.ragtime-alia" "clatern" "stacked-denoising-autoencoder" "org.clojars.dth/goad" "prabhasp/osmtogeojson-cljs" "robot-remote-server" "meta-merge" "argo" "com.spright/dawdle" "com.redhat.qe/ovirt.client" "chobits" "bwo/macroparser" "datomic-riemann-reporter" "org.clojars.oakes/rangy-core" "com.holychao/parallel-test" "org.immutant/immutant-daemons" "clj-fitbit" "lein-daifu" "com.onekingslane.danger/clojure-common-utils" "org.bitumenframework.jettify/jettify-clojure" "clojess" "elliot42/sablono" "buddy/buddy-core" "savagematt/hermit" "org.clojars.isaiah/clojure-hbase" "pst" "zololabs/lein-dist" "de.karolski/berkelium-clj-native" "byu-odh/byu-ws" "lein-httpd" "treely" "dict" "sebastiansen/grave" "cljs-preloader" "info.hoetzel/clj-nio2" "benjamin-van-ryseghem/formative" "clojusc" "koan-engine" "org.clojars.smee/common" "qu/qu-core" "org.clojars.semperos/rhizome" "org.codehaus.mojo/adtech-persistent_store" "bugzilla.checker" "org.clojars.aaronlahey/speclj" "com.mdrogalis/onyx-core-async" "geo-dist" "clj-r53" "combo" "overtone/sclang-interop-linux-x86_64" "com.malloc47/ragtime" "org.clojars.narma/postgresql" "org.clojars.ctdean/lucandra" "widgets" "lambdacd-pipeline-def-test" "whoahbot/clj-aws-s3" "lein-vim" "kidpollo/ordasity-scala_2.9.1" "rhg135/middleware" "brahman" "clj-validate" "listora/constraint-validations-url" "hub.service/queue" "org.clojars.harsha2010/cascading-hadoop" "imaje" "org.clojars.jashmenn/clj-ml" "pgrep" "nanonationpedestal-service/lein-template" "com.ninjudd/ring-servlet" "metosin/ring-http-response" "clojure-my-examples" "org.clojars.tamasjung/js" "shepherd/core" "kibu/rawat" "respond-to" "rojat/rojat-arrxml" "factual/funnyplaces" "dsabanin-clj-jgit/clj-jgit" "org.clojars.atroche/reagent" "org.aboms/polaris" "listora/ring-nuclear" "org.clojars.aperiodic/mq" "lux/stdlib" "standalone-test-server" "migrator" "cljsjs/bootstrap-slider" "org.clojars.taffowl/salesforce" "net.mikera/timeline" "lupapiste/mongocheck" "gaeshi/kake" "com.oscaro/maximator" "qbits/clj-oauth" "org.clojars.originalsurfmex.processing/gluegen-rt-natives-linux-i586" "org.clojars.alexkyllo/yesql" "eightysteele-midje-cascalog/midje-cascalog" "org.clojars.freeagent/clj-amazon" "chlorine/repl" "org.clojars.adeel/clojure-twitter" "net.intensivesystems/conduit" "geoplanet-clj" "nrepl-discover" "org.clojars.jlehman/clj-wamp" "kormas" "org.vitalreactor/nativestore" "juxt.modular/http-kit-events" "quantum/core" "ypcat-auth" "com.stuartsierra/component" "org.clojars.dacc/jsi" "aviary/figwheel-sidecar" "lein-clj-doc-test" "com.intception.components/redis" "org.clojars.gukjoon/clojure-http-client" "alandipert/storage-atom" "ferry" "cljs-crypto-rand" "validat" "org.clojars.bskinny/clj-ldap" "sandbar/sandbar-session" "cc.artifice/lein-gossip" "org.clojars.paul.cdh/hbase" "thi.ng/fabric-facts" "ring-external-assets" "defclass/onyx-redis-plus" "org.clojars.rads/congomongo" "com.gfredericks.forks.prismatic/fnhouse" "metosin/testit" "lein-hadoop-cluster" "hoplon/jquery-daterange-picker" "phantom" "clojure-csv-pti" "com.flipkart.aesop/data-layer-kafka" "lein-publishers" "prabhasp/leaflet-cljs" "cc.qbits/fetch" "milieu" "org.clojars.dimovich/valip" "clj-peg" "org.clojars.arohner/clojure" "uk.co.forward/jblas" "om-event-bus" "com.linkedin.databus/databus-core-fwk-test" "armagedom" "org.pupcus/i18n-clj" "hl7yaml" "clojure-ring-monitoring" "com.ardoq/clj-wamp" "clj-beautify" "org.clojars.pmbauer/goog.compiler" "nio2" "com.flipkart.phantom/runtime-netty-uds" "org.clojars.cbilson/pinyin4j" "metosin/clj-suomi" "bozo" "com.onekingslane.danger/denormal" "loco" "org.clojars.andrew/lein-git-version" "schopfhirsch/injector" "avl.clj" "nimalan/aleph" "org.clojars.s450r1/dcm4che-tool-dcm2xml" "b-plus-tree" "org.clojars.amit/smack" "com.github.kyleburton/perfortress" "org.clojars.roti/crate" "org.brandonson/cjmaze" "polymer.elements/platinum" "pe-rest-testutils" "rewrite-cljs" "parinfer-site" "org.ozias.cljlibs/bootstrap" "cql-migrate" "lein-fail-fast" "clj-twilio" "org.cosmi.causeway" "qbits/jilch" "appcanary/lein-deploy-app" "wally" "org.clojars.diogok/clojure-geohash" "geohash" "io.github.emidln/storm-hdfs" "wrepl" "org.clojars.originalsurfmex.processing/jogl-all-natives-linux-amd64" "com.infectiousmedia/clj-utils" "cljsjs/react-with-addons" "com.nuroko/nuroko-pom" "org.clojars.cubrid/cubrid-jdbc" "org.clojars.arohner/sandbar" "gel" "matsu911/hiccup-bootstrap-3" "play-note" "clj-gus" "om-slideshow" "org.clojars.hozumi/clj-conv-path" "io.github.emidln/langdetect" "google-maps" "erdos.match" "clumcl" "sqs-comp" "com.wagjo/closure-library-third-party" "circleci/stefon" "org.clojars.oskarkv/map-regexps" "om-router" "cljsjs/d3-cloud" "org.clojars.jblomo/google-closure-templates" "clj-maventa" "com.report.engine/scheduler" "eandrejko/clj-aws-s3" "accession" "org.clojars.touch/elasticsearch-lang-clojure" "org.clojars.dwwoelfel/javagit" "jarohen/lein-deploy-uberjar" "yolk" "mvc-works/lein-html-entry" "joplin.datomic" "com.augustl.data-validation" "alandipert/desiderata" "net.solicode/middlebrow-swt.gtk.linux.x86" "pi" "flare" "lein-dist" "pitluga/eventstream" "totalperspective/lob-ampq0" "tumblr-clj" "de.otto/tesla-jsonhome" "com.report.engine/java-client" "com.flipkart.zjsonpatch/zjsonpatch" "org.onyxplatform/onyx-viz" "cljsjs/webcomponents" "overseer" "selfsame/pdf" "clj-gandi" "version-clj" "org.clojars.oskarkv/testclojars" "tnrglobal/bishop" "org.clojars.jackmorrill/environs" "remote-repl" "secretary" "barber" "apage43/grab-bag" "anaphorae" "org.clojars.chapmanb/tribble" "helpshift/tesser.math" "yuan/refactor" "org.clojars.luminousmonkey/rxtx-linux-native-deps" "rill" "c1337" "mongo-model" "kixi/incanter" "org.clojars.mmcgrana/java-memcached" "eu.cassiel/clojure-zeroconf" "org.clojars.si14/ring-swagger-ui" "clj-boxy" "cc.artifice/clojure-solr" "lein-phantomjs" "ring-cors-h" "com.samroberton/bureaucracy" "org.clojars.runa/clj-clu" "copy-stuff" "mapr-storm" "file-management" "org.clojars.number23/commons-lib" "lonocloud/synthread" "frankiesardo/tripod" "org.clojure-android/droid-test" "atw-om/lein-template" "com.afp/maple" "clj-nextbus" "jepsen.mongodb" "jsifyplugin" "receipt-plugin" "pluralex" "leonidas/jayq" "yieldbot/vizard" "org.clojars.normanrichards/riak-pb" "raiseup" "com.ebaxt.lein-ver" "cljsjs/react-virtualized" "kinesis-to-firehose" "com.redhat.qe/xmlrpc-client-tools" "org.clojars.rymndhng/clj-diff" "conveyor-clojurescript" "forecast-clojure" "com.gfredericks/aleph" "clj-useragent" "org.clojars.wilkes/sfteepee" "specljs/lein-template" "antistock/worker" "net.apribase/clj-dns" "clj-refresh-cache" "bolt" "net.uncontended/beehive" "bkell" "org.clojars.khoda.lein-expectations" "org.clojars.originalsurfmex.processing-libs" "yogthos/config" "kephale/unification" "aussen" "clauth" "bean-utils" "im.chit/hara.io.scheduler" "antler/ring-server" "huzhengquan/barber" "org.clojars.gfodor/thrift" "org.marianoguerra/friend-json-workflow" "remworks.net/clj-json" "ktoa-react-shim" "hub.service/notification" "flare/flare-core" "org.martinklepsch/boot-garden" "math" "pchalasani/cascadog" "clojurewerkz/elastisch" "org.clojars.kurtharriger/cascading.hbase" "org.clojars.tnoda/tnoda.math.prime" "newt/newt-ogl" "lg" "clj-netty" "clj-mvn" "org.apache.deltacloud.client/deltacloud-client" "ringfinger" "reditore" "lein-awsuberwar" "atom-reader" "org.roribib/dreamcatcher" "cljstang" "org.clojars.michaelr524/cljs-uuid-utils" "dar/async" "org.clojars.fyuryu/processing.core" "net.unit8/tower-cljs" "com.tcrayford.from.org.giltene/pauselesshashmap" "thoonk" "org.clojars.jaxyz/shoreleave-remote-ring" "venantius/titan" "im.chit/hara.ova" "postgres-redshift" "redis.clients/jedis" "com.wcohen.ss.art.uniroma2.it/secondstring" "data-validation" "org.jmatt/clojure.algo.generic" "es.corygil/stanford-corenlp" "qbits/casyn" "tux/lein-template" "org.clojars.jberg/aa-logging" "tcrayford_parsley/parsley" "instaweb/viewer" "rethinkdb" "lein-sass" "far-lib/lein-template" "morri/one-tx-per-gene" "ccw/ccw-server" "digest" "lein-create" "tokyocabinet" "fly-develop" "org.clojars.triss/nrt-sc" "accounting" "migrate/migrate.core" "org.clojars.frozenlock/reagent-modals" "clj-shellwords" "hal-clj" "gov.usgs.eros/lcmap-client-clj" "com.draines/norville" "clj-mmap" "clj-systemtray" "iloveponies.tests/predicates" "clj-rpc-client" "org.onyxplatform/onyx-java" "org.clojars.jkni/jepsen" "net.drib/strokes" "polycosm" "com.xorlev.gatekeeper/gatekeeper-agent" "org.clojars.folcon/clojure-lanterna" "enfocus" "emezeske/closure-library" "srt" "org.clojars.yiny/utils" "samza-config" "im.chit/hara.class.reflect" "cljsjs/gl-matrix" "fibbin" "pinterest-sdk-cljs" "org.trpr/platform-model" "es.corygil/nlptk" "k13gomez/camel-snake-kebab" "lein-cl2c" "com.hmsonline.bundle/clojure" "org.formcept/sqljdbc4" "im.chit/brahmin" "crucible" "shaky" "etcd-clj" "oubiwann/lein-git-deps" "hoplite-doc" "simplelog" "bitcljoin" "edw/async.combinators" "org.clojars.ghoseb/mongo-java-driver" "com.ververve/conveyare" "adi" "colt" "prismatic/om-tools" "probe" "clj-docomo-dialogue" "org.clojars.sunilnandihalli/clojure-hbase-schemas" "wgetjava" "lein-generate" "org.clojars.michaelr524/bidi" "org.clojars.sritchie09/gdal-java" "borges" "alandipert/enduro" "cljs-pdfkit" "io.sarnowski/lein-docker" "org.clojars.mw10013/osc-clj" "com.2tothe8th/monads" "org.clojars.mishadoff/numberto" "kovacnica/clojure.network.terminal" "launch4j" "clout-link" "lein-sqs" "puppetlabs/typesafe-config" "com.andrewmcveigh/om-bootstrap" "codesignals/flux" "uncomplicate/fluokitten" "org.clojars.quil-firstclass-shapes/firstclassshapes" "ring-accept-param" "bluster" "puppetlabs/pcp-broker" "xenopath" "lein-light-nrepl" "cauchy-jobs-elasticsearch" "lein-set-dep-ver" "lein-spell" "org.bituf/sqlrat" "compliment" "org.flatland/telegraph-js" "whoahbot/exploding-fish" "decomatic" "com.github.pmerienne/stormy-pythian-state" "org.clojars.mikeitz/jogl-all-natives-linux-x86" "riemann-jvm-profiler" "parallel-ssh" "org.clojars.smallrivers/clj-facebook-graph" "sv/system.sente" "org.clojars.paul/kafka-hadoop-consumer-0.7.0-cdh3u2" "defm" "cmbntr/cmbntr.org" "sqrel" "im.chit/hara.common.hash" "clj-antlr" "org.clojars.nodename/rinzelight" "hbase-runner" "org.clojars.skv/peasycam" "clojurewerkz/buffy" "zutil" "cljs-compiler-jar" "memoize-ttl" "cyg" "jme3/lein-template" "org.clojars.toxi/noir" "conceit/commons" "org.clojars.andrewzures/ruby_java_clojure_server" "yolk-jquery" "judgr/mongodb" "potemkin" "zololabs/jericho-html-parser" "org.clojars.luskwater/lein-search" "kovasb/shoreleave-pubsub" "bsima/itsy" "com.rmoquin.bundle/curator-client" "vlist" "whodidthis/om-image-grid" "cljsjs/media-stream-recorder" "milesian/sequence-diagram-dashboard" "topoged/topoged-hibernate" "michaelblume/marginalia" "org.tobereplaced/http-accept-headers" "lein-gen" "im.chit/hara.io.environment" "org.clojars.etosch/cosmos" "org.joegallo.robocode/robocode.ui.editor" "org.clojars.mikeitz/jogl-all-natives-windows-x86_64" "com.keminglabs/jzmq-linux64" "dmcollie/cleventing" "jblas" "underflow" "bodyguard" "plato" "protoflex/parse-ez" "melee" "org.clojars.day8/structural-caching" "cljsjs/react-pixi" "jogl/jogl-util" "tangrammer/bidi-wrapper-matcher" "bootstrap-cljs" "org.dunaj/tools.analyzer.jvm" "org.clojars.adamwynne/thrift" "clojure-humanize" "groupid/lein-template" "naughty" "cljsjs/wad" "org.clojars.guilespi/clj-oauth2" "tolitius/boot-check" "clj-recaptcha" "ragtime-c.j.j-0.3.3/ragtime.sql" "clj-growl" "gpsservices" "metosin/ring-middleware-format" "org.clojars.thobbs/hector-object-mapper" "clj-metasearch" "siscia/ring-basic-authentication" "overtone/scsynth-interop-windows-x86_64-common" "org.clojars.hsestupin/yandex-blogs-api" "clj-parse" "immutant-hystrix-stream" "clj-bson" "org.flatland/masai" "com.compasslabs/clojure-hbase-schemas" "funjible" "org.funzt/component.config" "cljs-ssr-app/lein-template" "org.clojars.somnium/congomongo" "play-testing" "spootnik/tron" "org.cjd-doc/extensomatic" "chic-text/chic-text.core" "org.clojars.inglada/org.otb.application" "hyperion/hyperion-sql" "unpredictable" "yieldbot/serializable-fn" "dk.ative/docjure" "hornetq-clj/lein-hornetq" "hostiness" "kholodilov/clj-esper" "com.gfredericks/graphs" "speclj-tap-reporter" "org.mobileink/migae.datastore" "ring.middleware.conditional" "org.onyxplatform/onyx-bookkeeper" "lein-kuromadoushi" "midje-progress-emitter" "clj-authsub" "com.lucasbradstreet/cljs-uuid-utils" "com.shash.hbase.ds/hbase-ds" "org.clojars.oakes/clojure" "lein-git-version" "ringfinger/restfinger" "juxt.modular/cljs" "cljsjs/three" "ring-gae/ring-jetty-adapter-gae" "org.clojars.paul/congomongo" "org.clojars.marktriggs/jcommon" "liquibase-edn" "tonsky/lein-light-nrepl" "rm-hull/infix" "slacker/slacker-cluster" "clonfig" "com.mdrogalis/onyx" "ninja/drift" "tiesql/tiesql-core" "sync" "kaitanie/monger" "hafni" "org.buntin/korma" "tag-soup" "faconne" "clj-airbrake" "kovacnica/clojure.network.ip" "org.clojars.maruks/maruks.data" "org.clj-grenada/jolly" "pennon" "clj-match" "cursors" "com.rallydev/clj-flowdock" "clj-socketio" "org.clojars.umatani/bcmacro" "org.projectodd.shimdandy/shimdandy-impl" "strict-typed-ops" "clj-cctray" "org.clojars.aperiodic/clojurebot" "unbot-hipchat" "org.clojars.automata/tritonus-share" "com.malcolmsparks/endophile" "org.arohner/clojure-json" "boot-cljs-test/node-runner" "fixtures-component" "org.aperiodic/simple-open-ni" "org.clojars.razum2um/jd-core-java" "org.clojars.thdr/ring-middleware-format" "com.shareablee/elasticsearch-bolt" "clj-authur" "net.f5/steganography" "treecompare" "ring-jdbc-single-session" "rjmetrics" "mvxcvi/merkledag-repo" "hvitmiddleware" "lein-servlet/adapter-jetty7" "containium.systems/config" "me.shenfeng/mmseg" "macros4macros" "org.clojars.jblomo/clj-soy" "shakhov.units" "org.clojars.biallym/gluegen-rt" "uswitch/tools.reader" "clock-component" "thomasa/mranderson" "clj-mqtt" "org.clojars.tobyclemson/clj-http-fake" "prismofeverything/cdt" "org.clojars.diogok/cljts" "org.clojars.tltjr/aws-java-sdk" "cljsjs/papaparse" "org.domaindrivenarchitecture/dda-liferay-crate" "cljsjs/react-grid-layout" "com.dirtybrussels/stijl" "org.clojars.snut/macana" "clanhr/logger" "migratus-lein" "dstk-clj" "orderly" "com.ibdknox.scriptjure" "org.clojars.mkhoeini/dispatcher" "functionalbytes/rmap" "clj-linear" "samaaron/native-path" "walmartlabs/system-viz" "code.lucamarrocco/hoptoad-notifier" "intronic/ring-edn" "necessary-evil" "com.nothingtofind/slick2d" "niconico-clj" "pdf-to-images" "org.clojars.grilix/formant" "org.clojars.uplift/twilio-sms" "org.clojars.doo/s3-wagon-private" "org.clojars.brunchboy/lein-dash" "org.clojars.chapmanb/clucy" "getteretta" "montgomery" "log4j" "msprunck/clj-base62" "com.wilker-dev/cljs-noderepl-root" "confetti" "dmohs/requests" "progression" "kunstmusik/signals" "org.clojars.miguno/kryonet-all" "org.clojars.davelambert/clojure-powerloom" "com.flipkart.fdp/fdp-irm" "org.clojars.astrangeguy/byte-spec" "alda" "basic-web-cs-template/lein-template" "msprandom" "ring-logger-timbre" "com.rmoquin.bundle/disruptor" "cljs-worker" "polymer/elements.paper" "org.clojars.hozumi/clj-embed-s" "clj-time-uuid" "om-dev-component" "alida" "org.clojars.jakemcc/clj-amazon" "clj-http-fake" "lein-diagnostics" "mccraigmccraig/manifold" "lein-dependencies" "bmaddy/ring-proxy" "com.howardlewisship.cascade/cascade-core" "soac" "tgk/docjure" "de.deinprogramm/quickcheck" "korma.hikari-cp" "clj-scripts" "org.clojars.frederikdb/oscp5" "toga" "io.github.emidln/storm-core" "dom-css" "infinitelives/infinitelives.utils" "org.clojars.umutgokbayrak/analytics-engine" "gjcourt/storm-kafka" "alembic" "appstore" "philjackson/mig" "me.bsima/trello" "clojure_refactoring" "org.clojars.tokomakoma123/enfocus" "com.kaicode/wocket" "org.clojars.soulhacker/too-hot" "clojure-stemmer" "org.clojars.cvillecsteele/ring-permacookie-middleware" "jogl/jogl-awt" "bilus/cider-nrepl" "org.drift-db/drift-db-postgresql" "slagyr/cljsbuild" "hypower-org/physicloud" "freactive" "minnow.nrepl" "com.flipkart.phantom/runtime" "aggregate" "image-lib" "appengine-tools-api" "narkisr/closchema" "net.wurstmeister.storm/storm-kafka-0.8-plus" "mantra" "ring-honeybadger" "com.taoensso.forks/http-kit" "org.clojars.macourtney/i2p" "genetic" "co.uk.forward/jblas" "clj-mojo" "om-intermediate-template/lein-template" "com.twinql/clojure-rabbitmq" "org.clojars.bepitulaz/midpress" "mvxcvi/directive" "lein-mvn" "sunyata" "com.borkdal/clojure.counter" "async-ex" "pg-conversions" "cavia" "jig" "lein-debian" "reverie/lein-template" "org.flatgui/flatguicore" "torpedo" "hlisp-jayq" "datomic-query-helpers" "vine" "paddleguru/geonames" "alandipert/boot-http" "de.otto/tesla-httpkit" "org.nakkaya.robocode/codesize" "im.chit/hara.state" "kinvey" "base32-clj" "voldemort" "leaf" "org.clojars.sritchie09/enlive" "clojurewerkz/ragtime.lein" "com.yellerapp/clojure" "com.ingemark/lein-bundle-pbxis-ws" "hsm" "org.clojars.egamble/let-else" "clj-hoptoad" "neb" "yesparql" "gered/views" "eidola" "stocker" "com.rmoquin.bundle/jgrapht" "org.formcept/sqljdbc42" "plugin-management-system" "cljsjs/amplitude" "org.clojars.weavejester/lein-ring" "org.clojars.andrewzures/jruby-lein" "clj-tidy" "org.clojars.leonardoborges/lobos" "net.doo/process" "google-reader" "curator" "ring-validators" "lein-4clj" "chazel" "turtle" "io.hoplon.vendor/jquery-ui" "com.github.kyleburton/clj-bloom" "ragtime.lein" "backtype/cascading-dbmigrate" "bensu/ring-edn" "cark/data.lenses" "play-clj" "aleph-middleware" "org.dunaj/core.async" "kibu/dependency" "com.flipkart.phantom/netty-uds" "org.luminousmonkey/snmp4clj" "org.clojars.raynes/seesaw" "paddleguru/forms-bootstrap" "reverie-batteries" "registry" "intronic/curly" "org.jibble/pircbot" "clj-rackspace" "net.vemv/util" "com.fzakaria/slf4j-timbre" "cider-ci/lein_cider-ci_dev" "io.forward/yaml" "platt" "org.clojars.dive-networks/feedparser-clj" "org.clojars.dalethatcher/flightgear" "com.linkedin.databus/databus-client-common" "org.clojars.crowdflower/rotary" "cljsjs/platform" "rm-hull/inkspot" "rapipago_scraper" "clj_manifest" "com.palletops/hadoop-cluster" "geometry" "org.clojars.marsliu/jparsec-normal" "nrepl-comp" "tangrammer/component" "org.clojars.liquidz/clj-password-check" "lein-wagon-ssh-external" "w01fe/sniper" "ymilky/franzy-mocks" "analyticbastard/hierarchical-storage" "thheller/shadow-client" "org.clojars.mw10013/clj-sql-mapper" "cake-autodoc" "cc.qbits/pod" "rplevy-draker/clj-hector" "jimbru/ragtime.sql.resources" "cc.artifice/propertea" "to-be-continued" "incanter/incanter-zoo" "vmfest" "org.clojars.michaelblume/restfn" "vupt/boot-deps" "com._0xab/matplotlib" "arpad" "bronsa/cantor" "lein-field" "qu/lein-template" "tailrecursion/lein-hlisp" "instadump" "kafka-clj" "doclab/rethinkdb" "eciton/eciton-log" "akka/akka-clojure" "me.itang/lobos" "shady" "ring-rack" "hornetq-clj/example" "probprog/anglican" "guns.cli/optparse" "narkisr/clj-aws-ec2" "rplevy/lein-noir" "cn.leancloud.diamond/diamond-sdk" "com.github.tranchis/wire" "jarohen/yoyo.system" "org.trpr/platform-core" "mala/lein-template" "clj-eirenerx" "clj-cuda" "unifycle" "jarohen/pipe" "clj-squash" "conjure-core" "com.phonepe.models/merchant-models" "org.clojars.rhg135/bee-encode" "org.clojars.denysbutenko/lein-sass" "rest-serv" "com.github.pat-thomas/clj-utils" "org.clojars.trptcolin/ring-jetty9-adapter" "replumb/boot-pack-source" "flic" "yesql-generator" "com.gfredericks/seventy-one" "beats-clj" "lein-deploy-deps" "lein-junit" "com.greenyouse/ydn-cljs" "org.clj-grenada/lein-datadoc" "dragonmark/web" "org.nakkaya.robocode/robocode.sound" "clj-cli-ext" "fudje" "com.vijaykiran/quil" "org.clojars.andersfurseth/gcal" "com.wagjo/closure-library" "sim/appengine" "repl-plot" "org.clojars.amu/libgdx" "org.spootnik/watchman" "org.clojars.raynes/java.jmx" "clj-tuples" "ccfontes/elastisch" "webnf/enlive.clj" "hive/hive-metastore" "org.convana/server" "clojuresque/clojars" "lein-checkouts" "textocat-clj-sdk" "sorpaas/neo4j-jdbc" "lein-metajar" "html-spoon" "org.clojars.bothacker.jmonkeyengine3/jheora-debug-0.6.0" "lein-orphanage" "ddf.minim" "org.onyxplatform/onyx" "visual-library" "org.clojars.s450r1/dcm4che-tool-dcmqr" "org.clojars.originalsurfmex.processing/jogl-all-natives-linux-i586" "rill-event-sourcing/rill.event_channel" "ankha" "incanter/csparsej" "nio" "org.clojars.strongh/ring-refresh" "reagent/reagent-cursor" "org.clojars.august/session-store" "org.clojars.eto/jgroups" "world-country-list" "com.ctdean/iter" "archaeologist" "lt-plugin/lein-template" "spider" "incanter_01" "org.clojars.trptcolin/sjacket" "org.clojars.ayato_p/cljlc" "raymond/debug-tools" "elephant-bird" "com.lemonodor/gflags" "jayqui" "lein-prod-html" "clj-pretty-format" "jrill" "alandipert/interpol8" "org.clojars.sanityinc/redis-memo" "scotam/funnel" "com.hmsonline.bundle/curator-client" "overtone/substance" "cpmcdaniel/boot-with-pom" "clj-soy" "com.report.engine/modules" "craygo/clj-google-spreadsheet" "tailrecursion/monocopy" "ib5k/persistent" "link/link-epoll" "org.clojars.sergey-miryanov/ring-jetty-adapter" "status-codes" "spootnik/net" "jarohen/ghost-middleware" "commentthread" "trust" "korg-nano-kontrol2" "org.flatland/jiraph" "live-static-app/lein-template" "io.hvac.vigilia/vigilia-logger" "de.active-group/timbre-riemann" "clj-sample-utils" "su.boptim.al/subjson" "mala" "ray1729.clojure.sudoku" "tailrecursion/boot-useful" "org.clojars.automata/jl" "io.dropwizard/dropwizard-revolver" "com.palletops/uberimage" "reval" "org.clojars.vshender/clojure-contrib" "com.mdrogalis/onyx-datomic" "com.hmsonline.bundle/reflectasm-shaded" "me.kapilreddy/bunshin" "trace-client" "simple-config" "org.clojars.raphael/bigquery" "org.clojars.nickmbailey/java.jmx" "lein-gwt" "org.clojars.derander/vigilante" "ykk" "com.linkedin.databus/databus-bootstrap-client-impl" "geotiff" "be.niwi/clj.jdbc-dbcp" "comcomp" "omr/lein-template" "org.clojars.invisiblefriend/weegee" "org.trpr/batch-ha" "turbovote.datomic-toolbox" "com.report.engine/authentication" "io.liftoff/carmine" "yetibot-codeclimate" "org.clojars.kriyative/clj2js" "danlentz" "org.spootnik/constance" "re-interval" "org.clojars.oskarkv/lein-vimclojure" "org.clojars.nomanisanisland/bandalore" "com.semperos/brockman" "pjstadig/humane-test-output" "huapp/lein-template" "org.clojars.jmeeks/jtidy" "mccraigmccraig/yada" "clojr" "delegance/amazon-web-services" "tuenti-api" "clover/lein-template" "org.clojars.originalsurfmex.processing/jogl-all-natives-windows-i586" "parallel-thrush" "lein-minnow" "clj-rate-limiter" "jlk/digest" "selmeci/liberator" "thread-load" "echo-chamber" "org.clojars.shawnspooner/clj-pusher" "la.tomoj/mori" "pedestal-content-negotiation" "org.clojars.brenton/clj-riak" "decaf" "mavbozo/carmine" "stasis-boot" "com.middlesphere/clj-audio" "mrmcc3/boot-gzip" "be.niwi/clj.jdbc" "org.clojure/core.unify" "clj-calendar" "alandipert/mathemagician" "org.clojars.lapax/neo4j-meta-model" "appengine" "org.clojars.bouzuya/misaki-coffee-script" "org.clojars.doo/approval" "packager" "cljsjs/c3" "ragabone" "keorn/synaptic" "bioreader" "cljsjs/document-register-element" "ewen/flapjax-cljs" "org.la4j/la4j" "clj-enlive-template" "im.chit/hara.protocol.object" "com.twinql.clojure/facebook" "clj-gdal" "zippopotamus-clj" "chronicle" "org.clojars.lelayf/dfs-datastores-cascading" "info.yasuhisay/trove" "org.clojars.number23_cn/commons-lib" "timelike" "im.chit/hara.common" "nes-template/lein-template" "tiensonqin/flake" "emiln/slacker" "chileno" "hellonico/clj3d" "fluentsoftware/korma" "org.clojars.hiredman/clojure-awesome" "org.clojars.jberg/aa-common" "caribou/caribou-api" "com.palletops/lein-inject" "barry" "thheller/shadow-pgsql" "clorum" "ccfontes/codox.core" "pneumatic-tubes" "historian" "rwilson/clj-env" "clj-hbase" "com.palletops/docudata" "journey" "org.clojars.trptcolin/apache-cassandra" "clj-lambda-deploy" "dtolpin/anglican" "org.clojars.angerman/jreality-native-deps" "clin" "weave" "jobesque" "org.clojars.rnewman/clj-record" "rsslldnphy/component-cljs" "com.flipkart.aesop/data-layer-console-appender" "jinput" "com.vividsolutions/jtsio" "rm-hull/markov-chains" "org.clojars.mccraigmccraig/clj-oauth" "clojurescript-build" "org.flatland/telemetry-ui" "com.palletops/clj-fleet" "com.flipkart.hydra/hydra-composer" "appengine-local-runtime" "enforcer" "org.clojars.edvorg/lein-kibit" "mailer" "file-tracker" "namejen" "edufaker" "org.clojars.nateburgers/seltzer" "com.datastax.cassandra/cassandra-driver-core" "org.clojars.seancorfield/congomongo" "ring-edn" "com.flipkart/flux" "clj-sys/tagsoup" "org.clojars.ndimiduk/geohash-java" "clj-openstack" "com.postspectacular/structgen" "editor-fns" "clj-eshq" "last-tweet" "org.hypercrud/hypercrud-client" "odo" "eu.nathan7/keyed-set" "listora/corax" "timbre-logstash" "jogl/jogl-gles2-dbg" "fongo-component" "org.clojars.punkisdead/lein-cucumber" "nberger-time-series-storage" "jogl/jogl-sdk" "com.github.kevinsawicki/timeago" "foreclojure/lein-template" "mongofinil" "marick/structural-typing" "sigmund" "adgoji/cascalog-graph" "org.apraxis/apraxis" "com.clearspring.analytics/stream" "cljsjs/toastr" "totalperspective/fook" "vietpad-clj" "tranchis/core.matrix" "lein-gentags" "itedge/service-hub" "brute" "cascalog/cascalog-checkpoint" "reagent" "com.sgrove/cljs-time" "dgm-analytics" "zjhmale/compojure-api" "infinitelives/utils" "org.clojars.owl/clojure.otp" "tailrecursion/boot.core" "dsabanin/clj-yaml" "jig/stencil" "org.clojars.coyotespike/clj-pdf" "com.cemerick/yonder" "incise-git-deployer" "kibitz" "tulos/lo-sdk" "md-clj" "ibdknox/tools.reader" "deebn" "html-to-markdown" "node-cli/lein-template" "ch.deepimpact/flowgic" "couchbase-clj" "clj-couchdb" "tawny-skos" "org.clojars.bothacker.jmonkeyengine3/j-ogg-vorbisd" "org.jonmort.plugin/plugin-clojure-repl" "org.clojars.msassak/http-kit" "scrypticus" "org.clojars.mmcgrana/jredis-core-ri" "org.clojars.pepijndevos/ring-http-basic-auth" "clojure_tictac" "org.clojars.smallrivers/feedparser-clj" "org.clojars.dpetrovics/sandbar" "lockedon/if-let" "stereotype" "vom/lein-template" "ronda/routing-bidi" "org.clojars.frostman/storm" "net.experimentalworks/couchdb" "trello" "savagematt/toshtogo" "ewen.boot/boot-maven" "clj-epub" "debug-reader" "clojurewerkz/ragtime.sql" "org.clojars.hozumi/clj-polling-config" "clj-waterfall" "mikera/core.matrix" "org.eclipse/swt-gtk-linux-x86_64" "blizzard" "ciste" "clj-s4" "org.clojars.pawel/named-args" "pure" "org.clojars.intronic/appengine-clj" "valida-dora" "cljs-webapp/lein-template" "org.clojars.narkisr/clojure-couchdb" "ike/ike.tk.httpkit" "org.clojars.ohpauleez/wabbitmq" "jp.ne.tir/lein-koshiro" "experiment/lein-template" "http-bolt" "conveyor-closure" "overtone/scsynth-interop-examples" "caribou/c3p0-plugin" "org.sharetribe/aws-sig4" "modnakasta/boot-cljs-repl" "fnjs" "liza-riak" "lein-cljfmt-mk" "org.clojars.gregburd/yfinance" "trag" "hlisp-flapjax" "vedacorp/postal" "pail-fressian" "com.palletops/java-crate" "cgore/ring-middleware-format" "yetibot" "org.clojure/data.xml" "uk.org.1729/sql-phrasebook" "structural-caching" "lein-noir" "protoclj" "twine" "clj-hmac" "redmapel" "dag-runner" "lambdacd-junit" "net.java.dev.scenegraph/decora-hw" "prone-pedestal" "org.clojars.narma/kioo" "lein-deploy-app" "org.clojars.pvc/lein-rhino" "xml-writer" "lein-lazytest" "org.joegallo.robocode/robocode.sound" "sean-web-app/lein-template" "clj-proteomics" "jna" "json-html" "org.clojars.pieterbreed/clojure-couchdb" "swiss-arrows" "com.banzai/clj-decline" "me.kapilreddy/clj-webdriver" "org.bodil/cljs-nashorn" "org.clojars.bagucode/jbox2d-library" "viebel/konserve" "sahi" "org.bodil/dogfort" "snoopkit" "cljsjs/fixed-data-table" "deraen/sass4clj" "laczoka/clj-crypto" "im.chit/lucid" "clj-miniconcat" "mjstarter/lein-template" "lazy-server" "org.clojars.brightcove/lein-javadoc" "org.clojars.guokr/stan-cn-nlp" "colorlib" "cc.qbits/jayq" "org.clojars.tcrawley/codox.core" "mixradio/multi-atom" "postdoc" "mccraigmccraig/onyx-manifold" "awohletz/lwjgl" "craygo/feeds" "infixing" "com.palletops/riemann-crate" "introvert" "com.aphyr/metrics3-riemann-reporter" "compojure-rest" "lsnape/chord-transit" "org.clojars.frontrowed/korma" "qml-cljs" "clojureql-patch" "com.mdrogalis/monger" "ragtime-c.j.j-0.3.3/ragtime.lein" "me.arrdem/clojure" "com.matthiasnehlsen/inspect" "clojure-csv" "cbilson-web-app/lein-template" "image-resizer" "clj-highlight" "ithayer/expectations" "beaglebone-pru-swig" "im.chit/hara.data.seq" "yarn" "com.aerokode.conversions" "org.clojars.kiran/clj-id3" "lonocloud/lein-unison" "net.n01se/clojure-jna" "clj-eirenerx-scripts" "pathetic" "coldnew/pangu" "bocko-canvas/lein-template" "adolby/simstring-swig" "com.palletops/thread-expr" "info.yasuhisay/liblinear" "org.clojars.technomancy/lein-search" "tic-tac-toe" "org.apache.hadoop/hadoop-core" "org.clojars.jmeeks/abc4j" "funnyqt-henshin" "prepor/lein-figwheel" "shoreleave/shoreleave-browser" "enlive-cljhtml" "speech-synthesis" "camel-snake-kebab" "org.clojars.nakkaya/jgame" "ciderale/quick-reset" "org.clojars.alitn/vtd-xml" "io.adstage/speclj" "rabid" "backtype/dfs-datastores" "ryfow/lein-test-out" "org.clojars.eqw/konami-cljs" "org.clojars.pico/nails" "hub.util/rethink" "org.clojars.borh/mecab" "webnf/parent" "com.offbytwo/clj-itunes" "zip-movers" "org.eamonn.funcgo/funcgo-lein-plugin" "tailrecursion/boot-heredoc" "plaid-penguin" "spud" "testtemplate/lein-template" "paxdb" "music" "video-snapshot" "lein-dynamodb-local" "factual/leafgrabber" "zookeeper-atom" "matrix-cuda-clojure" "com.walmartlabs/logback-riemann-appender" "merkle" "org.clojars.frederikdb/too-hot" "luminus-log4j" "bronsa/clojure" "indent" "sass" "sleight" "io.hoplon/twitter.bootstrap" "me.shenfeng/ring-netty-adapter" "bubble" "com.flipkart.flux/api" "org.clojars.keoko/clj-redis-session" "overtone/scsynth-extras" "lein-cloverage" "org.joegallo.robocode/codesize" "kalar-template" "pasta-cljs" "antistock/api-client" "liftoff/geoip" "clojurewerkz/crawlista" "com.flipkart.polyguice/polyguice-akka" "intervox/clj-kue" "matthiasn/systems-toolbox-kafka" "seans-incredible-library" "im.chit/hara.string" "org.spootnik/om-bootstrap" "com.balabit/logstore" "bagotricks" "janiczek/clj-slack-client" "org.clojars.magomimmo/shoreleave-browser" "anansi-handlers" "democracyworks/bifrost" "org.clojars.tisnik/clj-calendar" "org.codehaus.mojo/adtech-runner" "nlputil-clj" "mvc-works/parser-combinators" "org.clojars.ninjudd/maven-ant-tasks" "org.flatland/chronicle" "mcav/javapns" "lein-sablecc" "jlk/utility" "morri/table-import" "hackworth/bux" "org.onyxplatform/onyx-console-dashboard" "spawn" "clj-iter" "atroche/lein-ns-dep-graph" "fullcontact/full.phonenum" "clj-file-finder" "cirru/parser-combinator" "org.clojars.r0man/lein-environ" "howl" "org.clojars.amit/zolo_fb_chat" "sigsub" "luminus/config" "prachetasp/stripe-clojure" "hashobject/hashids" "rplevy/lein-deploy-app" "tween-clj" "factory-time" "bothack" "com.banzai/uap-clj" "ring-session-memcached" "kixi/incanter-mongodb" "funcool/octet" "clojure-flags" "etl_flow" "quantum/datsync" "org.clojars.dajac/cascading-opencsv" "org.clojars.pntblnk/korma" "weka-wrapper" "org.clojars.coldnew/opencv" "paddleguru/enlive" "deft" "org.clojars.pld/core.matrix" "com.novemberain.green-bunny/green-bunny" "im.chit/one.love" "mangopay" "find-images" "org.clojars.aaronc/weasel" "org.clojars.nakkaya/rxtx-linux-native-deps" "im.chit/hara.concurrent.propagate" "titan" "jlk/mime" "clj-arrow" "facjure/pendown" "org.clojars.runa/runa-rabbitmq" "org.clojars.zaxtax/java-aws-mturk" "bloomf" "cloudbees" "org.clojars.renewdoit/clj-conneg" "materia/materia-cljs" "tesser.hadoop" "anarchy" "dominator" "org.clojars.arohner/mongofinil" "ch.deepimpact/flowgic.graph" "clansi" "com.flipkart.aesop/runtime-client-bootstrap-producer" "simpledb" "org.clojars.bothacker.jmonkeyengine3/stack-alloc" "org.clojars.hozumi/clj-gravatar" "ring/ring-codec" "pubnub-cljs" "giza" "nowayhoze.bitfinex" "java-fields" "org.alfrescolabs.alfresco-technical-validation" "arohner/accountant" "com.flipkart.poseidon/service-clients-core" "org.clojars.charles-stain/j-ogg-oggd" "misaki-markdown" "optimus-angular" "io.dropwizard.discovery/dropwizard-service-discovery-bundle" "com.rycole/dat-json" "lein-template-descjop/lein-template" "thi.ng/simplecl" "lein-outdated" "ring-token-authentication" "instagram-api" "org.clojars.nakkaya/vision" "lein-nrepl-eval" "om-transition" "com.paren/isomorphiclj" "hieronymus" "org.clojars.hugoduncan/lein-package" "pinyin" "org.pld/clatrix" "neo-matrix" "org.domaindrivenarchitecture/dda-pallet" "om-semantic" "org.bmillare/dj.project" "clearley" "juxt.modular/bootstrap" "retree" "lein-pedantic" "doric" "com.lyncode/jtwig-functions-java6" "org.clojars.paraseba/ring-devel" "madriska/core.matrix.mtj" "overtone/osc-clj" "lein-ancient" "clojure-slugifier" "com.github.vivekkothari/yamlparser" "ymilky/franzy-embedded" "com.aboutecho.ensemble/ensemble" "flatland" "ua.modnakasta/pushy" "com.clojurewerkz/cascading-cassandra" "hendrick/boot-medusa" "ftp" "kephale/slick-util" "kibit" "shoutout" "tcp-driver" "net.info9/clj-cpustat" "lein-essthree" "vote" "degree9/lounge.ui" "savagematt/potemkin" "com.flipkart.poseidon/common" "juxt.modular/aleph" "com.bizlogic/service-tools" "org.clojars.heimojuh/speclj-tap-reporter" "cljs-rrule" "cubane/stack" "tokengame" "easy-parse" "tailrecursion/useful" "org.clojars.timvisher/lein-checkout" "org.clojars.weavejester/dep-b" "nginx-clojure-ring-logger" "gencred" "clj-random" "arre.jclouds.api/s3" "uteal" "clj-wallhack" "me.shenfeng/mustache" "parseapp/lein-template" "less-awful-ssl" "comporoute" "org.clojars.gfodor/lein-nailgun" "sebastiansen/clj-asterisk" "lein-rum" "noisesmith/component" "poseur.com/aleph" "org.domaindrivenarchitecture.org/dda-config-crate" "cuma" "stackoverflow/lein-jdeb" "com.phansen/clojure.adt" "kgann/circleci" "com.manigfeald/base85" "org.clojars.ryanmcg/clj-ml" "oysteinj/minesweeper" "adamwynne/quartzite" "simple-avro" "gajure" "deepconv" "clj-iterate" "zenweb/lein-template" "cljsjs/tinycolor" "clj-journal" "apa512/image-resizer" "com.flipkart.aesop/sample-client-common" "com.leadtune/cache-dot-clj" "org.clojure/data.csv" "clamq/clamq-rabbitmq" "newt/newt-awt" "clj-mesos" "org.clojars.celeritas9/lein-droid" "sketchy" "com.vitalreactor/nativestore" "org.clojure-android/tools.nrepl" "zenedu.squest/questdb" "im.chit/hara" "whorl" "rwilson/compojure" "com.zentrope/quiescent" "naughtmq" "gtsp" "feeds2imap" "fisher" "org.rksm/cloxp-projects" "xaml20-clj" "gdata-books-clojure" "darwin" "hellonico/labs.redis" "triangulate" "org.clojars.benfb/lein-gorilla" "com.alexeinunez/vine-api" "org.clojars.danielneal/reveal" "dog/lein-template" "midje-grader" "org.clojars.blischalk.node-webkit-cljs/lein-template" "im.chit/hara.data.transform" "io.atlassian/clj-aws-s3" "org.clojars.charles-stain/j-ogg-vorbisd" "midje" "carry-history" "homestake-server" "ccfontes/codox.leiningen" "rand-cljc" "tiny-bugsnag" "slf4j-timbre" "com.taoensso/encore" "favfeed-template/lein-template" "mvxcvi/alphabase" "org.vlacs/helmsman" "impressive" "carry-persistence" "ohpauleez/cdt" "io.github.theasp/simple-encryption" "xsc/pem-reader" "test2" "org.clojars.jakedavis/tessen" "org.clojars.mikejs/jzmq-macosx-native-deps" "org.clojars.andersfurseth/flare" "cc.qbits/irclj" "randomorg" "clj-predicates" "org.clojars.rickmoynihan/lein-repack" "causeway/lein-template" "org.clojars.peeja/lein-garden" "dda-basic-crate" "om-local" "org.clojars.seivadmas/clojure.jdbc-c3p0" "io.appform.core/hystrix-function-wrapper" "fullcontact/full.monty" "me.shenfeng.http/http-kit" "gclouj/datastore" "savagematt/vice" "dragonmark/circulate" "com.middlesphere/msprandom" "com.redhat.qe/extended-selenium" "incanter/optimization" "com.kurtharriger/cljs-d3" "peloton" "org.clojars.uwo/react-bootstrap" "midi.soundfont" "erinite/template" "clojurewerkz/quartzite.listeners.amqp" "nebula" "net.solicode/middlebrow-swt.win32.win32.x86_64" "racehub/util" "me.shenfeng/clj-json" "org.clojars.pdoctor/storm-rabbitmq" "com.github.kyleburton/repl-from-java" "prismofeverything/oroboros" "burningswell/config" "sebluy/sigsub" "nlp.intent" "com.andrewmcveigh/lein-auto-release" "clj-imajine" "zilti/boot-midje" "gift/gift-desktop" "lein-sourceninja" "casper-cljs/lein-template" "sona" "shire-digest.meta" "org.pingles/clj-aws-s3" "cinfix" "cljsjs/react-selectable" "de.karolski.berkelium-clj" "seewalker/philharmonia-samples" "com.malloc47/cljson-schema" "carmi" "zilch" "spootnik/pickler" "flatcfg" "lein-jargon" "metis/validator" "org.clojars.qubbyhole/kafka" "oubiwann/clj-gdal" "conch" "jogl/newt-osx" "easy-form" "bidi-swagger" "sundbry/nightshell" "org.clojars.modulexploited/goose" "kuzu" "org.clojars.ostronom/cljs-uploader" "me.arnaudsj.cld" "im.chit/hara.class.checks" "baotask" "io.github.emidln/ua-parser" "clj-figlet" "org.clojars.gumvic/nanoql" "ring.middleware.logger" "missing-utils" "org.clojars.carocad/docopt" "subotai" "clj-derivatives" "hjdserver/remote-services" "ru.prepor.schema-compojure" "com.damballa/parkour" "xyz.a4j/clj-virt" "overtone/scsynth-interop" "n01se/seqex" "domsj/clarakoon" "gen-csv" "org.clojars.jyaan/slick-lwjgl" "clj-uri" "org.clojure/clojure-contrib" "org.clojars.autre/lein-vimclojure" "org.clojars.scizo/hikari-cp" "antler/clojure-solr" "ascent/agent" "datascript-transit" "com.carouselapps/prerenderer" "clojure-rabbitmq-rpc" "org.clojars.christophermaier/congomongo" "smokestack" "bevuta/hiccup" "flyingmachine/serialize" "org.gershwinlang/gershwin" "lein-write-resources" "org.blancas/kern" "com.vgeshel/cheshire" "org.clojars.locks/sueca" "sherbondy/clj-stripe" "org.clojar.behrica/digitalocean" "co.iamfy/lookbook" "gcm-project/lein-template" "com.nuroko/vizkit" "listora/memcached-component" "clojurewerkz/mailer" "org.ozias.cljlibs/logging" "noir/lein-template" "clj-whisper" "bee-encode" "clojurewerkz/propertied" "yle-clj-sql" "com.nberger/iota" "mvc-works/hsl" "hummingcat" "lein-fruit" "org.clojars.overtone/vijual" "confo" "clj-oauth-server" "revue" "org.clojars.drenda81/javafx-dialogs" "im.chit/hara.function" "org.clojars.mgrisius/hello" "ymilky/travel-zoo" "leinjacker" "com.cbui/simple-authentication" "org.clojars.ibdknox/redis-clojure" "cljsjs/pinterest" "bitter" "org.clojars.zentrope/zentrope-wq" "org.clojars.marktriggs/jfreechart" "emezeske/clojurescript" "com.shino/clj-aws-s3" "tenki" "deusdatsolutions/waller" "org.clojars.daaku/cssgen" "com.isaackarth/libsodium" "com.billpiel/sayid" "mud" "informant" "is.swim/utils" "org.clojars.thnetos/clj-time" "org.clojars.haussman/react-three" "lambda-ml" "core-cl2" "reverie-sql" "approximate-policy-iterajion" "com.google.code.typica/typica" "storm.trident.redis/trident-redis" "thi.ng/ndarray" "jerks-whistling-tunes" "org.clojars.jberg/tasim" "org.clojars.thejohnnybrown/clj-file-utils" "com.gfredericks/clj-http-fake" "malcolmsparks/clj-less" "figwheel" "com.flipkart.phantom/task" "dragonmark/data" "lein-clank" "lein-dbmaintain" "tranchis/cider-nrepl" "robostrippure" "wemocontrol" "lein-jruby" "stratege" "com.rmoquin.bundle/carbonite" "org.clojars.whiteboardfederal/monger" "rodnaph/clj-deps-leiningen" "org.clojars.scsibug/feedparser-clj" "jepsen.chronos" "do-make-rethink" "org.clojars.gukjoon/compojure" "reducate" "replz" "storm/jgrapht" "minizinc/clojure2minizinc" "zmaril/titan-crate" "openrada/collector" "org.clojars.maravillas/closure-compiler" "fb/libfb303" "leancloud.data.json" "clojure-http-client" "vertx-clj" "cljs-info" "org.clojars.mw10013/javaosc" "io.dominic/boot-snippets" "common.web-clj" "ring-gatekeeper" "org.clojars.automata/ddf.minim" "degree9/lounge.infra" "zmaril/titanium" "hiccup-font-awesome" "org.clojars.chapmanb/bigwig" "fogus/ring-edn" "org.clojars.mylesmegyesi/validator" "com.keminglabs/dubstep" "org.clojars.jmeeks/jfugue-with-musicxml" "tableflisp" "org.clojars.maravillas/ring-httpcore-adapter-gae" "pipejine" "org.clojars.asher/csv-to-json" "cljsjs/field-kit" "com.github.pmerienne/stormy-pythian-core" "antistock/zookeeper" "org.clojars.jcrossley3/poorpus" "fileape" "org.clojars.tomo/compojure" "mvxcvi/arrangement" "gocardless-clj" "hive/hive-exec" "fripon-dom" "thi.ng/fabric-core" "wikia/clj-aws-s3" "overtone/scsynth-interop-gui" "net.solicode/middlebrow-swt.cocoa.macosx.x86_64" "clj-tuenti" "timewarrior/clj-aws-s3" "http-kit.fake" "org.clojars.s450r1/dcm4che-tool-dcmmv" "org.clojars.adeel/clj-oauth" "yarec/clj-fn" "clj18n" "delegance" "circleci/congomongo" "mccraigmccraig/cassandra-thrift" "optimus-img-transform" "overtone.device.launchkey-mini" "lein-assemble" "kovasb/transduce" "im.chit/hara.io.watch" "boot-cljs-test/testem-runner" "per-ring-request" "clj-http" "clojunauts/postgis-jdbc" "org.clojars.cwalsh/too-hot" "lambdacd-lineup" "org.clojars.bothacker.jmonkeyengine3/jbullet" "org.clojars.knusbaum/restarts" "aaronbabcock/appengine-tools-api" "om-fireplace-brepl/lein-template" "csv2csv" "jogl/nativewindow" "org.clojars.jwr/swank-clojure" "lein-cljsasset" "clj-internationalization" "com.7theta/idem" "com.carouselapps/githubpage2html" "hazard" "org.clojars.giacinto/first" "pacer" "org.clojars.ddudey/jcurses" "xls-to-csv" "infer" "org.clojars.vishk/algotools" "org.mule.modules/commonretrypolicies" "org.clojars.stask/micro-middleware" "cljsjs/react-mdl" "euler" "lein-parent" "clarity" "green-tags" "datomic-geodb" "com.adambard.clj-http-lite" "org.clojars.nberger/boot-test" "tokomakoma123/shoreleave-remote" "org.clojars.calvin/too-hot" "philoskim/lein-vertx" "phoenix-api/lein-template" "cljs-painkiller" "org.clojars.hoangelos/jgroups" "org.clojars.bill/environ" "org.clojars.clizzin/migratus" "org.clojars.robertpfeiffer/compojure" "lein-testem" "form-juice" "cljsjs/benchmark" "org.clojars.nanonation/pedestal.app" "appengine-testing" "typeset" "org.clojars.agofilo/lobos" "com.zentrope/query-manager" "org.domaindrivenarchitecture/dda-tomcat-crate" "appcanary/lein-crustacean" "clj-aws" "org.maravillas/ring-httpcore-adapter-gae" "juxt.modular/bidi" "org.clojars.srid/core.incubator" "ajchemist/boot-figwheel" "t6/snippets-clearnlp" "circle/freeze-fn" "cljs-uuid" "com.palletops/hadoop-config" "org.clojars.chapmanb/sam" "org.bodil/cljs-nashorn-root" "spootnik/unilog" "org.clojars.leadtune/orolo" "synergyxm/clj-orient" "com.ebaxt/http-kit" "exodus" "rum-reforms" "incanter-zoo" "fluyt" "net.matthoyt/ring-cometd2-adapter" "clj-file-session" "seancorfield/boot-expectations" "org.flatland/schematic" "alexyakushev/lein-depgraph" "xml-sax" "ring/ring-jetty-adapter" "tools.namespace" "samsara/samsara-client" "jp.ne.tir/project-clj" "caribou/caribou-frontend" "sivajag.clj-records/clj-record" "org.clojars.smallrivers/pallet" "fm.mysql" "org.clojars.bouzuya/google-reader" "lein-idea" "davidwclin/configuron" "algetic" "bayesian-classifier" "debug" "im.chit/hara.checkers" "burningswell/http-kit-component" "clanhr/reply" "org.clojars.automata/mp3spi" "cereal" "com.flyingmachine/penny-black-core" "org.clojars.sergey-miryanov/ring-core" "cljsjs/react-bootstrap" "im.chit/purnam.common" "webjure/json-schema" "org.clojars.gcatlin/box-java-sdk-v2" "cljs-ol3js" "overtone/device.protocols" "ring-persistent-cookies" "org.clojars.sandropadin/temperature-conversion" "com.nervestaple/bishop" "org.clojars.dandorman/shoreleave-browser" "mmemail" "asfiled" "hoiio-clj" "org.clojars.ccfontes/korma" "clj-concurrent-cache" "clj-aws-auth" "philjackson/wordy-date" "org.clojars.ludothehun/ludoclojure" "com.gfredericks.forks.org.clojars.achim/multiset" "tawus/pedestal-shiro" "com.gfredericks.forks.clj-http-fake/clj-http-fake" "korma" "zipwhip" "nes/lein-template" "com.flipkart.flux/persistence-mysql" "org.clojars.sorenmacbeth/clojure-hbase" "assert-json" "blogure" "org.clojars.frozenlock/ring-tutor" "gui-diff" "taffowl/joplin.cassandra" "kapooya/kap" "org.clojars.mikeq/korma.incubator" "tailrecursion/hlisp-wigwam" "com.factual/factual-java-driver" "org.clojars.alexbaranosky/clj-aws-s3" "populaceio/bolt" "ring-transit" "org.clojars.nayshins/tictactoe" "fetcher" "com.backtype/dfs-datastores" "parenjin" "minisu.dropwizard/envvar-interpolation" "mailcheck" "dmohs/react" "org.clojars.lokori/uncomplexor" "caribou/clojure.walk2" "org.spootnik/pickler" "yokogiri" "lein-jammin" "com.redhat.qe/testng-listeners" "cljsjs/react-input-autosize" "clj-pipes" "subwatch" "org.clojars.stepugnetti/valip" "com.redhat.qe/extended-sahi" "me.raynes/laser" "com.flipkart.aesop/sample-mysql-mysql-blocking-bootstrap" "basic-web-me-template/lein-template" "clj-pt" "com.rallydev/jarvis-core" "cc.artifice/codox" "org.clojars.earthlingzephyr/clojurescript" "com.lyncode/jtwig-java6-legacy-jee" "com.flipkart.poseidon/service-clients-archetype" "omni" "org.clojars.blrm/ovirt.client" "event-fabric/api-client" "org.clojars.smee/camel-clojure" "distributed" "factual/s3-journal" "funcool/cljs-testrunners" "pokerepl" "im.chit/vinyasa" "channel2" "tesla-zookeeper-observer" "xst/common" "light-component" "thefreshdiet/nim-javelin" "org.clojars.razum2um/marginalia" "duct" "org.clojars.trptcolin/core.async" "stout" "marcliberatore.swing-utils" "jexi-date-formatting" "org.clojars.tangrammer/org.processing.video" "com.linkedin.databus/databus-group-leader-example" "sitemap" "org.clojars.guv/jppf-common" "ekimber/shiroko" "reagent-ajax/lein-template" "parseapp-cljs" "jiraph" "google_api" "com.gfredericks/clomp" "cljs-app/lein-template" "compojure-nginx-clj-docker-eb/lein-template" "clotool" "adzerk/boot-logservice" "io.github.emidln/storm" "basil" "org.getopt/lukeall" "midi-mash" "nginx-clojure/nginx-jersey" "gloss" "feign.ranger/feign-ranger" "org.clojars.rmoehn/guten-tag" "atlassian/docker-connect" "jogl/jogl-core" "boot-hiccup" "elephantdb/libthrift-finagle" "com.emidln/yesql" "pjstadig/scopes-magic" "yeller/closure-sourcemap" "prabhasp/c2" "edu.ucdenver.ccp/kr-sesame" "alandipert/yeti" "dmclj/json" "forms-example" "org.clojars.michaelsbradleyjr/liberator" "openxls" "org.clojars.pjb3/resque-clojure" "org.clojars.adamwynne/lein-thrift" "ciir/utils" "com.gfredericks/system-slash-exit" "vita-io/friend-oauth2" "org.clojars.samroberton/boot-reload" "lein-clr/lein-template" "mbuczko/categorizer" "luminus/ring-ttl-session" "com.joshuagriffith/periodic" "org.clojars.kovasb/store" "tie/tiesql-server" "gered/views-honeysql" "add-classpath" "org.clojars.ato/clojure-jsr223" "brilliantarc/singularity" "ninjudd/storage-atom" "org.clojure-android/tools.logging" "clj-redis-session" "degel/mummy" "tranchis/longan" "degree9/lounge-clj" "com.rometools/rome" "ibookng" "ledet/subversion-clj" "blackwater" "show-grid" "jark" "orchard" "clojure_web_ui" "pallet/lein-template" "com.layerware/hugsql" "gumvic/remlok" "listora/measure" "emf-xsd-sdk" "kibu/s3-beam" "pure-io" "unbot-slack" "org.clojars.zcaudate/fs" "cc.qbits/knit" "name.stadig/conjecture" "fbia-client" "org.clojars.bmabey/compojure" "org.clojars.technomancy/clucy" "adunit-shared" "matthiasn/systems-toolbox-metrics" "com.taoensso.debug/sente" "com.flipkart.aesop/data-layer-hbase" "ithayer/clj-ical" "lein-idefiles" "com.keminglabs/zmq-async" "joodie/feedparser-clj" "org.clojars.magomimmo/valip" "pandeiro/boot-cljs-repl" "clj-datastore" "edpaget/cljs-react-material-ui" "bcrypt-clj" "hiccup-table" "clojurithms" "proto-facade" "luminus-db" "com.flipkart/phantom" "abrade" "im.chit/hara.namespace.resolve" "cljv/clj-soy" "tikvah/commons" "basic-service/lein-template" "diamondap/clj-apache-https" "mvc-works/respo-client" "org.clojars.leanpixel/flex-auth-friend" "helmsman" "osmongo" "funimage" "me.shalakapatil/retest-failures" "org.bodil/error" "org.earthlingzephyr.re-frame/lein-template" "io.nervous/eulalie" "michaeldrogalis/rawr" "com.chartbeat.cljbeat/hll" "com.intception/config-reader" "astyx" "circleci/lein-jarbin" "com.andrewmcveigh/plugin-jquery" "org.convana/core" "deraen.forks/cljx" "circleci/lein-jartask" "clanhr-service/lein-template" "com.fireworksproject/cloudmill" "passport" "lein-sassc" "org.clojars.ecmendenhall/tictactoe" "catfood" "org.clojars.dbrown.clojars/test" "milesian/epi-component" "ru.prepor.component.ring" "ring-jdbc-session" "tranchis/muon-schemas" "sgr/sgr-mfcc" "io.aviso/twixt" "clj-geolocation" "install-checkout-deps" "grafter-url" "http-kit/dbcp" "com.franz/agraph-java-client" "lein-fore-prob" "mercury" "cloxp-cljs-repl" "elahti/clj-arnoldc" "org.clojars.slyphon/simple-xmlrpc" "pedestal-api" "net.reborg/fluorine" "couchdb-extension" "circleci/lein-daemon" "pushover-clj" "org.clojars.eduardoejp/clj-mandrill" "shopify/shopify-resources" "reagent-project/lein-template" "test.tree.jenkins" "css-validator" "jarohen.forks/clojurescript-build" "cljsjs/pubnub" "alxlit/autoclave" "instant-pdf" "cljsjs/facebook" "simplycredit/clj-common" "metosin/loiste" "calfpath" "samsara/samsara-core" "pawnshop" "com.leadtune/ehcache-dot-clj" "logback-bundle/json-bundle" "ike/ike.util" "paddleguru/clj-redis" "com.vgeshel/lamina" "coolant" "helpful-loader" "name.rumford/clojure-potrubi" "org.clojars.luminousmonkey/javajom" "clj-noir" "org.clojars.nanonation/pedestal.service" "visuflow" "batchloop" "se.fishtank/css-selectors" "shakkuri" "tailrecursion/javelin-clj" "cljsjs/google-platformjs-extern" "org.immutant/core" "marosoft-clj" "earthquick/netseisip" "com.lemondronor/turboshrimp" "leiningen-crate" "com.postspectacular/macrochrono" "tailrecursion/momentjs-2.6.0" "org.commos/service.react" "mixr" "arohner/lein-npm" "com.postspectacular/simplecl" "me.shenfeng/netty-http" "org.clojars.r0man/clj-yaml" "itext-min" "org.julienxx/clj-slack" "mccraigmccraig/cider-nrepl" "factual/honey" "is-prime" "clofire" "authenticator" "crache" "org.clojars.jcrossley3/tools.namespace" "rm-hull/jasentaa" "venue" "clojurewerkz/persephone" "org.clojars.nakkaya/jnativehook" "hylla" "net.colourcoding/ulisse" "incanter/arpack-combo" "while-let" "org.clojars.umutgokbayrak/clj-zemberek" "jimbru/ragtime.core" "thheller/clojurescript" "com.flipkart.fdp/fdp-irm-core" "org.clojars.brenden/logback-kafka" "deebee" "cljsjs/firebase" "zf/clostack" "org.clojars.oakes/autocomplete" "factorial" "lawrence" "com.jamiei/betfairsports" "io.dropwizard.discovery/dropwizard-service-discovery-client" "tracer-gui" "jimakusupa" "klang" "com.hmsonline.storm/storm-osgi" "com.ozjongwon/cljangular" "sigar" "org.martinklepsch/boot-gzip" "bilus/lein-release" "com.jamiei.slugify" "io.kimchi/cisd-base" "com.bluemontlabs/laser" "org.clojars.mkhoeini/router" "blank-zurb-website/lein-template" "camdez/sendgrid" "tandem" "clanhr/memory-gateway" "chiphat" "mustache.clojure" "boot/worker" "desktop-alert" "larva" "disclosure-clj" "clj-tokenizer" "str-named" "org.clojure-android/clojure-complete" "cljzjz/jszip" "juggler" "fagotto" "jsx-to-clojurescript" "web-search" "clj-jangosmtp" "faris/qed" "tair-repl" "cascalog-math" "clj-kannel" "enslin/lein-template" "secretshare" "mischov/boot-test" "ptaoussanis/deep-freeze" "org.clojars.paul.cdh/hadoop-tools" "osc-multitoggle" "me.frmr.tools/dstt" "org.clojars.chapmanb/htsjdk" "neo4j-clj" "pilaf" "ctx/redshift-jdbc-41" "com.ifesdjeen/cascading-cassandra" "com.palletops/bakery-web-app" "org.clojars.prepor/liqp" "org.clojars.reideltj/kinesis-storm-spout" "ezmq" "lazytest" "cljtang" "org.clojars.clojure-superfunmode/superfunmode" "booodl/stripe-clj" "chestnut-app" "org.clojars.charles-stain/jinput" "lein-thrush" "ring-logger" "pomjars" "io.mandoline/mandoline-sqlite" "com.velisco/halfbaked" "cljs-jquery" "frank" "org.rksm/system-navigator" "org.trpr/integration-rabbitmq" "mattgillooly/drake-mysql" "org.clojars.akcbryant/clojure-ttt" "org.clojars.krisajenkins/clj-oauth2" "im.chit/hara.time.joda" "omg-deutsch" "yleisradio/new-reliquary" "clj-bigquery" "org.clojars.marsliu/clj-parsec" "org.clojars.s450r1/dcm4che-tool-rgb2ybr" "com.github.vivekkothari/marathon-rangifier" "clj-libtcod" "org.clojars.kriyative/clojurejs" "org.clojars.jeffdik/lein-sha-version" "aatree/durable-cells" "org.clojars.nakkaya/subethasmtp" "com.hmsonline.bundle/curator-framework" "com.yetanalytics/clj-stripe" "org.joegallo.robocode/roborumble" "vercode" "filesystem-trie" "org.clojars.vitallabs/clj-icalendar" "org.clojars.tcrayford/lein-junit" "nicolasoury.random-hash-tries" "clj-maths" "netpyoung/fb-sdk-cljs" "cljsee" "backtype/twitter4j-core" "jdbc-fu" "com.livingsocial/lein-dependency-check" "least-recently-used-map" "sandbar/sandbar-core" "org.clojars.s450r1/dcm4che-tool-dcmmwl" "ninterpolate" "lein-cssgenbuild" "version-string" "io.nervous/kvlt" "org.clojars.qubbyhole/storm-state" "leiningen.core.project/elephantdb" "lein-check-file" "clarp/lein-template" "com.rmoquin.storm/storm" "org.shxiao/clojureql" "tolitius/boot-stripper" "cljsjs/jquery-ui" "org.clojars.hoeck/apache-pivot-core" "onyx-etl/lein-template" "confschd" "cljsjs/incremental-dom" "incanter/excel" "crudite" "fast-zip-visit" "tsmarsh/stl-collector" "native-deps" "thunknyc/adtech-macros" "boot-app/lein-template" "com.apa512/rethinkdb" "org.clojars.s450r1/dcm4che-iod" "ibdknox/clojurescript" "tracer" "lein-figwheel" "org.curvelogic/ephemera" "rpas-cloud-sdk" "im.chit/hara.protocol.data" "crafty/lein-template" "com.huaban/clj-jb" "org.drift-db/drift-db" "xvsy" "org.clojars.wjlroe/hipchat" "clojure-data" "carthy/low" "org.clojars.hgavin/clojure-neo4j" "benrikuro" "clj-growlnotify" "keorn/loom-gorilla" "clojuresque/nrepl" "lein-pallet-release" "revise/protobuf" "pallet" "diff-match-patch-clj" "org.clojars.nayshins.tic-tac-toe-engine.libs/tic-tac-toe-engine.jar" "units" "iris" "lein-bikeshed-ona" "jepsen.zookeeper" "bronsa/blind" "org.clojars.raywillig/geo-graph" "ring-clj-params" "lobos" "carry-debugger" "yuhta/check-gmail" "org.clojure/data.finger-tree" "googlecloud/core" "clj-zmq" "cljsjs/boot-cljsjs" "org.hypertable/hypertable" "com.2tothe8th/routing" "hdfs-clj" "sv/blob-storage" "korma-encrypted" "com.aerospike/aerospike-client" "ring-piggieback/lein-template" "djwhitt/boot-utils" "polymer.elements/support" "com.gfredericks/goog-integer" "omdev" "skinney/hugsql-adapter-postgres-async" "carry-reagent" "clj-return-from" "name.rumford/clojure-contracts-maps" "zilti/clojstrap" "edocu/timbre" "com.christopherdbui/simple-authentication" "de.kotka/transmuter" "pliant/configure" "lein-precate" "org.clojars.vgeshel/http.async.client" "mitchelljthomas/activemq-protobuf-sandwich" "meitner" "org.clojars.fivepapertigers/clj-plivo" "org.clojars.simonjagoe/eveapi" "lein-ivy" "safe-rw" "com.flipkart.aesop/sample-client-cluster" "org.timmc/arborist" "clj-ldap-auth" "failjure" "org.clojars.aperiodic/lazybot" "com.ambrosebs/schema-typer" "com.literallysoftware/paprika" "org.clojars.jaxyz/shoreleave-remote" "pseidon-kafka" "juxt.modular/maker" "ymilky/franzy-avro" "clj-ironcache" "pataprogramming/loom-jung" "lein-coffee" "org.jacop/jacop" "vijual" "hyperion/core" "org.clojars.yayitswei/socket.io-client" "lein-getdown" "pitbull" "shadertone" "org.trpr/example-batch-ha" "ema" "org.flatland/decaf" "org.clojars.originalsurfmex/processing-libs" "lein-exec" "cookbook-sample-template-clojure-cookbook/lein-template" "org.clojars.ghoseb/memcached" "adapter-db" "org.clojars.zh217/clj-webdriver" "gapedi" "tetrisql" "cryogen-markdown" "org.clojars.zenbox/mailchimp" "org.joegallo.robocode/robocode.ui" "org.hypercrud/hypercrud.ssr" "jlk/plot" "friend-authid" "laczoka/clj-pdf" "org.clojars.stain/owlapi-jsonld" "control" "org.conjure/conjure-script-model" "net.sourceforge.saxon/saxon" "com.flipkart.aesop/sample-diff-relay" "gameclosure/clj-mixpanel" "cljs-ajax-fork" "clojure-powerloom" "leiningen-run" "com.palletops/runit-crate" "com.chartbeat.opentsdb" "lein-vimclojure-ngserver" "timothypratley/patchin" "lein-bin" "org.clojars.ctdean/htmlcleaner" "metrics-clojure" "jtoy/pallet-hadoop" "com.offbytwo/jline" "steve/lein-template" "endophile" "org.clojars.miguno/metrics-core" "com.lemondronor/turboshrimp-xuggler" "org.clojars.dwwoelfel/osp" "machine" "org.apache/wiki" "eightnotrump/uncore" "mavericklou/clj-facebook-graph" "torus-pong" "ghostandthemachine/fetch" "com.gfredericks/haystack" "cn.leancloud.diamond/diamond-server" "baby" "dgellow/mdmorph" "org.clojars.ideal-knee/dommy" "mixradio/instrumented-ring-jetty-adapter" "com.shareablee/elastisch" "org.timmc/lein-otf.loader" "hashids" "org.clojars.philandstuff/grid" "pocket" "parallelcolt" "clj-toml2" "org.clojars.originalsurfmex.processing/jogl-all" "com.vijaykiran.processing/org.processing.pdf" "clj-pingpp" "midje-html-checkers" "lein-gen/generators" "org.clojars.john-lawrence-aspden/factorial" "org.clojars.osbert/flambo" "com.google.appengine/appengine-local-runtime-shared" "com.carouselapps/jar-copier" "mapr-spout" "scott-gerring/gaem" "org.onyxplatform/lib-onyx" "com.backtype/dfs-datastores-cascading" "lein-cljp" "bdisraeli/rotary" "org.clojars.jds02006/frontmatter" "polymer.elements/gold" "lein-crate" "org.clojars.maravillas/ring-core-gae" "pazustep/lein-sassc" "reverie-blog" "com.fasterxml.jackson.core/jackson-core" "org.clojars.jaley/lein-test-out" "org.clojars.manicolosi/clj-toml" "succession" "environs" "org.clojars.uhef/weasel" "bitfinex" "clavatar" "org.clojars.robertpfeiffer/vijual" "net.nanonation/lein-marginalia" "com.linkedin.databus/databus-bootstrap-producer-impl" "io.forward/influx" "penumbra/lwjgl" "lazyspec" "ai.wadeandwendy/lein-s3-wagon-vault" "antler/caribou" "chlorine/prelude" "aviary/aviary-core" "com.envjs/js" "clj-cassandra" "stch-library/glob" "cljs-audio-utils" "org.clojars.wambat/humane-test-output" "binaryage/chromex" "fullcontact/full.rollbar" "cahoot/lein-template" "org.clojars.sids/congomongo" "im.chit/hara.data.complex" "org.clojars.esdee/weasel" "clojure-lanterna" "egamble/let-else" "org.jordanlewis/data.union-find" "ibdknox/clojure" "com.kaicode/tily" "com.lemonodor.viterbi" "im.chit/hara.collection" "ildar/vdom-to-html" "closure-clj" "org.clojars.tdavis/kitchensink" "cljsjs/vega" "exicon/boot-nix" "lein-newnew" "emem" "com.goodguide/datomizer" "org.clojars.ato/scriptjure" "simple-validator" "org.clojars.rhg135/marked4j" "sicia/lobos" "domesday" "jogl/jogl-glu-tess" "unicode-math" "diff-eq" "cascalog-nutch" "com.taoensso.forks/lein-cljsbuild" "com.markgunnels/clutch" "digitalocean" "io.dropwizard.msgpack/msgpack-bundle" "com.flipkart.fdp/fdp-irm-clients" "org.sift/batch" "kirasystems/jodconverter-core" "allergy-template/lein-template" "org.msync/properties-clj" "furikuri/java-clj-parser" "aeronotix/crap" "org.clojars.racoon/various" "date4j" "vaulted/vaulted-clj" "fuzzy-string" "bowerick" "thieman/lein-marginalia" "org.clojure/data.zip" "sixsq/boot-deputil" "domina" "org.clojars.jasonjckn/scribe-thrift7-bindings" "org.rksm.system-navigator/system-navigator" "maven-clojure/plexus-clojure-factory" "alter-cljs" "htmlexpr" "symbol-analyzer" "org.clojars.mmcgrana/lein-javac" "com.wikia.commons/utils" "habitat" "otto-de/lambdacd-lineup" "com.roomkey/annotate" "mecha" "org.clojars.morgawr/slick-util" "ctx/scalyr-log4j" "net.cgrand/xforms" "org.clojars.gclapperton/views" "clj-mma" "clojuredocs/extractor" "ragtime-gen" "org.clojars.the-kenny/clojure-http-client" "cljito" "clojurewerkz/archimedes" "deview/deview-server" "cljsjs/d3geo" "prepor/quiescent" "jogl" "org.cloudhoist/clojure-dev-box" "opengl/jogl.all" "jstrutz/hashids" "depot" "fortress-ring-adapter" "com.emidln/raven-clj" "vindaloo" "listora/log-format" "org.bahmni/clojure-test-datasetup" "elimai/lein-template" "matthiasn/http-kit" "org.clojars.puppetdb/postgresql" "com.linkedin.databus/databus-core-container" "stringer" "coci/coci-form" "com.andrewberls/clj-json" "sunrise" "rm-hull/dommy" "misaki-clostache" "tranchis/photon-cassandra" "lupapiste/lein-nitpicker" "com.danboykis/lein-rpm" "testng-bigtest" "metadata" "lein-cascalog" "fogus/ditaa" "jota" "egn" "org.clojars.krish/too-hot" "org.routom/routom" "com.flyingmachine/penny-black-apache-commons" "aoe" "lein-ragel" "csq" "com.github.kyleburton/logback-riemann-appender" "com.hmsonline.storm/storm" "gered/clj-browserchannel-jetty-adapter" "amon-log" "org.clojars.carterza/salesforce" "me.shenfeng/async-ring-adapter" "net.mikera/mikera" "maxplj" "substream" "phantom-spotter" "ar-drone" "org.clojars.s450r1/dcm4che-tool-dcmecho" "dieter-handlebars" "yle-clj-common" "lein-overt" "splendid/ml" "lein-cider" "nsfw" "com.keminglabs/jzmq-osx64" "micrub/clj-todo" "org.clojure/math.combinatorics" "async-amqp" "com.dzer6/friend-oauth2" "cloverage" "leiningen-core" "org.clojars.otabat/rxclojure" "ring/ring-httpcore-adapter" "io.kimchi/cisd-jhdf5-native-deps-test" "cljsjs/jsdiff" "org.clojars.ptaoussanis/clj-serializer" "precursor/react" "pedestal-swagger" "lsb-login-pb" "readabl/speling" "analytics-template/lein-template" "tranchis/photon-mongo" "datomico" "overtone/clj-scenegraph" "memorize-clj" "tonsky/lein-figwheel" "sv/system.rpc" "org.clojars.ah45/clj-ldap" "answer-factory" "getscale/reagent-serverside" "clj-hector" "spectator" "org.clojars.boechat107/eye-boof" "cc.qbits/jilch" "com.guokr/simbase-clj" "es.corygil/biomart-client" "compojure-gae" "simple-time" "org.cloudhoist/pallet-lein" "com.teachscape/etlio" "ona-viewer" "soap01" "misaki/lein-template" "tempcreds" "me.rossputin/total-recall" "fm.namespaces" "gsnewmark/ring-pratchett" "io.aviso/pretty" "pipes" "org.clojars.nakkaya.javax.mail/smtp" "binrec" "mvxcvi/multihash" "org.clojars.quoll/turtle" "segments" "functionalbytes/clj-ip" "solussd-utils" "jessitron/var-schema" "org.clojars.cais/lein-run" "onaio/slickgrid-cljs" "bronsa/lein-swank" "clj-markup" "com.flybe/socket-rocket" "org.clojars.mmcgrana/ring-jetty-adapter" "clojurebridge/lein-template" "clanhr/auth" "lein-script" "degree9/firebase-cljs" "gssrden" "colinkahn.ui.scroll-list" "de.otto/oscillator" "lein-test-from" "clj-text-decoration" "org.clojars.dbasch/bip38" "org.sharetribe/dumpr" "clj-xmemcached" "group-redis" "org.clojars.siscia/clj-stripe" "org.immutant/caching" "itext" "lively" "com.flipkart.aesop/sample-memory-relay" "reverie/batteries" "gov.usgs.eros/lcmap-see" "cassandra-wrapper-deps" "ring-hmac-check" "com.taoensso/faraday" "oocsi" "org.clojars.rlm/nailgun" "adamwynne/openxls" "org.clojars.cuccu/mathmadness" "supernal" "io.github.emidln/cld" "org.clojars.brenden/metrics-parent" "butler" "zjhmale/ring-swagger" "com.xnlogic/system.check" "hive/hive-anttasks" "clango" "commandlineapp/lein-template" "clj-gntp" "cljs-npm/lein-template" "interval-tree" "org.om/om" "org.nakkaya.robocode/picocontainer" "alandipert/kawa" "org.clojars.tnoda/incanter.xlsx" "cascalog/carbonite" "org.clojars.pallix/xerces" "au.com.silverpond/hat" "sebastiansen/lobos" "whodidthis/cljs-uuid" "me.panzoo/watcher" "com.github.pmerienne/trident-extended-state" "lein-maven" "yieldbot/flambo" "adzerk/zerkdown" "circleci/bond" "org.clojars.alexnixon/data.xml" "overtone/libs.handlers" "sv.blob-storage/gcloud-storage" "org.clojars.lambder/pedestal" "lazy-bucket" "ehashman/lein-sass4clj" "antler/lein-caribou" "erdos.fun" "com.flipkart.aesop/sample-hbase-relay" "org.clojars.mmcgrana/clj-http" "org.ponimas/url" "lein-scipt" "junegunn/grouper" "lein-package" "jarohen/clidget" "asher/csv-to-json" "tailrecursion/boot-cljs-repl" "kixi/amon-schema" "nrepl-cljs-middleware" "lein-appengine" "jokimaki/ipv4" "org.clojars.lauri/too-hot" "jersey-zoo-clj" "hotbits" "fressian-clojure" "ring.middleware.mime-extensions" "org.clojars.jzh/lein-cuke" "org.clojars.sickcuchulainn/shoreleave-remote-ring" "unbot-core" "kaleidocs/clj-excel" "org.clojars.michaelr524/elastisch" "org.clojars.jasonjckn/kafka_2.9.2" "org.knowl-edge/rdfa" "org.clojars.ghoseb/redis-clojure" "org.clojars.qertoip/istext" "schadenfreude" "com.kurogitsune/logicadb" "inari" "liftoff/puddle" "tableformatter" "yleisradio/relastic" "gazeta" "org.conjure/conjure-script-flow" "info.sunng/ring-jetty9-adapter" "hlisp/lein-template" "tailrecursion/boot" "org.clojars.atroche/clj-webdriver" "cljsjs/responsive-nav" "lein-watcher" "com.bigml/clojure-hbase" "org.nakkaya.robocode/robocode.ui" "formidable" "clojure-useful" "noir-cljs" "antistock/db" "gorilla-indented-html-renderer" "autoclave" "prevayler-clj" "net.solicode/clj-thrust" "yummy.json/json" "org.clojars.sickcuchulainn/shoreleave-remote" "clj-asterisk" "org.clojars.originalsurfmex.processing/gluegen-rt-natives-windows-amd64" "seancorfield/boot-new" "com.yellerapp/clj-tuple" "frankiesardo/boot-spurs" "left-pad" "freemarker-clj" "sphynx" "katello.auto" "mies-om/lein-template" "clj-tair" "org.platypope/parenskit" "com.keminglabs/pcr" "crawler" "dbscan" "jarohen/phoenix.runtime" "modest-let-flow" "polymer/neon" "java-osc" "tappan/matrix" "org.clojars.hozumi/clj-glob" "tranchis/mochi" "org.clojars.micha/boot-cp" "html-parser" "kibu-australia/lobos" "uochan/watchtower" "lein-repl13" "interval_tree" "org.clojars.gregburd/cupboard" "cloc" "gntp" "org.clojars.tuddman/clj-fix" "rojat-arrhttp" "pipeline" "quiescent-thib" "jvyaml" "com.gfredericks.forks.mvxcvi/puget" "grid2d" "com.palletops/pallet-aws" "zuldi/ianywhere" "clojuresque/scriptoresque-base" "lein-resources-collector" "com.flipkart.aesop/runtime-blocking-bootstrap" "org.clojars.jaen/closure-compiler" "standard/demo" "org.clojars.michaelr524/sente" "cadastre" "lein-memcached" "ibdknox/ring-gzip-middleware" "fungp" "cider-ci/open-session" "org.clojars.rosado/yada" "buddy/buddy-auth" "penumbra" "org.clojars.nmurray/tokyocabinet-java-native-deps" "org.codehaus.mojo/adtech-us-export-policy" "laboratory" "ringfinger/mailfinger" "com.kurogitsune/salt" "cljsjs/jqconsole" "tubax" "lupapiste/oskari" "aviary/aviary-watch" "pe-fp-app" "ilshad/generations" "clj-stockfighter" "trybeee/protobuf-java" "io.nervous/fink-nottle" "org.clojars.hozumi/mongodb-session" "ryanmcg/kibit" "org.clojars.gardendb/gardendb" "org.clojars.hiredman/compojure" "eventsourcing" "file-change-notifier" "clj-redis-session-onaio" "fads" "overtone/clj-scsynth" "org.funzt/tabinski" "org.immutant/immutant-transit" "chronos-client-clj" "stellc" "dgrnbrg/metrics-clojure" "version-suffix-plus" "clojurewerkz/machine_head" "cljs-multitouch" "kixi/common" "org.clojars.pallix/wizard" "ztellman/lein-cljfmt" "org.clojars.pgdad.zoo-leader" "org.clojars.ogrim/organum" "congomongo-mq" "clojure-couchdb" "burningswell" "org.onyxplatform/onyx-metrics" "tailrecursion/clojurescript" "net.java.dev.jogl/jogl-macosx-ppc" "parjec" "cljsjs/react-timer-mixin" "paneer" "taffowl/faraday" "ring-jetty7-adapter" "fidjet" "yayitswei/warpcore" "org.clojars.aperiodic/hadoop" "org.clojars.chaitan94/too-hot" "synfnetic/catalyst" "jeroenvandijk/avro-scheme" "org.clojars.cbp/proto-extensions" "org.clojars.ashenwolf/clj-gae-datastore" "juno" "com.lemondronor/ads-b" "org.clojars.runa/cliopatra" "robbit" "com.ericsson.otp.erlang/otperlang" "lein-notes" "clj-template" "ringmon" "kindlychung/incanter-pdf" "org.gostrategy/clj-go" "yalh/boot-sassc" "overtone/sclang-interop-linux-x86-common" "speclj-growl" "sliver" "ontodev/excel" "tiesql" "cljsjs/pusher" "clj-pingback" "yogthos/lein-sass" "galdolber/j2objc_annotations" "org.clojars.pallix/batik" "asm/asm-commons" "cirru/sepal-repl" "ginsite" "protogen" "pragsmike/lein-xjc" "lighthouse" "degree9/semui-hl" "containium.systems/elasticsearch" "devn/vision" "org.clojars.greggz/re-com" "clygments" "watershed" "dmohs/sql" "thi.ng/macromath" "diogok/cljts" "myguidingstar/clansi" "funcool/zaek" "cascalog/cascalog-lzo" "danielsz/boot-autoprefixer" "org.clojars.jozias/codox.leiningen" "org.clojars.jwhitbeck/at-at" "org.conjure/conjure-full" "boxuk/fruity" "duct/generate" "paren-soup" "yayitswei/ambly" "bbirec/clj-oauth2" "sonian/lein-template" "mrmcc3/boot-lessc" "scott.gerring/appengine-magic" "org.cloudhoist/pallet-hadoop" "lein-githooks" "org.clojars.sandaemc/ini4j" "org.clojars.ed_sumitra/clojure-webmvc" "com.climate/ring-jetty-adapter" "snmp4clj" "listora/ring-google-site-verification" "com.enterpriseweb/clj-java-json-utils" "webapp" "java-piccolo2d-svg" "org.clojars.achim/multiset" "ez-web" "com.jjttjj/clj-ib" "srnp/mailbox.client" "waltz" "lowline" "hdom" "org.clojars.paomian/ring-jetty-hystrix-adapter" "prismatic/dommy" "kibu/react-select" "trevorbernard/metrics-core" "clj-getrusage" "org.clojars.tcrawley/sente" "uk.org.alienscience/cache-dot-clj" "org.clojars.pw4ever/lein-droid-for-tbnl" "test2-autorunner" "zenedu/testquest" "jarohen/embed-nrepl" "www/lein-template" "org.syslog4j/syslog4j" "datomic-free-0.8.3335" "kanej.me/digitalocean" "iloveponies.tests/recursion" "com.shareablee/csv-export-bolt" "com.gfredericks/lein-merge-services" "primitive-math" "juno/juno-app" "mies/lein-template" "cljsjs/pdfjs" "martinklepsch/boot-cljs" "dsann/dsann-boot-eclipse" "lein-feeds2imap" "launchkey-mini" "org.clojars.springify/lein-cuke" "yeller-java-api" "customcoll" "emu6502" "org.clojars.wjlroe/clj-datetime" "dr-evil" "lein-coverage-utils" "dire" "yarec/clj-time" "danielsz/boot-shell" "atunit" "zindlerb-template/lein-template" "org.clojars.d-cent/stonecutter-oauth" "com.gfredericks/cljs-numbers" "com.iterinc/web-file" "com.hmsonline.storm/storm-features" "hanami" "gugus" "clj-det-enc" "com.palletops/discovery-api-runtime" "org.clojars.therandom9/cljs-clojars" "parinfer" "org.clojars.nakkaya.jmonkeyengine/jme-model" "monte" "com.deusdatsolutions/travesedo" "summarizer" "lein-alembic" "overtone/scsynth-interop-linux-x86-lucid_common" "org.clojars.krish/days" "org.codehaus.mojo/adtech-builtin-serialization" "crypto-keystore" "org.clojars.isaac-zeng/watchservice" "com.curiosity/clj-aws-s3" "amalloy/clojure-hbase" "collectible" "clj-ahttp" "org.clojars.hozumi/lein-mixtest" "rails-session-clojure" "org.clojars.pmbauer/clojurescript" "com.devinwalters/clj-aws-s3" "incise-markdown-parser" "tangrammer/aero" "dragonmark-util" "strongh/data.priority-map" "name.stadig/clojure-test" "netizer/relational-mapper" "org.flausenhaus/clj-rocksdb" "onyx-amazon-sqs" "org.clojars.bcambel/hackersome" "skyscraper" "quantum-ext/figwheel" "element84/vdd-core" "taxidermy" "cljsbuild-template/lein-template" "knockbox" "lein-clojars" "slagyr/lein-cljsbuild" "gov.nih.nlm.nls.lexaccess/lexaccess-api" "org.clojars.dth/lein-js" "jp.taka2ru/enlive-utils" "ibdknox/clj-record" "org.clojars.ninjudd/data.xml" "noir" "com.mdrogalis/onyx-metrics" "clj-poolman" "org.trpr/batch-core" "js-gen" "doppel/lein-template" "dhruv/ring-secure-headers" "org.clojars.wgb/port-kafka" "org.clojars.zahardzhan/congomongo" "org.clojars.aaronc/google-closure-library" "org.clojars.danburton/too-hot" "clj-chess" "org.clojars.thnetos/opennlp" "lein-cprint" "com.lispcast/org.apache.commons.lang" "csp-compiler" "cljsjs/kemia" "named-re" "orderly/orderly-examples" "com.linkedin.databus/databus2-example-client-pkg" "org.clojars.strad/nginx-crate" "org.clojars.eschon/url" "org.clojars.blucas/quote-loader" "org.clojars.s450r1/dcm4che-tool-logger" "clj-lmdb" "degree9/lounge.drawer" "im.chit/repack.advance.web" "turmeric" "tamaki" "com.flipkart.poseidon/api" "counsyl/vault-clj" "causeway-template/lein-template" "dwwoelfel/inliner" "lein-modules" "roxxi/clojure-hadoop" "ragtime-c.j.j-0.3.3" "serpent-tack" "cgore/clojure-msgpack" "org.tobereplaced/nio.file" "clj-eden-lib/lein-template" "org.pingles/protobuf" "friend-oauth2" "shtrom-client" "org.clojars.aseipp/jnlp" "crackle" "cljsjs/highlight" "ca.takeoutweight/clojure-scheme" "com.ninjudd/react" "helpshift/daifu" "postgres-pool" "ru.petrsu.nest/yz" "cadastro-de-pessoa" "mutant" "org.clojars.mikejs/ring-gzip-middleware" "burningswell/db" "clobal" "savage" "storm/storm-netty" "lein-types-coverage" "avenir" "jogl/jogl-glu-mipmap" "nightcode" "org.clojars.hozumi/hiccup-bridge" "coendou" "lein-karma" "hier-set" "org.clojars.boymaas/lein-voom" "com.googlecode.efficient-java-matrix-library/ejml" "clojurewerkz/eventoverse-client" "ccw/lein-ccw-deps" "tyrion" "duelinmarkers/insfactor" "org.flatland/ring-middleware-format" "jumblerg/ring.middleware.cors-ie" "kindlychung/incanter-core" "async-watch" "org.clojars.technomancy/jmdns" "org.rerenderer/lein-template" "clj-sql-builder" "herolabs/apns" "org.clojars.runa/metrics-clojure" "zaphod" "org.clojars.mkhoeini/test-clojar" "bikeshed" "pe-datomic-utils" "org.clojars.icylisper/storm-redis" "org.clojars.originalsurfmex.processing/gluegen-rt-natives-linux-amd64" "incanter/parallelcolt" "pallet-fsm" "org.clojars.paul/java-beanstalk-client" "kosmos/kosmos-web" "backtype/cascading-thrift" "org.clojars.thejohnnybrown/ring.middleware.etag" "ragtime-c.j.j-0.3.3/ragtime.core" "org.clojars.gzeureka/javapns" "physiodb/datomic-transactor-free" "com.yeller/clojure" "clj-zipkin" "farbetter/utils" "org.clojars.jhinrichsen/java-runner" "transliteration.srp" "com.ninjudd/eventual" "edw/scallion" "org.clojars.semperos/enlive" "koan/lein-template" "org.clojars.lsankar4033/utils" "clj-dcss" "edgrab" "clogis" "johncowie/thingies" "org.clojars.ordnungswidrig/congomongo" "org.clojars.alireza/summarizer" "nav" "fullcontact/full.dev" "reagent-app/lein-template" "org.clojars.yayitswei/java-channels-api" "org.zalando/friboo" "org.clojars.r0man/hiccup" "org.clojars.siscia/clj-facebook-graph" "nl.zeekat/lein-git-version" "foundation-app/lein-template" "sv/system.datomic" "java_server" "ai" "org.trpr/runtime-core" "kixi/incanter-pdf" "org.clojars.philippkueng/watney" "com.sprunck.druid/riemann-emitter" "csource" "appkit/lein-template" "com.flipkart.hydra/hydra-task" "org.jdesktop.jdic/jdic.stub.mac" "caribou-frontend" "clojush.zip" "org.clojars.doo/hiccup" "crossref/cayenne" "digitalize" "clj-spawner" "ring-gae/ring-httpcore-adapter-gae" "clj-thymeleaf" "org.clojars.rhg135/lein-hg" "org.clojure-grimoire/lib-grimoire" "ofo-utils" "org.clojars.cvkem/jsondiff" "com.balabit/balabit.blobbity" "lein-figleaf" "cjdnsadmin-clj" "lein-binplus" "hunspell-stemmer" "lein-fw1" "tree-config/commons-config" "lein-lessjs" "juxt.training.exercises.webapp/lein-template" "web-app-starter/lein-template" "clj-aws-s3-fork" "waller" "rwilson/ring-cors" "org.clojars.weavejester/figwheel-sidecar" "com.c-oei/babble" "jwnl" "com.narkisr/java.data" "com.gfredericks.forks.org.clojure/test.check" "clj-yelp" "slick-util" "factual/rocksdbjni-all" "cljsjs/dom-delegator" "crisptrutski/boot-cljs-test" "org.clojars.strongh/storm-drpc" "language-support" "lein-ns-dep-graph" "clojure.sql" "com.andrewmcveigh/very-fine-uploader" "clj-nsca" "datomic-free-transactor" "robert/hooke" "lein-servlet/adapter-jetty9" "datadog" "lein-sub" "com.novemberain.hop/hop" "puppetlabs/ssl-utils" "bwatchservice" "nreplds" "jimbru/ragtime.lein" "ru.prepor.component/ring" "ion/cuss" "john-wayne" "org.clojars.making/compojure" "org.clojars.dparis/dire" "org.clojars.russpowers/component" "meridian/shapes" "colinkahn.flux.dispatcher" "limelight" "clojurecheck" "restarts" "com.infectiousmedia/gregor" "net.mikera/orculje" "clj-barcode" "org.clojars.codebrickie/eureka-client" "bron-kerbosch" "com.middlesphere/infini-clj" "deep-freeze" "walton" "outpace/config" "de.kotka.test/clojuresque-test-project" "ring-json-response" "reloaded-uberrepl/lein-template" "hdevalence-clj-aws-s3" "org.clojars.ogrim/korma" "org.clojars.mavbozo/lein-init-script" "org.clojars.skv/proscene" "com.flipkart.fdp/fdp-irm-kafka" "gengoclj" "net.sf.sahi/sahi" "io.replikativ/kabel-auth" "clj-jdbcutil" "clj-bwa" "io.pedestal/pedestal.service" "lib-noir-lite" "com.shopstyle/shopstyle-api-client" "org.clojars.prepor/vertica-jdbc" "annealing" "org.tobereplaced/lettercase" "honeysql" "uswitch/ring-riemann" "cljsjs/pixi" "yummy.log/log" "com.ebaxt.enlive-partials" "org.clojars.harob/korma.incubator" "qbits/tardis" "cryogen-core" "currencydetect" "safely" "jogl/nativewindow-awt" "de.otto/tesla-mongo-connect" "clj-ironmq" "samsara-mqtt" "org.clojure-grimoire/simpledb" "aleph/core" "edpaget/clj-mesos" "rockpick" "asimjalis/useful" "clojusc/ring-xml" "org.clojars.cvillecsteele/lein-git-version" "uochan-heroku/lein-template" "org.pingles/rotary" "org.clojars.yanatan16/cats" "bgzf4j" "net.java.dev.scenegraph/scenegraph" "calx" "speclj-notify-osd" "map-helpers" "dgellow/boot-files" "sparse" "avant/s3-wagon-private" "martian" "org.clojars.s450r1/dcm4che-base64" "new-reliquary" "antler/clj-aws-s3" "levels" "clj-amqp" "trove" "jeroenvandijk/lein-cucumber" "storm-project/lein-template" "org.clojars.ghoseb/lein-midje" "qdn" "com.redhat.qe/assertions" "reagent-material-ui" "formar" "trptcolin/versioneer" "org.clojars.raynes/lein-difftest" "hiccup" "com.tail-island/twin-spar" "com.linkedin.databus/databus-group-leader-impl" "org.clojure-android/clojure" "docker" "org.clojars.tuddman/fix-translator" "clearman" "com.lemonodor.kribitz" "com.vitalreactor/probe" "lein-run" "lein-webrepl" "karras" "entrepreneur-first/auth0-cljs" "jarohen/bounce" "espalier" "elephantdb/elephantdb-bdb" "devth/slack-rtm" "com.gfredericks/repl-utils" "org.clojars.radaczynski/geoscript" "org.clojars.dth/clojure-opennlp" "com.olauzon/accumulator" "joodo/lein-joodo" "netizer/relational_mapper" "kixi/incanter-svg" "com.novemberain/quartz-mongodb" "org.clojars.emil0r/hiccup" "ring-common" "convert-ids" "cconf" "supersport" "stch-library/util" "com.flipkart.databuilderframework/databuilderframework" "acyclic/utils" "amalloy/s3-journal" "net.phobot.datomic/seed" "graphtastic" "sv/gcloud.metadata" "org.clojars.paraseba/ring-servlet" "clojuresque/clojuresque-extras" "org.clojars.ardumont/rxtx-linux-native-deps" "org.clojars.brian-dawn/orchid" "afrey/ring-html5-handler" "oiiku-data-validation" "lein-nodisassemble" "listora/rabbitmq-component" "quil/processing-core" "de.undeadco.ticking/sock" "sim-test/lein-template" "org.domaindrivenarchitecture/dda-mysql-crate" "org.clojars.jsefler/sm" "uncomplicate/neanderthal-atlas" "name.stadig/grappa" "com.redhat.qe/jul.test.records" "pseidon" "fullcontact/full.aws" "antler/commons-io" "net.polyc0l0r/boltzmann" "jarohen/lein-nomad" "keyczar" "kosmos/kosmos-hsqldb-server" "jnetpcap" "heroku/lein-template" "org.clojars.jyaan/slick-native" "org.clojars.djwhitt/clojure-couchdb" "monome-serial" "net.cgrand/seqexp" "org.clojars.canweriotnow/clj-pam-native-deps" "org.clojars.gilbertl/mongo-java-driver" "sparx/kits" "malcolmsparks/tools.nrepl" "org.clojars.starry/clj-forex-utils" "gmapscljs" "stefon-datomic" "net.intensivesystems/mini-kanren" "com.gfredericks.forks.com.keminglabs/reflex" "de.find-method/funsig" "org.clojars.maoe/funky" "simple-schema" "org.clojars.meeh/streaming" "org.clojars.cais/clojure-twitter" "lein-repetition-hunter" "cas-single-sign-out" "arse" "org.clojars.cwolfe/oauth-client" "circle/salesforce" "shale" "clj-nio2" "infinitelives.utils" "affinis" "org.hugoduncan/core.logic" "net.java.dev/gluegen-rt" "sprsquish/ring-finagle-adapter" "fuziontech/geocoder-clj" "selfsame/dollar" "org.clojars.osbert/re-com" "bloom" "sv/system.core" "org.clojars.sbowman/clj-apache-http" "kidpollo/sql" "lein-test-out" "datalog" "clj-pail" "macroz/search" "org.clojars.vaughan/jzmq" "clj-stomp" "crate-bind" "hypower-org/watershed" "org.clojars.arohner/compojure" "afterglow" "org.clojars.compuwizard123/storm-kafka" "com.redhat.qe/tcms" "my-compojure" "allgress/cereus" "fogus/lexical-chocolate" "org.clojars.joshdover/clj-kafka" "com.report.engine/core" "org.clojars.benbos67.estimate" "tailrecursion/lein-proxy" "dmohs.cljs-react/lein-template" "mschuene/core.matrix" "me.vedang/bloomclj" "ataraxy" "org.clojars.kyleburton/clj-xpath" "gov.usgs.eros/lcmap-rest" "dorothy" "toolbox" "com.redhat.qe/bugzilla-testng" "keepsake" "mars0i/clatrix" "cljsjs/to-markdown" "primrose" "ritz/ritz-debugger" "org.clojars.mjul/lein-cuke" "gettext" "me.maverickbozo/shoreleave-core" "org.clojars.flatland/tools.namespace" "datamaps" "ircparse" "defurred" "org.clojars.s450r1/dcm4che-core" "io.mandoline/mandoline-core" "beanstalk-clj" "kasyaar-test2/lein-template" "iokv" "org.clojars.r0man/clj-http" "org.clojars.richardboss/boot-notify" "org.clojars.rayne/anselcharset" "ring/ring-session-timeout" "audit" "org.skummet/lein-skummet" "bedquilt" "org.clojars.aschoerk/cljsdku-base" "org.clojars.cturle/clooj" "com.rmoquin.bundle/libthrift7" "org.elasticsearch/workroom" "kephale/cantor" "weavejester/cider-nrepl" "es.corygil/corenlp" "php-clj" "whodidthis/clj-pouch" "uia-repl" "niwinz/migrante" "lein-postc" "telegram" "conjure-script" "org.clojars.aperiodic/lein-expectations" "datsync" "cljds/ch1" "org.dthume/data.interval-treeset" "escutcheon" "adamwynne/feedparser-clj" "spexec" "clj-dubbo" "overtone/sclang" "org.clojars.aschoerk/cljsdku" "speclj/lein-template" "org.clojars.sbowman/autoproxy" "portal" "com.gfredericks/numth" "cludje" "rodnaph/cail" "jeroenvandijk/lein-checkouts" "org.clojars.ludug3r0/gnugo-gtp" "bilus-ojdbc" "quantum/lein-cljsbuild" "github.checker" "com.linkedin.databus/databus-bootstrap-server-pkg" "fbellomi/indice" "ring-router" "org.clojars.michaelsbradleyjr/ring-devel" "cljaws" "lein-cljsbuild/cljs-compat" "com.narkisr/gelfino-client" "cryogen-html" "org.clojars.frozenlock/kerodon" "vermilion" "perforate-x" "clshow" "clj-gsmaps" "org.trpr/example-models" "org.clojars.pallix/pellet-owlapiv3" "org.clojars.rdsr/clj-http-lite" "rplevy-draker/clojure-hbase" "ephemerol" "stanford-postagger" "org.fitnesse/fitnesse" "active-quickcheck" "org.clojars.renewdoit/cascading-util" "jeremys/cljss-core" "sg-cdb" "farbetter/chumbawamba" "farbetter/mealy" "com.palletops/git-crate" "clj-store" "mesh-clj" "se.raek/map-exception" "org.clojars.nmurray.org.tartarus/snowball" "org.clojars.ray1729/borneo" "com.infectiousmedia/protobuf" "cc.artifice/word2vec" "carthy/glasses" "wikipedia-miner" "cljs-time" "clj-cn-mmseg" "facts/geolocation" "ring-jetty/ring-servlet" "org.clojars.prepor/enlive" "org.onyxplatform/onyx-etl-support" "lein-rb" "clj-pubnub" "incanter/incanter-svg" "clj-desktop-dialog" "lein-uberwar" "nolan" "dirkleas/clj-aws" "clj-google-shopping" "clj-io" "org.clojars.ucb/pyrolite" "com.flipkart.iris/bufferqueue-core" "bbirec/clj-facebook-graph" "indextank-clj" "utahsteetlabs/clojure-solr" "org.clojars.thejohnnybrown/payflow" "replumb" "com.flipkart.phantom/sample-task-proxy" "org.clojars.mikehinchey/agraph-java-client-test" "net.clojure/monads" "bulwark" "aerial.utils" "co.paralleluniverse/comsat-clj-http" "hyperion/hyperion-mongo" "onlyafly/widje" "instaparse" "blob-storage" "hadoop-crate" "com.flipkart.aesop/sample-client" "pandaemonium" "eureka-client" "hobbit" "buddy-pkcs15-sha1" "utsusu" "org.clojars.boechat107/image-processing" "joda-time" "org.clojars.mmcgrana/mongo" "css-parser" "viebel/lein-hiera" "containium.systems/core" "bumpkin" "org.clojars.kokos/clucy" "local-file" "org.clojars.bruz/stacktraces" "com.runa/kits" "rojat-nioutils" "kin" "clj-sql-up" "schemonger" "net.java.dev/gluegen-c-parser" "fleet" "sxm-clojure-ms/lein-template" "org.clojars.renewdoit/simple-avro" "link" "matchbox" "clj-sslbs" "org.clojars.liquidz/simply" "polaris" "me.raynes/conch" "tailrecursion/cljson" "antistock/zooconf" "quantisan/kafka_2.9.2" "org.clojars.pallix/owlapi" "dmohs/fastclick-cljs-packaged" "clj-duration" "slim" "org.clojars.ejlo/regex-cljs" "combi-tree" "com.ruiyun.dvr4j/dvr4j-contrib" "camdez/ring-honeybadger" "lein-drip" "impetus" "org.clojars.tbrooke52.prismic" "clj-file" "webnf/datomic" "mavericklou/foursquare-api" "immutant-fressian" "jcf/pallet" "masai" "org.clojars.banjiewen/xmpp-clj" "kephale/rabbitcj" "quantum/lein-figwheel" "perf-bench" "clojurepoker" "ujmp-complete" "fineman" "overtone/scsynth-interop-linux-x86_64-maverick_alsa" "org.clojars.dth/formative" "environ/environ.lein" "hyper-clj" "splat/lein-template" "confucius" "com.ninjudd/ring" "indole" "match-block" "zolo/marconi" "lein-sass-sassc" "org.clojars.glenjamin/lein-protobuf" "com.gfredericks/lein-sha-version" "com.carouselapps/new-reliquary" "gnir" "fullcontact/full.cache" "dgellow/utils" "rotary" "co.tomlee/services" "cloister" "fixturex" "taffowl/boot-marginalia" "noisesmith/polaris" "edocu/carmine" "ketamine" "strictly" "chai-latte" "jgibblda" "lonocloud.data/ordered" "rkworks/baum" "org.clojars.rayne/autodoc" "org.clojars.intronic/bioclojure" "tie/tiesql" "clj-ldap" "cddr/integrity" "org.clojars.sergey-miryanov/ring-httpcore-adapter" "lucuma" "ystad/aws-codedeploy" "ciste/ciste-service-slacker" "fenrir" "cassc/clj-props" "ithayer/clj-webdriver" "io.kimchi/cisd-jhdf5-core" "io.atomix/trinity" "org.clojars.carboncomputed/neocons" "bcbio.variation.recall" "org.clojars.alesguzik/datascript" "org.clojars.pmbauer/goog.js" "com.onekingslane.danger/danger-date-expr" "tranchis/compojure-api" "lein-minicheck" "zyzanie" "circleci/schema-typer" "clj-jsr223" "cljsjs/react-leaflet" "jarohen/flow" "cirru/writer" "commandline-clj" "org.clojars.jtilles/specter" "de.karolski/berkelium-clj" "com.malloc47/ragtime.sql.files" "the/parsatron" "intronic/interval-tree" "org.clojars.dvgb/compojure" "lein-print" "cljsjs/js-yaml" "com.github.tranchis/clj-bson" "boymaas/qc-states" "org.clojars.nmurray/mrunit" "com.domkm/whois" "com.github.winterstream/clojure" "hoplon" "sv/gcloud.storage" "cgore/compojure-api" "jspha/zmq-native" "nettyca" "causeway" "com.balabit/logstore.cli" "com.rallydev/jarvis" "cljsjs/virtual-dom" "cljtags" "net.mikera/cljunit" "democracyworks/squishy" "com.andrewmcveigh/lein-artifact" "org.clojars.cstorey/lein2-generative" "org.uncommons/reportng" "flybirding" "org.clojure/jvm.tools.analyzer" "clj-scaptcha" "org.clojars.wjlroe/hipchat-clj" "catenate" "com.cemerick/drawbridge" "cljsbuild-template-new/lein-template" "zifile" "rhythm" "org.clojars.gjahad/swank-clojure" "clojure-flickr-api" "org.clojars.wfreeman/testgpg" "clj-containment-matchers" "clj-date-no" "org.clojars.abpoms/postgres-crate" "ittyon" "malcolmsparks/garden" "co.uk.egao/enlive" "org.clojars.pallix/xml-apis" "aleph" "be.dsquare/simpledb" "org.clojars.ohpauleez/clj-bitbucket" "embang/json" "adamclements/clj-tuple" "resauce" "tangrammer/wrapper" "org.clojars.wilkes/gaka" "org.dunaj/tools.analyzer" "stm-profiler" "flupot" "stefon" "eightysteele/cartodb-java-client" "ncl.karyotype" "me.arrdem/meajure" "jaju/weasel" "pallet/pallet-standalone" "io.github.emidln/maven-shade-clojure-transformer" "org.clojars.involans/dieter" "tangrammer/java-net-http-client" "org.clojars.nmurray/tokyo-cabinet" "facjure/dossier" "smeagol.contrib.util" "clj-osf" "org.clojars.pepijndevos/jfastcgi" "clj-spotify-playlist-copier" "dg" "org.clojars.promotably/apollo" "vkclj" "cljsjs/paho" "org.clojars.arohner/clj-oauth2" "org.clojars.charles-stain/nifty-default-controls" "nimrod" "org.clojars.amit/riak-client" "siili/memocks" "harvester" "org.clojars.brenton/difform" "phronmophobic/postmark" "applicative" "it.frbracch/boot-marginalia" "com.gfredericks/exact" "com.datomic/simulant" "arre.jclouds/jclouds-blobstore" "totalrecloj" "net.solicode/middlebrow" "grafter/clj-excel" "org.clojars.markhepburn/jopbox" "com.7theta/elastica" "org.clojars.kiran/lein-web-template" "com.diogodualibe.lzstring4j/lzstring" "neko" "me.raynes/fs" "me.lomin/component-restart" "lein-build-env" "cider/cider-nrepl" "shmish111/clj-statsd" "bbirec/apns" "mrroman/mr.db" "org.jonharrington/profile-env" "raven-component" "org.clojars.james-henderson/flow" "crypto-password" "io.riemann/riemann-java-client-parent" "org.clojars.pntblnk/clj-ldap" "org.clojars.gw666/piccolo2dextras" "m0clj-classpath" "thunknyc.clj-nats" "org.clojars.chapmanb/jnomics" "clodiuno" "stathat" "cdraw" "retro" "rplevy/clj-oauth2" "org.clojars.fdiotalevi/clj-file-utils" "org.clojars.tuomask/clojure-com.sun.net.httpserver" "boxuk/versions" "com.madeye.auth/v1" "local-dotgradle" "yieldbot/cascalog-elephantdb" "org.clojars.wjlroe/dommy" "espresso" "sphinxure" "clj-quartz" "org.clojars.cdorrat/geva-clj" "lindenlab/llsd" "ring-wicked-pdf" "sundbry/resource" "rum-mdl" "unclogged" "org.clojars.abpoms/caribou-core" "stache" "org.batch/yesql" "sv/reagent.form" "laczoka/clj-mail" "kasyaar-test3/lein-template" "twitter-api-utils" "com.poseur/aleph" "com.palletops/net-rules-crate" "cc.artifice/clj-swing" "rm-hull/polyhedra" "swell" "lein-cljs-externs" "lein-stefon-precompile" "frontier" "shafty" "org.clojars.cjoakim/tri" "clj-cb" "ewen.boot/boot-misc" "org.clojars.amcclosky/smackx" "org.clojars.r0man/maple" "org.clojars.mearnsh/clojure-lanterna" "org.conjure/conjure-server" "com.palletops/bakery-sente" "clj-ssh-tunnel" "com.sun.grizzly/grizzly-framework" "clj-zeromq-majordomo" "clorum-core" "se.softhouse.garden.javanativeloader/java-native-loader" "onyx-seq" "omnicognate" "proteus" "conveyor-compass" "com.vitalreactor.twilio-rest" "bacnet-scan-utils" "org.clojars.sergey-miryanov/compojure" "clojurewerkz/envision" "org.clojars.aaroniba/log4j" "appcanary/crustacean" "deraen/boot-cljx" "contrib-repl" "gered/clj-browserchannel-immutant-adapter" "com.generuse/generuse" "org.clojars.gnarmis/snowball-stemmer" "es.corygil/ahocorasick" "com.report.engine/web" "app" "org.clojars.elmom/clojure-jna" "tower" "andrew-nguyen/lein-watch" "rainboots" "io.dominic/boot-cljs" "org.clojars.gorsuch/clj-aws-s3" "org.bmillare/dj.core" "juxt/pull" "org.clojars.haussman/om-react-pixi" "org.clojars.phoenix/zookeeper-clj" "org.clojars.weavejester/autodoc" "tranchis/photon-file" "org.clojars.fyuryu/rosado.processing" "metosin/fnhouse-swagger" "com.taoensso.forks/cljx" "closp/lein-template" "rfkm/lein-cloverage" "matsu" "overtone-gui" "clean-query-strings" "org.ajoberstar/ike.util" "lein-scalac" "approval" "ursacorp/ragtime.sql.files" "org.clojars.mylesmegyesi/http-request-parser" "com.lithinos/amotoen" "cddr/boot-sassc" "clj-jr-utils" "dlist" "com.galebach/rules" "shtrom" "org.immutant/immutant-cache" "ryo/clj-desktop-dialog" "org.clojars.strongh/ua-parser" "jeremys/units" "archieclj" "org.rksm/cljs-slimerjs-tester" "edu.ucdenver.ccp/kr-backend" "org.clojars.charles-stain/jme3-lwjgl-natives" "org.clojars.sorenmacbeth/histogram" "org.clojars.ndepalma/too-hot" "presto" "reabledit" "slidedeck" "burningswell/rabbitmq" "org.clojars.ikarth/libsodium" "io.github.ujihisa/lein-interactive" "prismatic/fnhouse" "jarvis-jenkins-plugin" "edocu/clj-edocu-users" "org.clojars.malabarba/lazy-map" "net.intensivesystems.arrows" "racehub/shadow-build" "org.clojars.osbert/clj-youtube" "vertigo" "uk.co.forward/incanter-core-jblas" "cumulo/server" "org.clojars.doo/congomongo" "com.codesignals/flux" "proven" "finagle-clojure/lein-template" "ritawn" "org.clojars.gfodor/lucene-snowball" "vector-2d" "org.clojars.insane/clj-tagsoup" "edu.cmu/secondstring" "org.pauldeschacht/csv2csv" "org.clojars.mathias/clojure-mail" "edu.stanford.smi/protege" "org.clojars.xeqi/java.jdbc" "org.clojars.krisajenkins/jayq" "morri/meth450k" "chromite" "org.clojars.jkandasa/sshj" "atticus" "rmarianski/ring-jetty-servlet-adapter" "org.clojars.trptcolin/fitnesse" "com.github.jeffdik/clj-xpath" "org.clojars.chapmanb/gatk-lite" "org.clojars.sunilnandihalli/async-sockets" "dwc" "ccfontes/clojuresubs" "quanta" "popen" "spyscope" "org.clojars.leanpixel/sugar" "distancifier" "com.flipkart.polyguice/polyguice-config" "clj-gzip" "azlib/azlib.sql" "com.miguno.stormage/stormage" "juxt/adoc" "dom2edn" "erg" "com.palletops/graphite-crate" "clue" "pivotal-tracker" "witan.models.demography" "jp" "yahoo-finance" "pundit" "facjure/atomic" "org.clojars.fdiotalevi/file-kit" "degel/webol" "org.clojars.ijammy/storm-kafka" "cljs-ws/lein-template" "bones.jobs" "ohpauleez/themis" "com.andrewmcveigh/refdb" "storm" "org.vlacs/hatch" "com.flipkart.fdp/fdp-irm-utils" "im.chit/hara.sort.topological" "pretty-dates" "taken" "sqlitejdbc" "org.clojars.gumvic/remlok" "natal-shell" "emezeske/cljsbuild" "org.clojars.pallix/xml-apis-ext" "adgoji/coendou" "org.clojure/tools.analyzer.js" "com.gfredericks/schema-bijections" "bilus/ankha" "jarohen/phoenix.build" "tailrecursion/ring-proxy" "co.economi/singult" "com.outpace/clj-excel" "clj-thrift" "org.clojars.mpenet/clj-oauth" "clj-genex" "lein-jshint" "org.conjure/conjure-script-scaffold" "org.clojars.runningskull/compojure-api" "gyptis" "fact/lein-light-nrepl" "deck" "overtone/clj-sclang" "org.clojars.malcolmsparks/stevedore" "enigma" "begame" "difform" "nocore/lein-template" "clojurewerkz/chash" "org.clojars.prepor/flyway-core" "io.dropwizard/dropwizard-riemann" "activemq-protobuf-sandwich" "noir-forthold" "kixi/incanter-sql" "mbuczko/boot-build-info" "cached-with-google-collections" "cljsjs/lodash" "sweatkit" "ronda/schema" "fm.web" "ring-wixapps-middleware" "org.clojars.jasonjckn/elephant-bird-core" "org.clojars.hozumi/enlive" "ring-aws-lambda-adapter" "judge" "my-first-project-ryan-neufeld" "lein-jslint" "tamasjung/clj-pusher" "ampere/freactive.core" "degree9/boot-semver" "org.clojars.pjlegato/clansi" "com.keminglabs/jtl" "tailrecursion/clojure-adapter-servlet" "drift-db-postgresql" "webui-framework" "clj-captcha" "lein-groovyc" "plaza-fork" "geni-clj-sdk" "ringfinger/fastfinger" "org.clojars.jbswetnam/invoke" "jobim-presentation/lein-template" "hive/hive-cli" "net.ftod/zcube" "fs" "lexrank" "lein-daemon-runtime" "zhu/leiningen-war" "org.clojars.deraen/clj-livereload" "org.clojars.jstaffans/uberimage" "accrem" "clojuresque/scriptoresque" "com.borkdal/squirrel" "org.clojars.guv/jmxremote_optional" "tie/tie-server" "com.flyingmachine/email" "social/exif-processor" "cn.leancloud.diamond/diamond-utils" "icm-consulting/korma" "reagent-npm-figwheel/lein-template" "org.clojars.zef/congomongo" "jiff" "johncowie/stencil" "edpaget/bootstrap-cljs" "tangrammer/defrecord-wrapper" "me.mj-jadhav/clj-webdriver" "ev3dev-lang" "clj-tree-zipper" "org.clojars.nakkaya/forms" "com._0xab/matrix-cuda-clojure" "estsauver/boot-cljx" "im.chit/hara.function.dispatch" "kremers/lein-beanstalk" "cljsbuild-skeleton/lein-template" "parse-names" "jogrms/jayq" "org.clojars.mcav/pegdown" "com.thelastcitadel/clojure" "conf-er" "org.hectorclient/hector-test" "prismofeverything/ring-buffer" "spootnik/constance" "aero" "im.chit/hara.event" "alandipert/durableatom" "coci/coci-css" "trellis" "com.mochify/hiroba" "org.clojars.rowtr/google-maps-web-api" "org.clojars.rpt/cloverage" "clj-youtube" "mpare-net/async.metrics" "crisptrutski/boot-lein" "simple-progress" "com.gearswithingears/shrubbery" "org.clojars.adamwynne/postal" "clojure-zulip" "hex_to_base64" "clj-chef" "nimaai/honeysql" "org.clojars.nakkaya/jdom" "alandipert/redshift-driver" "puppetlabs/pcp-common" "webmine" "chinese-democracy" "redstone" "clojure-hbase" "maestro" "spootnik/mesomatic" "macroz/reactocular" "ring-filter-routes" "funcool/cats" "com.geocommit/parser" "protobuf" "boot/base" "org.clojars.remleduff/javacv" "cassc/lein-release" "cljsjs/paperjs" "org.clojars.monodeldiablo/metrics-clojure-ring" "clj-crypto" "tokomakoma123/shoreleave-core" "ordered-collections" "pbostrom/om" "org.clojars.seivadmas.yesql" "kuromojure" "org.netmelody/cloister" "tnrglobal/plastic" "clj.pattern.match" "tie/tiesql-client-java" "nilenso/mailgun" "net.mikera/steampunk-laf" "jogl/jogl-glu-gl2" "noir-async" "lein-javadoc" "jogl/jogl-cg" "spid-sdk-clojure" "net.polyc0l0r/bote" "org.clojars.racoon/string" "fnparse" "yeller-clojure-client" "cli4clj" "pallet-crate/lein-template" "edn-ld" "lein-invoke" "org.clojars.toxi/clj-json" "jarohen.forks/shadow-build" "lein-play" "ring-routing" "org.clojars.smartislav.clojure/clojure" "clj-smartystreets" "net.ulfurinn/riemann-plugin-amqp" "fw1-template" "zmaril/hermes" "clj-sql-templates" "com.palletops/bakery-jetty" "org.buntin/moustache" "org.clojars.freemarmoset/feedparser-clj" "ubergraph" "io.tomw/lein-scalac" "org.bituf/fountain-jdbc" "org.clojars.somnium/mongo-java-driver" "envar" "differ" "sfteepee" "ryfow/liqp" "orderly/orderly-parent" "pliant/webpoint" "clj-vtd-xml" "hub.service/user" "com.github.frankiesardo/icepick" "cuid" "amp/lein-template" "rojat/arr-xml" "codes.bauer/com-cemerick-piggieback" "org.ajoberstar/clj-util" "backtype/thriftjava" "com.madeye.clojure.random/core" "t1/whoops" "sonian/carousel" "place-for-things" "analytij" "venantius/korma" "sigar-eventoverse" "saturnine" "clj-swipl7" "core.blas" "ragtime/ragtime.lein" "org.clojars.rayne/clojure-twitter" "funcool/bootutils" "cprice404/lein-cljsbuild" "chic-text" "org.nakkaya.robocode/robocode" "org.clojars.akiel/yesql" "org.clojars.adamwynne/http.async.client" "cljsjs/opentype" "com.ladderlife/cellophane" "org.clojars.overtone/jinput" "tranchis/clj-ldap" "io.hoplon.vendor/jquery.selectize" "lein-clj-rpc" "org.clojars.kevin/linux-native" "prismatic/plumbing" "calabash/uia-repl" "org.clojars.philc/brolog" "org.clojars.aaroniba/java-gmail-imap" "org.clojars.freeagent/clj-ebay" "bilus/clj-uuid" "circle/s3-wagon-private" "kancolle-clj" "org.clojars.qaston/fx-clj" "lein-axis" "lein-lic" "roxxi/clojure-common-utils" "lightninggrader/base64" "lein-recipe" "thi.ng/common" "rodnaph/tigger" "ororo" "amanoras/clojam" "barnum" "metosin/boot-alt-test" "com.madeye.clojure.ampache/ampachedb" "stasis" "org.clojars.ctdean/svmbridge" "tailrecursion/javastar" "org.rksm/system-files" "grouper" "cljx-sampling" "org.clojars.guv/jmathplot" "org.clojars.gmazelier/ring-json-params" "com.timezynk.domain/domain-http" "com.redhat.qe/ssh-tools" "net.mikera/alchemy" "net.mikera/clojure-pom" "ccfontes/cljs.fuzzy-matcher" "twosigma/clj-mesos" "json-roa/clj-utils" "org.clojars.danielcompton/sente" "predominance" "org.esanmiguelc/ttt-clojure-core" "miraj" "com.curiosity/urly" "kovasb/shoreleave-browser" "pddl-clojure-interface" "clj.monitor" "org.clojars.touch/clj-elasticsearch" "quadtree-clj" "utilza" "org.conjure/conjure-plugin" "juxt.modular/email" "muse" "guiftw" "tie/tie-sql" "cqrs-clj" "appledelhi" "org.clojars.firthh/simple-queue" "viebel/s3-cljs" "org.clojars.gsimard/lwjgl" "com.hmsonline.osgi/bundles" "org.clojars.mavbozo/clj-jangosmtp" "finance-clj" "akjetma/woolpack" "waterfall" "addepar.ants/ants" "match" "org.clojure.bago/cljs-dynamic-resources" "im.chit/oren" "radicalzephyr/bootlaces" "com.rmoquin.bundle/reflectasm-shaded" "work" "cljs-lambda-slack-command/lein-template" "leiningen" "lein-azkaban" "org.clojars.smallrivers/jcharset" "forma/jblas" "cljminecraft/lein-template" "clj-neo4j-data" "env.js/js" "brevis" "twitter-streaming-client" "ibdknox/analyzer" "clemence" "joplin" "anc" "find-example" "sauerworld/cube2.crypto" "random-forests-clj" "jig/netty-mqtt" "jogl/newt" "nl.studyflow/eduroute-api" "es.topiq/ecdts" "thi.ng/xerror" "org.fversnel/steam-api" "com.chartbeat.cljbeat/lein-assemble" "clojurewerkz/ragtime" "daemonistic" "org.bytopia/lein-skummet" "jamesaddinall/jetty-component" "zenedu/pertamax" "flatland/ring-cors" "kibu/pushy" "scopely" "org.clojars.thejohnnybrown/xml-apis" "org.flatland/wakeful" "pallet-fsmop" "io.homegrown/sim-ephemeral" "google-apps-clj" "lein-s3-uberjar-release" "funcool/catacumba" "clj-firmata" "me.panzoo/torus" "rasom/onyx-redis" "markdown-clj" "json-to-csv" "org.bituf/lein-lb" "gov.usgs.eros/lcmap-data" "com.andrewmcveigh/lein-ring" "dalap-html" "bones.conf" "ayato_p/tenki" "kaitanie/lobos" "pynch" "cauchy" "autodoc/autodoc-collect" "ronda/routing-clout" "org.clojars.r0man/clj-spark" "com.deftitlenil/cljs-csvc" "vimclojure/server" "clj-html-parser" "snip" "hls.clojuresque.patched/clojuresque" "shadertone/lwjgl-natives" "dougselph/sparkling" "mccraigmccraig/dieter" "forest" "org.clojars.firesofmay/clj-webdriver" "lein-grafter" "hellonico/zenclient" "clj-path" "org.clojars.arbscht/lein-npm" "org.clojars.dandorman/shoreleave-remote" "quil/processing-dxf" "claws" "clerk" "clj-file-utils" "org.formcept/sqljdbc41" "rasql" "racehub/lib-noir" "lein-assoc" "com.zentrope/web-repl" "djnativeswing-clj" "com.lyncode/jtwig-functions-java6-legacy-jee" "gaussian_elimination" "org.clojars.pjstadig/clj-peg" "fxkit-plugin" "lein-shegon" "quantum/ns" "js-idiomatic-symbols" "cascalog-printtap" "org.clojars.r0man/clj-webdriver" "com.rafflecopter/pitstop" "clomath" "org.nakkaya.robocode/roborumble" "ursacorp/ragtime.jdbc" "chronoid" "watcher" "cljs-jquery-1-7-1" "org.clojars.jaley/dorothy" "slack-app/lein-template" "org.clojars.rosejn/scenario" "se.haleby/stub-http" "clj-hn" "cav/cljcav" "org.clojars.august/sparrows" "org.blancas/morph" "lein-less4j" "tensor" "com.jkkramer/ordered" "cljs-ring-remotes" "asynp" "jarohen/bounce.figwheel" "com.wagjo/cljs-diff" "net.assum/xmpp-clj" "deraen/boot-midje" "org.clojars.automata/tritonus-aos" "ring.middleware.common-log" "clojure-source" "clj-cache-blobstore" "mschuene/seesaw" "aaron-santos/tinter" "clj-jregex" "org.klauer/java7-watcher" "wechat" "com.joshuagriffith/cron-stream" "rgad/clojure-opennlp" "sonian-pedestal-immutant/lein-template" "com.revelytix.logbacks/slf4j-log4j12" "redis-async" "defpage" "clojurewerkz/performeter" "lein-git" "com.github.pmerienne/stormy-pythian" "cljsjs/rrule" "places" "lein-simpleton" "clojure.jdbc/clojure.jdbc-c3p0" "net.java.dev/gluegen" "lambdacd" "io.pedestal/pedestal.jetty" "atroche/ring-raygun" "solovyov/mesto" "random-forests" "talendar" "unfix" "dformat" "lein-file-replace" "org.clojars.triss/midi-data" "lein-hiera" "lein-pjotest" "png-extract" "com.adobe.flex/flex-messaging-proxy" "com._0xab/nondeterminism" "com.vitalreactor/lein-figwheel" "geheimtur" "enfocus-template/lein-template" "edeposit.amqp.epubcheck" "org.clojars.leadtune/clj-airbrake" "acceptit" "clibana" "clojurewerkz/statistiker" "com.climate/geojson-schema" "org.clojars.dsteurer/mathjax" "solrclient" "chestnut/lein-template" "com.ingemark/lein-with-checkout" "dignati/onyx-rethinkdb" "webol" "org.thelastcitadel/bnfu" "org.clojars.difranco/netlogo" "ronda/routing" "org.clojars.yanatan16/config" "interpreter" "com.palletops/cache-resources" "cljsjs/jquery-timepicker" "com.guokr.nlp/clj-cn-nlp" "com.rafflecopter/qb" "aperiodic/qutils" "storm-spirit" "ice/lein-template" "com.notbot/mocha" "com.gfredericks.forks.lein-ring/lein-ring" "jobim" "pg-component" "pushalot-clj" "dewdrop" "org.clojars.maxgfaraday/clojure-newbie" "com.redhat.qe/verify-testng" "org.clojars.lstoll/libvirt" "ewen/wreak" "net.solovyov/cljs-utils" "klutometis/google-translator" "clojusc/mesomatic-hello" "org.nakkaya.robocode/robocode.core" "org.conjure/conjure-model" "ring/ring-devel" "de.undeadco/lein-gorilla" "org.clojars.taweili/codeblocks" "me.arrdem/clojarr" "org.clojars.aaroniba/bcprov" "lein-heroku" "kordano/full.cljs.parent" "test-a" "enlive-ws" "truckerpath/anti-flooding-http" "com.spright/le-helpers" "clj-asana" "net.unit8/clj-flume-node" "turbovote.resource-config" "climp" "uritemplate-clj" "thebusby/clj-aws-ec2" "minimal/lein-template" "org.clojars.pauldeden/too-hot" "org.clojars.rhg135.marked4j/marked" "clj-json-rpc" "diff-match-patch" "nasser/imap" "clojurenote" "org.clojars.stumitchell/re-com" "clj-org" "nace" "clj-shell" "org.clojars.tail/lein-scalatest" "se.raek/utf8-with-fallback" "sandbar/sandbar-dev" "org.clojars.mopemope/lein-cont" "org.clojars.razum2um/lein-marginalia" "manifold-kafka" "rm-hull/ring.middleware.etag" "filemap" "lein-aws-api-gateway" "com.redbrainlabs/clj-orient" "cljandbox" "jlk/batik" "cljs-websockets-async" "datomic-simple" "egamble/accessive" "lein-clojurescript" "net.dnolen.vecmath" "com.passivsystems/protean-core" "nsfw/lein-template" "uk.me.rkd.ttlcache" "org.tigris/marc4j" "browserific-app/lein-template" "clj-mailgun" "com.intception.components/blob-storage" "rdfa" "gwt-plugin" "cljsjs/dialog-polyfill" "circleci/resque-clojure" "clojure-config" "longji" "cgore/schema-contrib" "overtone-contrib" "hbase.cascalog" "com.galebach/cljs-cache" "fw1/lein-template" "clj-highcharts" "clj-recipe-puppy" "metosin/leaplib" "juxt.modular/stencil" "jogl/newt-core" "com.cemerick/clj-http" "org.clojars.semperos/automat" "org.taoclj/junction" "com.ibdknox.scriptjure/scriptjure" "ring-jdbc-pool" "io.joshmiller/exif-processor" "net.polyc0l0r/geschichte" "fhir" "polymer.elements/paper" "co.zensight/file-buffer" "clj-luhn" "de.active-group/sqlosure" "gatekeeper" "calx/javacl" "cssgen" "lein-autoexpect" "restful-app/lein-template" "lein-stakeout" "im.chit/vinyasa.classloader" "jansi-clj" "clojurewerkz/eventoverse" "clj-owm" "clj-histogram" "lein-condor" "otterviews/database-interface" "org.clojars.chapmanb/gatk-utils" "bouncycastle/bcprov-jdk16-nosign" "org.clojars.gberenfield/clj-stacktrace" "freebase-clj" "zookeeper-clj" "torpo" "instaparse-cljs" "imageinfo" "ring-server" "swing_dialog" "org.clojars.phansen/clj.pattern.match" "org.clojars.scttnlsn/enlive-ws" "dvt" "org.onyxplatform/onyx-amazon-sqs" "org.clojars.bpsm/big-ivan" "metar" "com.palletops/pallet-aws-ops" "importall" "org.tinnitus.dl/elastic-riemann" "de.karolski/sanity" "salesforce" "crudmucker" "misty000/just-for-fun" "servant" "noir-test" "org.clojars.adamwynne/libthrift" "org.clojars.pallix/pellet-core" "boxuk.toolchain" "com.greenyouse/deepfns" "kevin1999/cljs-ajax" "pdfa-core" "org.clojars.ortuna.clj-pdf" "kibu/om" "clj-zoo" "claudio" "ucum-lib" "org.clojars.edw/aleph" "org.vlacs/stateful" "rmap" "org.clojars.gilesc/jgrapht" "io.mandoline/mandoline-s3" "com.github.quintona/storm-pattern" "wrap-worker" "day8/re-frame-tracer" "com.jsyn/jsyn" "ayato_p/boot-kotlinc" "camo" "org.clojars.scpike.dieter/react" "puppetlabs/kitchensink" "propertea" "org.clojars.jeffsigmon/maryclient" "cljs-storage" "pedestal-shiro" "org.clojars.rebcabin/sync-q" "lasync" "dynapath" "estuary" "apparatus-krati" "clj-grid-core" "cc.artifice/geppettoweb" "lacij" "clj-meetup" "com.github.tranchis/congomongo" "org.ozias.cljlibs/semver" "trajectile" "clj-quandl" "antistock/component" "tailrecursion/hoplon.hammerjs" "me.kapilreddy/webdriver-sauce-test" "cljsjs/material" "apoya-minify" "kilgore" "net.nanonation/pedestal.tomcat" "schnipseljagd/pdclient" "com.onekingslane.danger/avro-schema-diff" "clj-es" "net.dossot/crashure" "turbovote.pedestal-toolbox" "savagematt/clj-pgnotify" "clj-mapdb" "utahstreetlabs/clojure-solr" "lein-watch" "org.clojars.chapmanb/genomespace-cdk" "org.prognostic/cursor" "com.outpace/config" "com.flipkart.lego/gracekelly" "org.clojars.jberg/aa-agent" "kasyaar-http-kit/lein-template" "ckirkendall/lein-sub" "sandbar/sandbar-auth" "lein-jupiter" "boiler-pipe" "org.clojars.mschristiansen/rxtx-linux-native-deps" "thunknyc/henri" "clojars_test" "ring-reload-modified" "walmartlabs/active-status" "ingest" "com.taoensso.forks/markdown-clj" "org.clojars.brentshields/rxatom" "net.wvdlaan/kiezel" "kirasystems/langdetect" "hello_world_template/lein-template" "com.plumbee/buildbot" "tranchis/photon-config" "org.vlacs/navigator" "nillib" "org.jdesktop/jdic" "im.chit/hara.sort.hierarchical" "alchemist" "ego" "cubane/cublono" "org.clojars.ninjudd/java.classpath" "yoyo-api/lein-template" "tsmarsh/hexgrid-clj" "org.clojars.odekopoon/ring-middleware-format" "devcards/lein-template" "com.fxtlabs/stockings" "hyperion/hyperion-riak" "org.clojars.pmonks/multigrep" "org.clojars.gilesc/jackcess" "cljs-react-reload" "org.clojars.rmoehn/lib-grimoire" "dougselph/hdfs-clj" "clarsec2" "dnddice" "com.soundcloud/prometheus-clj" "riddley" "clj-schema" "org.akvo/resumed" "lein-sql" "factual/jlk-utility" "brim/lein-template" "org.clojars.zortloan/test" "obb-rules" "org.domaindrivenarchitecture.org/dda-user-crate" "quantisan/kafka_2.8.0" "ptaoussanis/redis-clojure" "ayato_p/twilog-scraper" "corporate" "socrates" "org.clojars.zcaudate/noir-cljs" "org.clojars.technomancy/osmosis-hstore" "clj-isitup" "fu-template/lein-template" "boxuk/wrap-worker" "org.onyxplatform/onyx-durable-queue" "misaki-plugin-sample" "tranchis/ring-middleware-format" "pool" "pani" "org.clojars.chicagofan98/genetic" "org.clojars.bodydata/jayq" "com.taoensso/touchstone" "com.rmoquin.bundle/kryo" "com.sna-projects.krati/krati" "org.clojars.caugmar/numerologo" "wamp-test-driver" "doo" "clj-klout" "slice" "io.nervous/glossop" "com.flipkart/open-replicator" "craygo/solrclj" "garnet" "concurrent" "tailrecursion/boot-classloader" "io.aviso/rook" "indexed-map" "org.dthume/java.io-bridge" "db" "clojurewerkz/mold" "org.clojars.ohpauleez/lein-multi" "lockedon/graph-router" "suub/error-codes" "org.flowerborn/control" "arre/dirwatch" "cn.leancloud/clj-msgpack" "clanhr/work-days" "org.colinsteele/doctordoc" "org.clojars.ghoseb/enlive" "revise/rethinkdb" "beckon" "reason" "at.laborg/briss" "org.clojars.biallym/jogl-native-all" "letsparty" "org.clojars.pyr/tools.cli" "com.mishadoff/littlepot" "fogus/bacwn" "data-frisk-reagent" "polybius" "zwart" "titan-app/lein-template" "fswatch" "alandipert/boot-base" "eucita-neocloud" "lein-dash" "danlentz/clj-uuid" "stray" "clj-nats-async" "org.clojars.intception/clj-ldap" "md4clj" "ifesdjeen/sigar-native-deps" "com.palletops/tools.cli" "org.clojars.deraen/foobar" "org.clojars.dajac/pallet" "clj-riak" "benkoder" "dataconveyingexception" "myshelf" "ccfontes/timbre-util" "io.clojure/enlive" "vigil" "clojusc/mesomatic" "test2junit" "spellhouse/clairvoyant" "sligeom" "zololabs/context-io" "ring-request-diff" "com.flipkart.phantom/runtime-oio-uds" "medley" "lein-clr" "cryogen/lein-template" "aysylu/loom" "org.clojars.the-kenny/lein-midje" "funcool/suricatta" "rando" "im.chit/hara.reflect" "org.clojars.ninjudd/clojure" "clojuresque/clojuresque-common" "getweets" "clj-librato" "org.codehaus.mojo/adtech-core_services_client" "spootnik/globber" "org.clojars.sanityinc/congomongo" "gumvic/nanoql" "cljsjs/rangy-textrange" "listora/again" "joegallo/clj-http" "clj-mmseg" "limelight/limelight-clj" "tcsavage/algo.comonads" "swot-clj" "com.yetanalytics/kria" "batman/lein-template" "clj-robots" "cljsjs/bcrypt" "com.vijaykiran.processing/org.processing.core" "patisserie" "com.github.jdmarble/crawl-tiles" "inquest" "org.cloudhoist/hadoop" "lein-scss" "tailrecursion/jslib-jquery-daterangepicker" "nomnomnom" "credit-card-validator" "metosin/system" "juno.store" "classlojure" "com._0xab/jcuda" "cubane/cublono-html" "clj-sspace" "org.clojars.intronic/lobos" "verschlimmbesserung" "devth/tentacles" "com.twitter/maple" "etsy" "laundromat" "tdnet" "tvanhens/clojar-test" "phlegmaticprogrammer/btree" "clj-lex" "eggsby/stencil" "zmaril/om" "overtone/scsynth-interop-linux-x86_64-maverick_jack" "com.xorlev.gatekeeper/gatekeeper-core" "org.clojars.brenton/google-diff-match-patch" "org.clojars.mccraigmccraig/lein-swank" "mvxcvi/blocks" "org.clojars.runningskull/ring-swagger-ui" "lupapiste/commons" "unbot-retro" "razum2um/classlojure" "lambdacd-rest" "cljsjs/react-motion" "edu.umich.eecs.tac/aa-logging" "expiring-map" "client-oauth2" "com.github.pmerienne/stormy-pythian-component" "exchange" "cljsjs/css-layout" "org.clojars.strad/clojure-hadoop" "cascalog-more-taps-eighty" "cljman" "rajnbow" "catnip" "org.clojars.renewdoit/clout" "rozifus-cljs-lib/lein-template" "prismatic/schema-generators" "quile/component-cljs" "net.mikera/swing-console" "ymilky/franzy-admin" "clj-jdbm" "metaq" "homeswipe/cirque" "clj-obt-service" "com.palletops/hadoop-book-example" "org.clojars.rbxbx/clauth" "tailrecursion/extype" "denoising-autoencoder" "io.replikativ/full.async" "org.sift/lucene-runtime" "miraj/polyfills" "org.clojars.aberkley/geotomic" "melange" "nw/lein-template" "ahc-clj" "dlowe/mongofinil" "diesel" "org.clojars.danielpcox/clj-systemtray" "ring-middleware-force-reload" "clj-zendesk" "net.drib/defmain" "org.clojars.macourtney/clj-record" "ring-session-store-memcached" "org.clojars.sids/htmlcleaner" "org.clojars.dsapala/climp" "merchant" "org.clojars.daaku/swank-clojure" "imdb2emf" "clojure-jsr-223" "org.clojars.doo/digest" "incise-core" "gws/persona" "cljsjs/quill" "org.clojars.pallix/pellet-rules" "car" "org.clojars.hozumi/toxiclibscore" "edw/ordered" "lein-remote-swank" "cirru/html-entry" "com.flipkart.aesop/blocking-bootstrap-mysql-producer" "basic-web-ch-template/lein-template" "org.clojars.benalbrecht/lein-doo" "org.rksm/cloxp-cljs" "com.keminglabs/jzmq" "qualityclj" "clj-aws-ec2" "samsara/samsara-utils" "flatland/reply" "weixin-on-heroku/lein-template" "org.clojars.cmhobbs/clj-aws-s3" "exicon/hoplon5-semantic-ui" "send-mail" "findfn" "aot-match" "revise/proto-extensions" "clojure-bitly" "sherlock" "tailrecursion/boot.notify" "stch-library/routing" "comprehend" "org.clojars.processing-core/org.processing.itext" "clj-decline" "rocks.hbc/misc" "clj-sandbox" "org.cloudhoist/datomic-free-transactor" "rident" "mrmcc3/beanstalk-docker-app" "aemette/lein-template" "backrest/lein-template" "antler/lein-beanstalk" "com.flipkart.polyguice/polyguice-all" "dotcloud/lein-template" "com.report.engine/report-engine" "lein-hiccster" "http-chunked" "org.clojars.miau.biz/compojure" "router" "copy-api" "org.codehaus.mojo/adtech-security_providers_client" "lein-repl-run" "com.joshuagriffith/async-agent" "org.bff.javampd/javampd" "org.clojars.bsima/stockings" "im.chit/hara.data.map" "circleci/keyczar" "org.clojars.pjt/saxon9" "com.stuartsierra/frequencies" "adblockblock" "t6/clide-web_2.10" "org.clojure/clojurescript" "ancient-clj" "mbriggs/ring-json-params" "fullcontact/full.rabbit" "gutter" "org.clojars.sumbach/clojure-maven-plugin" "com.github.drsnyder/musubi" "io.nervous/cljs-rollbar" "bukkure/lein-template" "flycouchdb" "imparsonate" "org.clojars.deltam/jing" "org.clojars.ka2u/web-scraper" "com.cognitect/transit-cljs" "figwheel-sidecar" "s3-edge" "cassandra-wrapper" "org.clojars.leon/clojure-web-admin" "poc.cml" "io.aviso/taxi-toolkit" "dollswar" "mdrogalis/stateful-check" "quiescent" "com.rmoquin.osgi/bundles" "org.clojars.magomimmo/core.async" "all-the-while" "cawala/slacker" "om-bower/lein-template" "sv.blob-storage/file-blob-storage" "amazonica" "cljs-websockets" "org.cloudhoist/lein-pallet-new" "gggrover.tuples" "lein-scrooge" "cljs-styles" "com.spicevan/pc-message" "clj-chunk-buffer" "bocko-android" "org.clojars.ideal-knee/speclj" "org.clojars.miguno/kafka_2.9.2" "klapaucius" "zalgo" "lein-runproject" "org.clojars.kurtharriger/lein-depgraph" "com.flipkart.polyguice/polyguice-core" "apix/apix-util" "generuse-lib" "org.clojars.kschrader/liberator" "org.clojars.bartonj/leiningen" "nl.zeekat/simpledb-appender" "jsasm" "clocure" "framework-one" "clj-kinesis-client" "kixi/data.vendor.parent" "lein-deploy-tar" "piglatinizer" "kamituel/s-tlbx-probe" "org.clojars.neotyk/lein-javac" "reagent-npm/lein-template" "com.ashafa/clutch" "clomp" "org.clojars.shicks/clojure" "test-loop" "live-static" "org.clojars.lypanov/google-closure-library-repackaged" "leftronic" "tinter" "org.clojars.sa1amander/cluby" "com.outpace/url" "clamq" "xsc/asset-builder" "clj-openid" "notion" "org.clojars.selfsame/plomb" "clj-pid" "avout-mongo" "swingrepl" "rsslldnphy/timbre" "paste_notes" "noir-test2" "time-to-read" "org.clojars.doo/mongodb-event-store" "ez-image" "super-simple-window" "de.otto/status" "org.clojars.aaroniba/javapns" "aprint" "io.screen6/bigquery" "fastest" "vitalreactor/clj-oauth2" "nanonationpedestal-app/lein-template" "org.typedclojure/mranderson" "net.kronkltd/aleph" "levenshtein" "ibdknox/blind" "com.rmoquin.bundle/clojure.osgi" "com.flipkart.polyguice/polyguice-web" "lein-as-resource" "stutz" "ring-template/lein-template" "org.clojars.folcon/lanterna" "org.clojars.cdorrat/geva-gui" "org.erinite/lein-erinite" "camelot" "gdal/clj-gdal" "clj-ns-browser" "lein-webdav" "cc.qbits/alia-nippy" "com.datomic/datomic-free" "clj-pretty-error" "org.clojars.tcrawley/gniazdo" "org.clojars.taweili/tablelayout" "com.nomad/chiffonier" "clj-stacktrace-alex" "cloogle" "org.lpetit/net.cgrand.regex" "tokomakoma123/shoreleave-browser" "octobind" "metosin/lomakkeet" "jsch-agent-proxy" "ses-mailer" "net.phobot.datomic/migrator" "it.sk.alfresco/h2-support" "com.redhat.qe/httpclient-tools" "adatx" "com.gfredericks/re-rand" "org.clojars.blandflakes/alexa-skills-kit" "org.clojars.ecmendenhall/schtitt" "org.clojars.roninhacker/sablono" "org.clojars.tavisrudd/clj-apache-http" "com.joestelmach/natty" "collection-check" "kixi/incanter-io" "me.arnaudsj/core.nlp" "org.clojars.bartonj/fressian" "org.clojars.daaku/clojureql" "kixi/schema-contrib" "lupapiste/pdfa-generator" "hives" "googlecloud/cloudstorage" "com.google.code/java-gmail-imap" "name.stadig/lein-conjecture" "rjmetrics-clj" "bobby-conf" "pdoctor/cassaforte" "storm/storm-console-logging" "org.onyxplatform/onyx-s3" "bux" "im.chit/juy" "yuan/game" "org.clojure/data.fressian" "com.smxemail/lein-jnaerator" "org.apache.maven/maven-ant-tasks" "jawsome-dsl" "unigen" "org.clojars.ato/jcommon" "com.flipkart.hydra/hydra-dispatcher" "defcomponent" "clj-wt.queue" "org.spootnik/mesomatic-async" "org.vitalreactor/deploy" "lein-js" "cist" "litmus" "fudd" "lein2-test-out" "kryonet" "clj-config" "org.clojars.gregspurrier/trendrr-nsq-client" "org.noisesmith/git-info-edn" "revise" "cfft" "me.moocar/java.io" "org.clojars.jkni/clj-ssh" "org.clojars.vgeshel/feedparser-clj" "ovh" "es.corygil/factor-graph" "polymer.elements/neon" "thi.ng/morphogen" "org.clojars.kubo/foundation" "phonograph" "io.sarnowski/swagger1st" "com.linkedin.databus/databus-core-impl" "com.yetanalytics/heartbeat" "bandit/bandit-simulate" "om-codemirror" "lein-namespace-depends" "com.gfredericks/dot-slash" "midjournal/cloverage" "org.clojars.joel/clojar-test-app" "storm/libthrift7" "spootnik/reporter" "com.gfredericks.forks.schema-gen/schema-gen" "hellonico/speech-recognition" "me.arrdem/rate-gate" "clj-cache-ehcache" "clojure_combinators" "rowtr/geo-graph" "babel" "com.eaio.uuid/uuid" "bitauth" "adzerk/boot-template" "org.clojars.rozifus/bit-field-cljs" "com.ifesdjeen.utils" "solussd/bouncer" "com.hendrick/hendrick-ring-util" "io.dropwizard.primer/primer-bundle" "betamax" "com.brunobonacci/synapse" "google-diff-match-patch" "org.clojars.samhalicke/compojure" "com.palletops/lein-shorthand" "url62" "kweery" "org.clojars.wjlroe/hiccup" "democracyworks/kehaar" "im.chit/hara.object" "shoreleave/shoreleave-worker" "huahaiy/lein-git-version" "rchancode/clj-java-xml" "com.joshuagriffith/shannon" "om-mantras" "k2n/lein-zinc" "jkkramer/verily" "org.raynes.clojars/arginalia" "jersey-service" "bluemont/zookeeper-clj" "cljminecraft-deploy" "org.clojars.mikejs/ring-mongrel2-adapter" "racehub/mandrill-clj" "org.clojars.jasonjckn/match" "quote" "neone4373/clj-index" "zhuangxm/boot-midje" "paddleguru/clj-redis-session" "org.clojars.kjw/commons-codec" "yada" "elephantdb/elephantdb-client" "keechma/entitydb" "deadghost/stripe-clojure" "sv/system" "com.flipkart.iris/bufferqueue" "postmark" "mccraigmccraig/lein-dieter-precompile" "picard" "noprompt/clj-diff" "org.clojars.s450r1/dcm4che-tool-txt2dcmsr" "org.clojars.leanpixel/om-material" "com.palletops/clj-docker" "org.clojars.ignacy/woda" "kutsu" "org.zeromq/zmq" "org.clojure/java.data" "zilti/boot-typed" "lein-var-file" "test00" "funcool/futura" "org.clojars.jaygporcasi/retrack" "com.matthiasnehlsen/clj-webdriver" "org.clojars.smallrivers/snacktory" "uswitch/riemann-java-heap" "rounded-border" "sinusoides/lein-template" "infracanophile/boot-cljs-test" "org.pingles/cascading.neo4j" "org.clojars.icylisper/rabbitmq-client" "sql.dsl/korma" "org.clojars.emil0r/lobos" "com.works/async-sockets" "ethereum.cljs" "pocheshiro" "clji18n" "com.mdrogalis/lib-onyx" "cljsjs/async" "me.arrdem/metacoin" "com.nocandysw/stream-stream" "kephale/clj-ml" "com.jd.bdp.magpie/magpie-framework-clj" "herald.services" "lein-protobuf-minimal" "dwc-io" "midi" "mds_package" "slester/ring-browser-caching" "skream" "ardrone" "ring-ratelimit" "morri/unique-tss" "org.clojars.paul/core-kafka_2.8.0" "clowpay" "org.clojars.pingles/lein-autodoc" "defclass/vivi" "othello" "org.clojars.kotarak/jgraphx" "moria" "debugger" "jakemcc/dommy" "org.clojure/data.avl" "gnome.ldtp" "good-old-days" "yieldbot/hadoop-util" "lupapiste/lein-hgnotes" "clj-restmachine" "brukbart" "ribbit" "clj-sys/plumbing" "net.java.dev.jogl/jogl-solaris-sparcv9" "noisesmith.pachinko" "listora/ring-congestion" "org.conjure/lein-conjure" "clj-util" "org.clojars.srihari/sigmund" "fughetta" "org.clojars.pierrehenryperret/aws-java-sdk" "taoensso.com/carmine" "devs" "dignati/dictionary" "org.clojars.bugsbio/lein-tern" "org.clojars.folcon/colors" "marick/suchwow" "clank" "com.vitalreactor/figwheel" "deraen/boot-less" "jarppes-om-app/lein-template" "inspector" "hiphip-aot" "minion" "org.clojars.paraseba/congomongo" "apache-log-parser" "lupapiste/lein-buildid" "mytalengi/email-reply-parser" "something1" "vhector" "clj_heritrix" "org.txominpelu.clojars.lein-dpkg" "org.clojars.mediocregopher/my-compojure" "org.clojars.tnoda/simple-crypto" "cc.qbits/sextant" "dougselph/clj-time" "org.clojars.krisajenkins/clj-facebook-graph" "env/faker" "org.clojars.gmazelier/cron4j" "lein-set-version" "johncowie/middleware" "noprompt/lein-npm" "org.clojars.sunilnandihalli/jreality-native-deps" "bindery" "clucy" "org.clojars.danielpcox/lein-tar" "org.clojars.mikeitz/gluegen-rt" "codionics.utilities" "conduit-irc" "jordan" "clj-cerberus" "workflo/brahman" "org.clojars.geoffsalmon/ring-bake" "twitter-friend" "org.clojars.penglish/clj-ml-dev" "ayato_p/rr" "org.clojars.sergey-miryanov/clj-native" "cirru/minifier" "kalar-core" "org.clojars.jlehman/lein-init-script" "tiesql/server" "net.iovxw/esab16" "ring-logger-onelog" "com.whimsy/princeton-algo-package" "amontillado" "ryfow/cider-nrepl" "twitter-api" "com.hystrix/hystrix-configurator" "org.clojars.nakkaya.javax.mail/imap" "org.clojars.dcampbell/jna" "hop/hop.lein" "boymaas/stefon" "org.eamonn.funcgo/funcgo-compiler" "clj-libil" "shaman" "bluecollar" "io.joshuamiller/exif-processor" "lambdebug" "charset-bytes" "ceviche/bootstrap" "cleancr" "firstlook/pst" "brutus" "com.stuartsierra/class-diagram" "midje-cascalog" "clj-ftp" "rrss" "polynome" "com.lemondronor/turboshrimp-h264j" "jfugue-movabledo" "jarjar" "org.danielsz/system" "miazan/om-test" "hendekagon/loom" "org.clojars.dajac/ua-parser" "dwwoelfel/weasel" "local/clj-ftp-client" "juxt.modular/datomic" "com.flipkart.poseidon/core" "org.clojars.kovasb/html-parse" "kosmos/kosmos-nrepl" "com.flipkart.fdp/fdp-irm-webentities" "org.clojars.yanatan16/statsd-wrapper" "sjmackenzie/boot-nix" "pe-core-utils" "jcf-static/lein-template" "org.clojars.miau.biz/clojure-couchdb" "clj-amazon" "csv-map" "lein-beaver" "alexbachin/clj-yaml" "friboo/lein-template" "org.bituf/clj-argutil" "goad" "org.clojars.s450r1/dcm4che-tool-dcm2dcm" "burningswell/core" "clojure-accumulo" "cartodb-clj" "org.clojars.kjw/slf4j" "net.sourceforge.jsi/jsi" "org.clojars.jhowarth/clojure-contrib" "net.unit8/incanter-charts-3d" "org.clojars.myfreeweb.clojuresque/clojuresque" "lein-gitify" "org.rksm/cloxp-source-reader" "com.avos/ring-json-params" "org.smaak/dimporter" "org.clojars.frozenlock/apogee" "str_alignment" "h4ssi/cacacanvas" "nimalan/lamina" "com.github.pmerienne/stormy-pythian-model" "saacl" "prepor/boxure" "funcool/cuerdas" "frechet-dist" "com.intception.components/datomic" "org.clojars.weavejester/ring-core" "org.clojars.nberger/devcards" "uap-clj" "org.clojars.paomian/left-pad" "org.clojars.nodename/clevolution" "om-starter/lein-template" "lein-search" "claigslist" "metosin/kekkonen" "metabase/throttle" "quartz-clj" "elephantlaboratories" "net.kronkltd/slacker" "lein-api-rest-template/lein-template" "lein-checkout-deps" "com.flipkart.fdp/fdp-ddf" "cascalog/elephant-bird" "jogl/nativewindow-x11" "com.taoensso.debug/lein" "venantius/accountant" "eleos/longship" "helpshift/kodai" "lein-story" "com.jkkramer/util" "hotbits-clj" "xumingmingv/testlib-user" "rabbitcj" "kestrel" "crossref/heartbeat" "cljsjs/highstock" "org.clojars.pguillebert/clara-rules" "cwk" "appcanary/raven-clj" "org.clojars.mrphoebs/iswear" "trystan/voronoi-diagram" "org.clojars.smallrivers/clj-oauth2" "org.clojars.mmcgrana/lein-clojars" "juxt/datomic-extras" "clj-predict" "org.frege-lang/frege" "mondrian/lein-template" "boing" "testing-clojars" "adzerk/env" "clj-ecs" "flipboard/clj-services" "com.gfredericks/lein-env-version" "org.clojars.agile_jordi.midje/lein-template" "lein-csv-to-edn" "pumila" "dwca-reader2-clj/dwca-reader-clj" "com.ninjudd/clauth" "org.clojars.ctdean/clj-routing" "riemann" "littlebird/ibis" "com.rjmetrics.developers/sweet-liberty" "kixi.amon-schema" "jruby-sinatra/lein-template" "ringfinger/formfinger" "minimaliterals" "org.clojars.wurstmeister/storm-kafka-0.8-plus" "ilshad/layout" "decorate" "noir-exception" "perun" "org.clojars.liquidz/let-args" "org.clojars.sickcuchulainn/shoreleave-core" "org.clojars.rosejn/jvi" "carte" "clojurewerkz/cyclic" "io.pedestal/pedestal.app-tools" "org.spootnik/mesomatic" "camechis/deploy-uberjar" "materializecss-clojure" "pdclient" "org.clojars.weavejester/dep-a" "org.clojars.triss/music" "sgr/sgr-db" "lein-lock" "org.clojars.nanonation/pedestal.app-tools" "efficiosro/clj-ironmq" "claude" "clojure-solr" "org.silkyweb/silk" "org.clojars.ggarciajr/lein-lesscss" "okapi" "ruiyun/http-kit" "clojax" "invaliduser/dommy" "plugboard" "cc.qbits/jet" "variance" "opentable/ring-middleware-format" "enlive-android" "com.palletops/maven-resolver" "org.clojars.s450r1/dcm4che-imageio" "clj-joq-client" "gorillalabs/archimedes" "biodb" "org.clojars.klutometis/add-classpath" "clj-wiremock" "com.michaelgaare/kr-core" "bframeworkapp/lein-template" "com.onekingslane.danger/jsonschema" "org.clojars.amit/syslog4j" "org.bridgei2i/word2vec" "lein-android" "kixi/data.vendor.appnexus" "beamly/beamly-core.config" "pghstore-clj" "ch.cmbntr/jsdt-compat" "vinzi.data" "sh" "brave-ring" "datascript" "tonsky/boot-anybar" "barcode" "rm-hull/cljs-test" "maclaren" "coldnew/config" "juno.service" "kephale/javacpp" "lein-slamhound" "macroparser" "ashtonkemerling/echo" "speclj_ttt" "ccfontes/kuromojure" "org.clojars.owl/gen_fsm" "metosin/clojure-bootcamp.dataset" "correlation" "clj-outsidein" "cljminecraft" "travesedo" "ciste/ciste-incubator" "clj-stable-pprint" "kosmos" "org.pupcus/stateful-sessions" "weavejester/lein-template" "org.lemurproject.clueweb12pp/warc-clojure" "ritz/ritz-nrepl-codeq" "hearst" "cljs-template" "sonar" "generator" "com.aphyr/prism" "nimaai/logbug" "danielsz/boot-binstubs" "org.clojars.geoffpado/icalendar" "astar-search" "org.clojars.zimilate/appengine-magic" "org.clojars.akhudek/clojureql" "me.hpsy/clutch" "cookbook-storm-project/lein-template" "color-test" "moxaj/lein-seria" "aging-session" "sjl/lein2-generative" "streamlib" "eu.cassiel/arduino" "enlive-partials" "thread-maybe" "carmine" "puppetlabs/trapperkeeper-status" "org.clojars.s450r1/dcm4che-tool-dcmrcv" "cc.artifice/excel" "org.clojars.elliot42/clj-yaml" "facts/speech-synthesis" "org.clojars.lambder/pedestal.service" "com.redhat.qe/katello-api" "org.clojars.cemerick/testjar" "hickory" "saarthak/couchbase-healthcheck" "tiesql/core" "jogl/jogl-util-fixedfuncemu" "ring-force-https" "org.clojars.processing-core/org.processing.gluegen-rt" "info.sunng/slacker" "net.cgrand/sjacket" "org.clojars.gjahad/debug-repl" "org.fife.ui/rsyntaxtextarea" "jarohen/simple-brepl" "tailrecursion/hlisp-macros" "clostache" "com.flipkart.hydra/hydra-expression" "im.chit/hara.concurrent.latch" "reforms" "processing-jogl" "courjera" "iloveponies.tests/one-function-to-rule-them-all" "forseti" "rojat.arr-xml" "avos.data.json" "overtone/scsynth-interop-linux-x86-lucid_portaudio" "pleasetrythisathome/boot-cljs-repl" "zolodeck/clj-social-lab" "org.clojars.clojure-intro-couse/firstclassshapes" "quamolit" "net.cgrand/spreadmap" "philjackson/yipgo-parser" "lambder.clonfig" "walmartlabs/shared-deps" "pmbauer/cljs-csvc" "midje-template" "juxt/dirwatch" "dogfort" "org.clojars.ja3ck/clj-epublib" "caribou/caribou-admin" "marshmacros" "bsima/etsy" "bigml/sketchy" "algebolic" "mani" "lambdacd-mongodb" "codox/codox.core" "btctrader-clj" "org.clojars.pntblnk/hiccup" "lspector/clojush" "pmclj" "cylon" "abengoa/clj-stripe" "pallet-rvm" "com.redhat.qe/comparisons" "processing-opengl" "metosin/reagent-dev-tools" "url-scraper" "org.clojars.brenden/storm-amqp-spout" "cljlangdetect" "pilight" "ru.prepor.component/httpkit" "clasp" "org.clojure/java.classpath" "com.rallydev/jarvis-rally-plugin" "minimap" "components" "eightysteele/midje-cascalog" "lein-with-env-vars" "org.markdownj/markdownj" "swirrl/lib-swirrl-server" "emil0r/clj-oauth2" "juxt.modular/clostache" "boot-sassc" "org.clojure.clr/test.check" "manifold" "icm-consulting/accountant" "webnf/async-servlet" "mvc-works/boot-html-entry" "malcolmsparks/eep" "edu.umich.eecs.tac/aa-common" "org.clojars.kjw/jcl-over-slf4j" "com.cemerick/double-check" "org.clojars.jasonjckn/thread-expr" "com.clojars.mcav/lein-javac" "org.mistsys/kafka-websocket" "clj-redis" "org.clojars.frozenlock/logger" "me.panzoo/goo" "brambling" "cljsjs/cortical-io" "mysql-queue" "arohner/secrets" "sneerteam/test-util-clj" "storm-nimbus-hdfs" "es.topiq/boltzmann" "org.clojars.trptcolin/seqex" "iloveponies.tests/looping-is-recursion" "sync-q" "appengine-skeleton/lein-template" "pail-time" "watchdog" "fmap-clojure" "hiccup-bootstrap-cdn" "arohner/optimus" "push-in-clojure" "com.akolov.mirador" "ceviche/invoke" "midje-teamcity" "hornetq-clj/stomp-example" "weavejester/pixi" "notice" "io.thdr/redux-cljs" "com.andrewmcveigh/plugin-bootstrap" "sgerguri/clj-bucket" "hub.util/api" "bruno" "stencil" "devcards" "plumber" "cljsjs/d3" "awohletz/resourceware" "cljsjs/react-quill" "net.nanonation/pedestal-introspector" "jarohen/frodo-core" "org.clojars.arohner/clj-yaml" "ccfontes/transdoge" "bcbio.variation" "kixi/hitman" "samsara/moebius" "com.report.engine/init" "com.sun.jini/jsk-platform" "gorilla-plot" "clj-formal-specifications" "lein-auto" "org.ozias.cljlibs/utils" "com.boundary/overlock-scala_2.9.1" "us.physion/lobos" "org.clojars.earthlingzephyr/lejos-ev3" "org.clojars.franks42/clj.security.message-digest" "org.clojars.chapmanb/fast-random-forest" "flare-midje" "ringfinger/basefinger" "processing" "com.sattvik/lein-vimclojure" "glasses" "com.linkedin.databus/databus-bootstrap-server-impl" "lustered" "ring-http-basic-auth" "com.rafflecopter/ito" "net.solicode/middlebrow-swt.gtk.linux.x86_64" "mbuczko/elastisch" "solrclj" "com.calvinfroedge/clutch" "munge-tout" "org.clojars.thobbs/hector-test" "cambium" "jspha/otp" "org.quilt/sedan" "org.clojars.nipra/shadowfax" "markov-text" "mies-weasel/lein-template" "org.clojars.qbg/syntax-rules" "org.clojars.pierrehenryperret/aws-sdk" "com.leonardoborges/rx-cljs" "noesis/com.mefesto.wabbitmq" "org.clojars.alexati/hum" "compojurefgo/lein-template" "org.clojars.sidec/jsyn" "com.ambrosebs/dynalint" "processing-gluegen-rt" "clj-mfcc" "im.chit/hara.concurrent.pipe" "mistakes-were-made" "clj-circuit-breaker" "org.clojars.pmonks/spinner" "net.spy.memcached/spymemcached" "org.clojars.roboli/clerk" "lein-cascade" "lein-datomic" "teratorn" "yesql" "org.clojars.gilbertl/vimclojure" "tvachon/factual-clojure-driver" "org.clojars.smallrivers/clojure-twitter" "com.relaynetwork/clorine" "org.clojars.mpenet/clj-yaml" "cognician/fusebox" "org.khelekore/prtree" "nativot" "antigate" "com.cemerick/valip" "clj-time" "pseidon-etl" "cljs-exnihilo/lein-template" "checked-route" "crate" "clojurewerkz/money" "org.immutant/web" "twfy" "com.solsort/hello-module" "org.clojars.brightnorth/clj-facebook-graph" "drouchy/lein-deploy-app" "comply" "sxml-jaxp" "thegreatape/ring-raygun" "org.dunaj/synthread" "hirop-compojure" "lein-aws" "com.brunobonacci/ip-geoloc" "clj_utils" "webnf.deps/contrib" "org.hypercrud/hypercrud.service" "epicea/breakable" "mondrian" "org.clojars.ivajloip/conjure" "org.jbsdiff/jbsdiff" "etcd-clojure" "raymarch-functions" "lib-fetch" "drtom/jbcrypt" "lein-resource" "rill-event-sourcing/rill.message" "cachex" "tree-config/lein" "org.flatgui/flatguithemes" "cookbook-sample-template-mik-die/lein-template" "thinktopic/caffe-protobuf" "org.flywaydb/flyway-core" "com.bigml/clj-aws-s3" "clojurewerkz/perfometer" "zenedu/tyrion" "cljrepl" "om-material-ui" "veneer" "icm-consulting/lein-cucumber" "web-mongodb-ch-template/lein-template" "ring/ring-ssl" "de.sveri/friendui-datomic" "clj-sendy" "dashdash" "pswincom-clj" "org.clojars.kovasb/plumbing" "com.google.com.p.expect4j/expect4j" "dr-textile-and-mr-hiccup" "tailrecursion/jquery.daterangepicker" "com.hypertable/hypertable" "lein-caribou" "elephantdb/elephantdb-thrift" "com.chetmancini/schema-transform" "antistock/cli" "grimradical/ring-geoipviz" "laeggen" "ez-database" "org.apache.kafka/kafka" "ring-multipart-params-progress" "org.clojars.brenden/storm-json" "savaki/cljs-input" "org.clojars.trptcolin/domina" "asher/csv-to-edn" "cumulo/shallow-diff" "im.chit/hara.common.primitives" "cascading-cassandra" "antler/caribou-api" "data-fixation" "lein-source" "factual/jlk-time" "org.clojars.daaku/korma" "rm-hull/loose-labels" "ring-webjars" "indyvon" "org.clojars.smallrivers/clostache" "cljsjs/colorbrewer" "clj-archaius" "com.pokitdok/pokitdok-api" "org.nickmbailey/jgroups" "facet" "kaleidocs/merge" "org.clojars.ogrim/feedparser-clj" "easter-day" "com.palletops/collectd-crate" "com.kurogitsune/lafi" "confjure" "sybilant/x86db" "com.prajnainc/functional-vaadin" "pedestal-service/lein-template" "com.palletops/ssh-transport" "angel-interceptor" "k2nr/docker" "com.ingemark/lein-bundle" "riveted" "kalar" "simple-actor" "org.clojars.pdoctor/cassaforte" "oj" "labs-template/lein-template" "bacure" "com.jakemccrary/lein-test-refresh" "com.cognitect/transit-js" "cljsjs/plotly" "logjam" "org.clojars.grilix/ring-anti-forgery" "hypertext-ray" "org.clojars.bonega/java-unrar" "codox-info" "yamlupgrade" "defun" "kixi/incanter-charts" "org.scribe/scribe" "clj-log" "compojure.route.clojurescript" "dwwoelfel/datascript" "org.clojars.alexguev.ragtime/ragtime.sql.files" "bilus/lein-marginalia" "org.clojars.bcart3r/lein-web" "org.clojars.zentrope/zentrope-mq" "caesium" "matplotlib" "com.franz/agraph-clj" "org.clojars.strong/clj-redis" "com.palletops/hyde" "me.manuelp/confunion" "com.ingemark/lein-release" "ring-basic-auth" "com.flipkart.phantom/dashboard" "org.clojars.aperiodic/clj-json" "sv.rpc/ring" "lein-noir-gen" "cljsjs/waypoints" "hjrnunes/clj-liblinear" "tranchis/photon-h2" "org.clojars.paxan/lein-localrepo" "overtone/sclang-jna" "thdr.redux-cljs" "clj-simple-form/clj-simple-form-giddyup" "gorilla-app/lein-template" "thi.ng/sema" "org.clojars.pgdad/zookeeper-clj" "carry" "org.clojars.petrilli/too-hot" "materia/materia-core" "munkres" "org.clojars.dhaya/gridgain" "org.clojars.arthurprs/metrics-clojure-ring" "me.arnaudsj/cld" "confetti/s3-deploy" "com.github.jonase.csv/csvclj" "org.clojars.badyl/comcomp" "ctdean/versionator" "bilus/amazonica" "roxxi/aws-clj-sdk" "org.clojars.kjw/solrj" "rowtr/geo-cache" "clj-diamond" "sbtourist/cheshire" "lein-simplified-awsuberwar" "monetdb/monetdb-jdbc" "adzerk/adzerk-clj" "arohner/schema-typer" "degel-clojure-utils" "seabass" "cssgen-rule-seq" "foe" "cc.rightangle/persona" "kaitanie/titanium" "pr-foobar" "appengine-api-local-runtime/appengine-local-runtime" "stubadub" "fixturex/fixturex.higher" "temperature-conversion" "com.ewen.flapjax-cljs" "twarc" "jonase/eastwood" "com.taoensso/truss" "org.timmc/handy" "ceterumnet-clj-pdf" "org.clojars.cassiel/clojure-zeroconf" "kotka.schnorres/schnorres" "helpshift/spongeblob" "twitter4clojure" "josef" "social/larder-release" "descjop/lein-template" "org.clojars.intronic/bio.ensembl" "craygo/clj-mail" "com.lucasbradstreet/onyx-testing" "neone4373/chime" "cc.artifice/codox.core" "kafka" "miazan/titan-clj" "system" "rows" "chronology" "cljsjs/raven" "timewarrior/clj-facebook-graph" "xrae" "org.clojars.ray1729/clj-aws-s3" "clojure-commons" "org.signaut/ring-userprincipal-middleware" "org.clojars.mikeitz/gluegen-rt-natives-windows-x86_64" "kixi/data.vendor.grapeshot" "la.tomoj/geohash-java" "com.palletops/leaven" "tcrayford/clj-tuple" "pandeiro/agua" "wordcut" "readyforzero/babbage" "yoyo-clj-nats-async" "org.clojars.wjlroe/clj-bookmarks" "com.unbounce/clj-hazelcast" "re-frame/lein-template" "listora/elect" "au.com.auspost/component-clinic" "gate-clj" "com.birdseye-sw/dalap-html" "pointslope/remit" "clj-gui" "com.taoensso.debug/carmine" "org.clojars.originalsurfmex.processing/gluegen-rt-natives-linux-armv6hf" "org.clojars.wgb/cayley-clj" "com.postspectacular/dependency" "lexington" "cljsbuild" "org.clojars.quintona/storm-contrib" "tulos/boot-criterium" "com.bigml/closchema" "net.clojure/applicative" "alandipert/gitgoggle" "org.clojars.maxweber/kinesis-storm-spout" "org.clojars.charles-stain/xmlpull-xpp3" "ru.prepor/clj-kafka" "dynmsg" "anafora" "slimath" "org.clojars.retiman/clj-time" "org.clojars.pka/jdic-macos-tray" "backtick" "clj-datomic-session" "com.flipkart.aesop/runtime" "com.ksmpartners/sql-file" "regex-cljs" "conjecture" "ring-json-body" "snow-client" "did-datomic-free/lein-template" "juxt.modular/menu" "org.clojars.s450r1/dcm4che-tool-pdf2dcm" "darksky-clojure" "lein-heroku-deploy" "webdb/lein-template" "mrmcc3/pigeon" "cljs-event" "sodahead" "gtfsrt_decoder" "e84/clj-gdal" "com.linkedin.databus/databus-core-schema-tools" "clojush" "de.doctronic/timbre-mlog" "hyperion/hyperion-api" "org.clojars.shriphani/warc-clojure" "phobos" "org.clojars.erikseppanen/monger" "funcool/struct" "com.raspasov/neversleep-clojure-client" "test-deploy-clojars" "org.onyxplatform/onyx-seq" "com.gfredericks/debug-repl" "zmaril/lein-test-bang-bang" "aesahaettr" "lein-tg" "rabbitmq-clj" "org.clojars.eploko/prerenderer" "au.com.directcommunications/tait-dmr" "com.palletops/lein-docudata" "org.clojars.rferraz/lein-antlr" "rplevy-draker/drift" "org.clojars.aowongster/too-hot" "org.clojars.juliobarros/clj-liblinear" "codn" "jarohen/lein-ring" "org.txominpelu.clojars/lein-dpkg" "clj-debug" "navis/untangled-spec" "mccraigmccraig/awaze" "light.wiley/clj-twilio" "lein-gnome" "lucy" "relative" "com.nebleena/weberknecht" "org.clojars.wuhounited/tetris" "clojurize-couchdb" "ipr" "org.clojars.tavisrudd/clj-oauth" "mapping-schema" "moxaj/seria" "simple-open-ni" "clojure-term-colors" "org.sift/tagcloud" "lbt05/clj-aws-s3" "com.ninjudd/division" "de.otto/machroput" "markgunnels/solrclj" "quadtree" "org.danielsz/cljs-utils" "avos.zpracovani" "clj-upyun" "cascading1.1rc3" "datomisc" "lein-buster" "cc.qbits/esearch" "pkrsim" "org.clojars.noidi/clj-cas-client" "com.cemerick/shoreleave-remote-ring" "lein-run-scipt" "org.clojars.adamwynne/mongodb-session" "egamble/reader-macros" "kibu/bidi" "routegen" "rksm/repl.utils" "org.clojars.sxcnd/converter" "transmission-client" "thebitenoir" "fripon" "org.clojars.mw10013/remix" "org.clojars.bapehbe/sdb" "illusioniste" "io.cronic/atombind" "tupelo-datomic" "im.chit/hara.expression" "ring-undertow-adapter" "mixfix-clj" "lymingtonprecision/route-ccrs" "puppetlabs/i18n" "amalloy/gpg-test" "org.clojars.mantree/metricks" "cljsjs/google-analytics" "stask/http-kit" "com.yellerapp/overlock-scala_2.9.1" "session" "com.github.tstout/gd-io" "utahstreetlabs/resque-clojure" "concordia" "himilsbach" "org.clojars.eruez/clj-pdf" "com.unbounce/encors" "com.cemerick/pprng" "reagent-react-router" "webnf.compat/yuicompressor" "lein-tag-no-sign" "vacancy-clj" "onaio/hatti" "clj-orient2" "shanks" "spid-client-clojure" "com.carouselapps/free-form" "org.clojars.originalsurfmex.processing/jogl-all-natives-macosx-universal" "clojurescript-worksheet/lein-template" "frankiesardo/icepick" "cljsjs/enquire" "clj-crfsuite" "com.cemerick/opennlp-models" "org.clojure/math.numeric-tower" "kephale/lwjgl-util" "javaserver" "io.dropwizard.revolver/revolver" "clj-social" "aloha" "muscat" "org.clojars.michaelsbradleyjr/monads" "gjcourt/storm" "saturnine-plaza" "marksism" "org.jasani/common" "org.clojars.strongh/storm-cassandra" "org.clojars.rayne/clojure-http-client" "tao" "d3no_rapper" "conexp-clj" "road" "edu.stanford.smi.protege/protege" "kephale/clojush" "ko" "org.clojars.brenden/scala-storm_2.10" "com.uncrafted/bloguito" "com.comoyo/condensation" "sgr/sgr-svm" "supercollider" "cljsjs/juration" "nt/riemann-java-client-proto2.4.1" "chiara" "org.clojars.bothacker.jmonkeyengine3/jinput" "com.threatgrid/dieter" "ctdean/iter" "markdown2clj" "org.clj-grenada/poomoo" "rill-event-sourcing/rill" "org.codehaus.mojo/activation" "wedge" "org.clojars.cemerick/javelin" "org.clojars.dnolen/penumbra" "uncomplicate/commons" "com.palletops/bakery-httpkit" "herald.core.scm" "paddleguru/postal" "jp.takar2ru/i18n" "pseidon/riemann-clojure-client-proto2.4.1" "com.twinql.clojure/mql" "adzerk/statsd-client" "org.clojars.rnewman/ring" "oauth/oauth.two" "org.clojars.mmcgrana/riak-java-pb-client" "snipsnap" "org.clojars.ptillemans/lein-cuke" "kaitanie/korma" "quil/gluegen-rt-fat" "com.github.vivekkothari/marathon-client" "detect-encoding-clj" "timgluz/elastisch" "brutha" "riemann-client-component" "antler/zippix" "whodidthis/om-justified" "org.clojars.akiel/async-error" "johncowie/clauth" "compojure" "mount" "cc.artifice/timbre" "dmcljs/json" "org.clojars.ludothehun/memo-lookahead-ttl" "petrol" "scenegraph/decora-jogl" "aviary/aviary-serve" "aviary/lein-template" "eightnotrump/lein-lazytest" "scout" "lumos-pedestal-component" "hh-sync" "org.clojure/core.memoize" "com.nanonation/nanonation-utils" "docker-client" "ring-json-params" "org.clojure/google-closure-library" "im.chit/iroh" "org.clojars.sideris/datomic-rtree" "outfn" "matcher-client" "cljs-mathbox" "org.clojars.drsnyder/pidge" "ring.middleware.etag" "org.clojars.ajoberstar/learning-graclj" "worky" "kunstmusik/pink" "web-midi" "fr.grunwald/lazymap" "clojurewerkz/quartzite-rest" "muir" "thunknyc/richelieu" "clj-eden/console" "angular-cl2/lein-template" "ring-simpleweb-adapter" "org.onyxplatform/onyx-sql" "jarohen/yoyo.http-kit" "clj-quad" "crossref-util" "com.gfredericks.forks.mvxcvi/whidbey" "org.clojars.originalsurfmex.processing/core" "factual/fnparse" "org.clojars.oskarkv/jmonkeyengine" "org.clojars.verdammelt/enfocus" "incanter/jfreechart" "ezglib" "url-normalizor" "org.clojars.jaen/boot-cljs" "com.bloomberg.platform/spoon" "org.clojars.blucas/quote-downloader" "newt/newt-osx" "lein-ring" "org.flatland/telemetry" "accent" "bugzilla-testng" "com.flyingmachine/vern" "kafka-component" "ritz/ritz-swank" "bbakersmith/simple-batch-processor" "storm-test" "hiccup-rdfa" "elastics" "org.clojars.canawar/logback-kafka" "cljain" "asosio.utils" "org.clojars.danpersa/instaskip" "org.clojars.bobby/clojure-neo4j" "bilus/clj-browserchannel-jetty-adapter" "user-agent-utils" "coldnew/left-pad" "moumar/domina" "boynton/clj-util" "org.generuse/generuse-lib" "broken-template/lein-template" "org.clojars.tlpierce/clojure-neo4j" "pail-graph" "quartzite-rest" "shopify/shopify-friend" "org.clojars.jvillste/jogl-all" "hal-gen" "com.jgoodies/forms" "org.commos/delta.compscribe" "mjolnir" "onlyafly/waltz" "org.clojars.torbjornvatn/hidapi" "claro" "perro" "utterance" "re-frame-re-play" "net.apribase.useragent" "morri/meth-bed" "elephantdb/elephantdb-cascalog" "clj-bugsnag" "net.colourcoding/ritorno" "org.clojars.khoda.expectations" "mvxcvi.com.gfredericks.forks/puget" "spellhouse/phalanges" "org.clojars.s450r1/dcm4che-imageio-rle" "gloss-b" "caribou/lein-caribou" "org.clojars.guv/jppf-client" "woody" "monome" "rm-hull/cljs-dataview" "cljsjs/react-relay" "org.generuse/generuse" "com.malloc47/java.jdbc" "ildar/virtual-dom" "org.clojars.rje/clutch" "org.clojars.gmoe/overtone-template" "bonney" "org.crimeminister/autoremote" "org.lichess/chessground" "org.clojars.alloyed/hiccup" "com.twinql.clojure/clj-apache-http" "backtype/dfs-datastores-cascading" "cpmcdaniel/boot-copy" "org.hface/hface-client" "com.thelastcitadel/bytes" "gov.usgs.eros/lcmap-event" "org.clojars.lu/zetta-parser" "ring-venturi" "lein-mangoes" "com.redhat.qe/json-java" "lein-dotenv" "lein-goog" "rkworks/cling" "conveyor-jst" "clj-auto-diff" "me.colindrake.hiro" "elephantdb/cascalog-elephantdb" "com.estsauver/schema" "org.clojars.xcthulhu/jdistlib" "com.estsauver/cljx" "craygo/scraper" "com.cemerick/piggieback" "org.clojars.mstump/clj-hector" "org.clojars.maoe/snmp4clj" "useful" "clj-facebook-graph" "overtone/sclang-interop-classlibrary" "clopp" "tiesql/tiesql-client-cljs" "webnf/server" "org.clojars.xeqi/too-hot" "instagenerate" "wwa-windows/lein-template" "org.clojars.rayne/clj-apache-http" "swarmiji" "clojurewerkz/quartzite" "crouton" "net.solicode/semvera" "ktoa" "mcache" "clak" "org.clojars.appsflyer/clj-kafka" "clj-drmaa" "org.metastatic/jarsync" "org.clojars.czan/abra" "org.clojars.txominpelu/lein-dpkg" "org.domaindrivenarchitecture.org/dda-liferay-crate" "avro-schema-diff" "puppetlabs/trapperkeeper-rpc" "usps-clj" "org.clojars.ctdean/clojure-tokyocabinet" "io.ramekin/units" "immoh/dommy.template" "com.madeye.clojure.common/ring" "org.clojars.rhg135/jna" "org.clojars.pallix/pellet-datatypes" "instar" "org.clojars.h3x3d/archimedes" "com.dsci/clj-redis" "org.clojars.kovasb/fetcher" "schematic" "ccfontes/hiccup" "laczoka/ring-json-params" "ccw/clojure" "com.taoensso.forks/clout" "org.clojars.jyaan/slick" "org.clojars.choas/clojure-hadoop" "lemonteaa/relabel" "mstate" "zololabs/zolo-utils" "simpledb-ischyrus" "com.kurogitsune/avm-clj" "org.clojars.promotably/proggly" "cljsoup" "com.gfredericks/simple-check" "nullistoolong/ohsync" "optimus-jsx" "tailrecursion/javelin" "au.com.auspost/lein-cupickle" "org.clojars.cytora/clj-kafka" "seer" "prepor/clj-kafka" "com.telenordigital.data-insights/clj-oauth2" "cljsjs/bootstrap" "jar-migrations" "org.clojars.tcrawley/clojure" "incanter/incanter-mongodb" "trellolib" "modnakasta/weasel" "ch.deepimpact/bolt" "org.clojars.cvkem/jsonzip" "org.clojars.hgavin/cascalog" "kosmos/kosmos-hikari" "gar3thjon3s/lein-fig" "org.clojars.jasonjckn/scribe_client" "org.clojars.storm-amqp/storm-amqp-spout" "deobald/lein-ring" "soupup" "too-hot" "org.clojars.gfrlog/java.jdbc" "com.palletops/java-websocket" "org.clojars.sorenmacbeth/hadoop-util" "gezwitscher" "net.mikera/vectorz-clj" "pjstadig/wayfarer" "org.clojars.harob/dieter" "org.flatland/drip" "de.otto/tesla-kafka-logging" "org.clojars.andrewmcveigh/lein-package" "psychic-meme" "jkugiya/h2-tools" "swag" "cljs-css-modules" "org.clojars.intception/toolbox.cookies" "org.clojars.monodeldiablo/rotary" "ca.unstate/hashname" "com.hmsonline.bundle/jzmq" "emojinius" "event-sourcing" "org.clojars.doffltmiw/honeysql" "com.flipkart.flux/model" "rocco/ring-xml" "jeffdik/lein-sha-version" "ike/ike.gradleui" "com.flyingmachine/penny-black-postal" "kovacnica/dreamcatcher" "cascalog-incanter" "com.neatonk/shah" "me.vlobanov/mustache" "ring-http-middleware" "selmer-java" "minreact" "de.hn/clojars-test" "net.haltcondition/geolocation" "com.narkisr/fuse4j-linux-native" "clj-yacc" "clj-rpe" "lein-cljfmt" "org.clojars.isaac-zeng/jna" "me.arrdem/cljfmt" "zenedu/cdbview" "java.shell2" "thi.ng/typedarrays" "ormen" "examine" "com.clojars.rozifus.webtorrent-cljs/addr-to-ip-port-cljs" "org.pegdown/pegdown" "deraen.forks/reagent" "com.wohanley/robots" "backtype/jzmq" "im.chit/hara.protocol.watch" "lein-fpm" "clj-aws-s3" "mpd-clj" "com.github.fhd.clostache/clostache" "cc.qbits/alia-joda-time" "org.clojars.monodeldiablo/orderly" "org.conjure/conjure-config" "org.clojars.jds02006/system" "backtype/cassandra-interface" "im.chit/hara.expression.shorthand" "sample-app" "mongoika" "avos/hooke" "com.7theta/utilis" "es.topiq/rincanter" "lein-dieter-precompile" "urlbuilder" "predicat" "luminus/lein-template" "edu.ucsb.nceas/ezid" "kata/lein-template" "analysis" "ring-audit-middleware" "yieldbot/elephantdb-cascading" "com.stuartsierra/mapgraph" "kfkcljr" "org.clojars.pauld/georegression" "composable-styles" "tba-engine" "timewarrior/clj-oauth2" "hellonico/wujuko-common" "factual/geo" "mesos-framework/lein-template" "orchid" "clj.where" "ymilky/franzy-common" "onaio/chimera" "container-ship" "baldr" "backtype/wonderdog" "io.framed/overseer" "twig" "svg-kineticjs" "com.linkedin.databus/databus2-example-client" "org.clojars.vgeshel/async-http-client" "colinkahn.flux.getters" "alandipert/greet" "ring-csrf" "clojure.in.action" "org.clojars.mccraigmccraig/clojureql" "org.clojars.bestfriendchris/too-hot" "pjstadig/utf8" "semi-supervised-multinomial-naive-bayes" "org.clojars.pmariani/rbenv-crate" "com.literallysoftware/lein-paprika" "prismic" "txload" "cc.artifice/loom" "nilern.scriptjure" "alchemy-clojure" "edocu/http-kit" "data-tackle" "org.clojars.markgunnels/sdb" "longstorm/claude" "com.github.tranchis/javaff" "clojurewerkz/support" "logoot" "noapi" "asset-minifier" "com.firstlinq/cljs-ssr-node" "galdolber/gapi" "org.clojars.rayne/clj-time" "im.chit/purnam.test" "asm/asm-xml" "yunjia/clj-util" "live-chart" "cloudstorage" "limon-model" "com.climate/serializable-fn" "jig/jetty" "therapy" "mkremins/xyzzy" "org.clojars.pierrehenryperret/httpclient" "lein-garden" "ca.brentvatne/flux" "org.clojars.xudifsd/cloud-download" "funnyplaces" "sv/gcloud.pubsub" "org.clojars.ride_on/lein-sha-version" "line-vector" "eugendueck/tierlieb" "com.flipkart.aesop/runtime-bootstrap" "org.clojars.akiel/pull" "org.clojars.rexim/lwjgl-platform-natives" "lein-localrepo" "up/up-stencil" "org.scheibenkaes/web-lib" "org.clojars.tnoda/math.prime" "aeroclj" "org.clojars.roti/appengine-magic" "org.clojars.amit/commons-io" "hookin" "humaweb" "org.clojars.heinz/bert-clj" "de.otto/tesla-basic-logging" "server-stats" "org.clojars.starry/jzmq-native-deps" "clj-nacl" "polymer/google" "com.flipkart.ranger/ranger" "com.palletops/forever-crate" "org.clojars.qu4ntumcpa/cineole" "com.facebook/jsx" "clj-scribe" "clova" "board-ultimatum-engine" "wsdl4j" "com.linkedin.databus/databus-client-http" "blueprints.clj" "funcool/beicon" "lein-otf-war" "me.lizier/jidt" "org.clojars.leon/clojure.jdbc-druid" "tailrecursion/jslib-jquery" "org.clojars.jozias/codox" "cont" "mixradio/party" "com.iterinc/lein-cordova" "bocko-canvas" "clj-url" "lein-licenses" "cloxp-lein" "com.flipkart.phantom/sample-thrift-proxy" "ring-micro/lein-template" "rate-gate" "containium.systems/ring-analytics" "org.clojars.jasonjckn/storm-kafka" "com.lyncode/jtwig-core-java6" "dar/async.promise" "nben" "de.undeadco/error-codes" "clj-ucm" "simple-email" "formula" "str-to-argv" "com.github.ptgoetz/storm-cassandra" "org.clojars.lapax/tokyocabinet-java-native-deps" "org.jhotdraw/jhotdraw" "org.iplantc/kameleon" "employeerepublic/er-model" "fn-fx" "webnf.deps/dev" "mschuene/fx-clj" "clojure.jdbc/clojure.jdbc-dbcp" "clojure-python" "grafter/url" "org.clojars.nathell/liblinear" "org.clojars.weavejester/dep-d" "io.hoplon.vendor/twitter.bootstrap.default" "org.clojars.amit/smackx-jingle" "bacwn" "org.libvirt/libvirt" "markov" "org.hypergraphdb/hypergraphdb" "cljsdku" "publius" "jarohen/phoenix" "adtile/lambda-core" "org.clojars.vaguery/push-in-clojure" "eigenhombre/namejen" "hoplon/javelin" "org.clojars.slyphon/xmlrpc" "speclj-tmux" "erdos.stats" "gorillalabs.tesla/core" "purnam/purnam-js" "dar/assets-lein" "goodzilla" "org.clojars.andersfurseth.elasticsearch.embedded" "org.clojars.nakkaya/rome" "rontgen" "bordeaux" "circleci/lein-version-spec" "org.clojars.erikprice/honeysql" "fun_migrations" "squarepeg" "grafter" "clojurehadoop" "tailrecursion/boot.task" "org.clojars.guilespi/friend" "lein-plz" "io.hoplon.danielneal/reveal" "slitrace" "gizmo-web/lein-template" "org.clojars.zaxtax/libstemmer" "com.climate/rotary" "gsn-spa/lein-template" "metrics-clojure-riemann" "org.clojars.cninja/appengine-api-stubs" "pepinito" "oscar-marshall/datomic-cljs" "org.clojure/data.json" "manners/manners.with" "org.clojure/tools.analyzer" "flare/flare-suite" "cake-slamhound" "fsrun" "org.lpetit/paredit.clj" "pegasus" "io.aleph/dirigiste" "d3-app/lein-template" "webnf.deps/logback" "com.linkedin.databus/databus-client-api" "lein-summon" "gorilla-renderable" "trollscript" "flikscape" "com.andrewmcveigh/plugin-fileupload" "org.zalando.stups/friboo" "webfui" "com.linkedin.databus/databus2-example-relay-pkg" "cc.artifice/lein2-test-out" "com.vijaykiran/clj-jgit" "quantize" "signet" "opentransact" "ide-files/lein-template" "org.clojars.paul/clj-hector" "om-inputs" "corpus-utils" "thi.ng/geom-svg" "buddy/buddy-sign" "clj-http-status" "ca.clojurist/autoremote" "org.clojars.flatland/cake-marginalia" "hammock" "java-clj-parser" "net.ozias/swarm" "org.clojaras.gorsuch/rotary" "xdg-basedir" "me.shenfeng/async-http-client" "org.clojars.hoeck/lazymap" "com.climate/clj-newrelic" "org.clojars.ray1729/lein-immutant" "lein-migae" "fullcontact/full.template" "org.clojars.populaceio" "listora/env.test" "de.sojamo/oscp5" "com.hendrick/timbre-sqs" "com.madeye.clojure/lein-wsimport" "clj-demo" "com.github.pmerienne/trident-ml" "jsqlparser" "org.flatland/telemetry-client" "arr-xml" "narkisr/digitalocean" "org.marianoguerra/pipe" "webdriver-logic" "midje-notifier" "org.clojars.hsestupin/slark" "org.clojars.phr/korma.incubator" "org.clojars.paul/clj-hoptoad" "clojure.joda-time" "org.clojars.simplyharsh/catnip" "flare-clojure-test" "reactor" "org.clojars.aperiodic/commons-cli" "org.clojars.abpoms/lobos" "ilazarte/arbol" "am.ik/clj-gae-testing" "slf4j-logger" "dpp.rocks/manifest-destiny" "org.clojars.frozenlock/gzip64" "ragge/core.async" "chance" "org.clojars.bothacker.jmonkeyengine3/xmlpull-xpp3-1.1.4c" "com.dzer6/box-java-metadata-sdk-v2" "goby" "biiwide/nrepl-ssh" "org.clojars.kbarber/postgresql" "org.clojars.pauld/link" "misaeng" "script/lein-template" "clj-genomespace" "necessary-evil-rkelker/necessary-evil" "org.clojars.coldnew/opencv-native-macosx-x86_64" "com.davidykay/strokes" "rethinkdb-protobuf" "funcool/lentes" "advenjure" "com.breezeehr/gybe" "org.clojars.dth/liberator" "metosin/lokit" "com.banzai/postmark" "com.intentmedia/schema-transform" "cider-spy/cider-spy-nrepl" "org.clojars.enricodk/storm-contrib" "org.clojars.emh/vimclojure" "clj-tagsoup" "net.drib/mrhyde" "gered/webtools" "net.mikera/mikera-gui" "jp.taka2ru/i18n" "clojure-neo4j" "logic-extensions" "thing-babel/lein-template" "com.gfredericks/korma" "io.dropwizard/dropwizard-maxmind" "synaptic" "org.jibble.pircbot/pircbot" "org.clojars.rje/aleph" "theladders/lein-uberjar-deploy" "zeroem/lazy-chans" "taoensso.com/tower" "synfnetic" "ctdavies/appengine-magic" "org.jinterop/j-interop" "degree9/lounge.setup" "im.chit/hara.data.record" "justlogit" "javafx-wrapper" "com.github.johnwalker/bitcoin-protocol" "claptrap" "suricatta" "commons" "io.pedestal/pedestal.app" "org.flatland/io" "clj-gedcom" "ff-om-draggable" "svm-clj" "rm-hull/monet" "clj-slack-client" "mschuene/optimal-left-to-right-pattern-matching-automata" "org.clojars.gw666/sxqj" "jlk/math" "ffosrepl" "com.galebach/clj-devicemap" "hlisp-ui" "cljsjs/phoenix" "vaadin/lein-template" "pretty-ql" "org.conjure/conjure-script-plugin" "soda-ash" "lein-repljs" "com.vitalreactor/figwheel-sidecar" "zipcode" "print-foo-cljs" "clomert" "clj-hex-grid" "subsystem" "com.cemerick/clojure" "electric-it/tosca-lens" "com.ocpsoft/ocpsoft-pretty-time" "org.clojars.heinz/clossher" "org.clojars.drenda81/javafx-dialogs-0.0.4" "org.clojars.jfeng/cascading-dbmigrate" "stupiddb" "cirru/lein-sepal" "org.clojars.aaronc/clojurescript-with-qml-support" "jarppe/clog" "org.clojars.frozenlock/commons-lang" "brutil" "asset-minifier2" "com.taoensso.debug/nippy" "up/up-watch" "org.clojars.strongh/metrics_storm_2.9.1" "lookalike" "tmp" "utterlyidle-clj" "ursacorp/ragtime.sql.resources" "net.tanesha.recaptcha4j/recaptcha4j" "lein-deps-tree" "org.clojars.alexguev.ragtime/ragtime.core" "fujiin.mjolniir" "com.flipkart.flux/examples" "invaliduser/shafty" "brightnorth/uberjar-deploy" "org.codehaus.mojo/adtech-saaj" "weareswat/clj-meowallet" "im.chit/hara.data.combine" "broken-record" "com.vitalreactor.cassaforte" "mockup/lein-template" "myminerva" "com.redhat.qe/deltacloud.client" "vermilionsands/bilocate" "rill-event-sourcing/rill.uuid" "sleipnir" "org.codehaus.mojo/adtech-wasp" "org.bituf/oss-jdbc" "org.clojars.timewarrior/ua-parser" "org.clojars.nakkaya.jmonkeyengine/jme-swt" "org.clojars.rnewman/compojure" "org.clojars.liquidz/clj-gravatar" "manners/manners.bellman" "rodnaph/router" "org.linkedin/krati" "up/up-firefox-reload" "org.clojars.normanrichards/midje-html-checkers" "org.clojars.gjahad/riemann-extra" "flightweets-essencial" "com.birdseye-sw/birdseye" "com.pennymacusa/excel-formulas" "com.gfredericks/git-annex-utils" "testgpg" "oyako" "logicadb" "clj-finagle" "kezban" "stardate" "hoplon/twitter-bootstrap" "maple/lein-template" "palermo" "boot-component" "polymer.elements/google" "org.clojars.mikeitz/jogl-all-natives-linux-x86_64" "org.clojars.jmeeks/saxon-he" "thi.ng/luxor" "democracyworks.squishy" "cljsjs-package/lein-template" "overtone/at-at" "tranchis/incanter-io" "clj-jwt" "com.andrewmcveigh/jetty-component" "org.clojars.kjw/slf4j-simple" "wiggle" "raphanus" "com.larquin/wabbitmq" "vincit/curd" "org.msync/lein-scalac" "jfreeze" "bunshin" "pdfkit-clj" "tie/tie-client-java" "gaeshi/tsukuri" "k13labs/amazonica" "org.clojars.akiel/hap-client-clj" "clj-cloudq-client" "pe-apptxn-restsupport" "miscellany" "selfsame/pdfn" "examples" "puppetlabs/trapperkeeper-metrics" "lein-cprop" "org.clojars.blucas/mailblaster" "om-material" "overtone/scsynth-interop-linux-x86-lucid_jack" "org.clojars.bouzuya/backlog" "hbs" "org.clojars.cninja/jta" "seql" "nl.happyhacking/riemann-java-client" "org.clojars.scottjad/scriptjure" "org.danielsz/facetious" "keechma" "org.clojars.pallix/mrj-toolkit-stubs" "org.clojars.jaen/boot-reload" "boot/aether" "purnam/purnam-angular" "org.clojars.thnetos/langdetect-lib" "org.clojure.clr/data.json" "pinot" "w01fe/hungarian" "ninjudd/clj-ssh" "org.clojars.strongh/hbase" "zololabs/marconi" "jamesmacaulay/zelkova" "haversine" "org.clojars.test/linux-native" "org.vlacs/depends" "org.clojars.chapmang/snpeff" "org.domaindrivenarchitecture/dda-collected-crate" "ghostandthemachine/seesaw" "stch-library/schema" "com.flipkart.poseidon/poseidon" "org.clojars.sivajag/lein-daemon" "com.madeye.clojure.common/mongo" "jogl/jogl-gl2-osx" "rplevy/lein-clojurescript" "com.revelytix.logbacks/logback-stub" "om-next-cross-platform/lein-template" "org.clojars.intception/blob-storage" "ua_parser/ua-parser" "cljsjs/react-sanfona" "org.dthume/data.set" "org.pretendcow/lein-nrepl" "org.meshy/jshotgun" "thinktopic/matrix.fressian" "org.immutant/immutant-dependency-exclusions" "jarohen/lein-frodo" "huzhengquan/clj-kvsn" "org.clojars.boechat107/cloxls" "edu.ucdenver.ccp/kr-sesame-core" "boxuk/worker" "lein-sassy" "dwwoelfel/sablono" "ccfontes/noir-exception" "com.kaicode/teleport" "road/lein-template" "org.clojars.aperiodic/clojure-hbase" "io.johnwalker/bitcoin-protocol" "com.simple/instrumented-ring-jetty-adapter" "com.outpace/clj-http-fake" "adzerk/lein-beanstalk" "iveri-webservice-consumer" "ring-env" "fairbrook" "diane" "hindrance" "arubaito" "demo-20150223" "clojurewerkz/titanium" "lein-aot-filter" "org.clojars.scusack/clojurescript-cljs-jar" "gulo" "date-clj" "hitokotonushi-template/lein-template" "cheetah" "org.clojars.icylisper.j2ssh-core/j2ssh-core" "pushy-clj" "lein-write-git-sha" "monotony" "rusted-bridge" "jarohen/bounce.aleph" "fixturex/fixturex.core" "cc.qbits/twitter4j-stream" "suvash/irclj" "clj-yaml" "com.microsoft.sqlserver/sqljdbc4" "clj-simple-form" "com.apa512/cloudinary" "org.clojars.maravillas/ring-servlet-gae" "org.clojars.darmontou/turnstile" "weka" "org.clojars.mcav/mimeutils" "assert-clj" "lein-check-stdin" "org.clojars.ddellacosta/clj-aws-s3" "tangrammer/sequence-diagram-dashboard" "clj-orient" "org.clojars.ddudey/charva-macosx-native-deps" "rest-cljer" "com.wagjo/tools-cljs" "heartbeat" "antler/caribou-frontend" "com._0xab/clatrix" "org.clojars.cemerick/test-deploy" "org.clojars.edutilos/my-stuff" "org.clojars.maravillas/ring-gae" "com.gfredericks/svg-wrangler" "com.grammarly/omniconf" "clj-fn" "jenkins" "lambda" "org.clojars.osbert/hiccup-bootstrap" "synfnetic/symbolizer" "com.flipkart.flux/task" "tailrecursion/jquery-1.8.2" "bitsai/rummage" "com.palletops/pallet-jclouds" "marick/clojure-commons" "russellwhitaker/immuconf" "finagle-clojure/thriftmux" "org.clojars.kjw/wstx-asl" "burningswell/api-client" "react" "tcms-upload" "org.clojars.magomimmo/domina" "org.clojars.michaelsbradleyjr/hiccup-bootstrap" "re-boot" "cljsjs/vis" "knuthx" "xsc/optimus" "clj-otp" "mjdesa/twitter-api" "deriva" "clj-tiny-grid" "clj-science/jscience" "com.lyncode/jtwig-core-test-java6" "clj-mixpanel" "mavericklou/propertea" "katlex/github-cdn" "deraen/lein-sass4clj" "rabble" "fixturex/fixturex.context" "com.layerware/pgqueue" "org.clojars.ddudey/charva" "chee" "org.clojars.amit/commons-codec" "validation-clj" "eresources" "org.clojars.pw4ever/lein-marginalia-for-neko" "com.sietsma.korny/botty" "mq" "ehashman/sass4clj" "clj-format" "com.report.engine/clients" "zookem" "positano" "orientdb.clj" "dtolpin/gorilla-plot" "org.clojars.abbot/lein-ring" "com.palletops/pallet-cli" "com.aclaimant/server-core" "org.danielsz/om-flash-bootstrap" "incanter/incanter-processing" "clj-async-shell" "lein-cucumber" "net.offtopia/embang" "jarohen/jaws" "org.clojars.crimeminister/gaka" "mondo-clj" "lein-midje-doc" "org.clojars.sritchie09/cascalog" "myproj" "io.hvac.vigilia.logger/vigilia-logger" "juxt/reloaded.repl" "orgs.clojars.prabhasp/hatti" "cljsjs/showdown" "org.clojars.doo/fnparse" "net.avh4.math/geometry-clj" "org.clojars.chouser/swank-clojure" "clj-nui" "com.carouselapps/re-frame" "org.clojars.runa/conjure" "isaacsu/sandbar" "org.clojars.guilespi/clj-maxmind-geoip" "orgs.clojars.llcawthorne/too-hot" "anansi-site" "uncle" "com.ryanberdeen/lead" "net.colourcoding/cljs-clavatar" "pattern-match" "mascip.debug" "org.clojars.chapmanb/biomart-client" "spy/memcached" "im.chit/hara.expression.compile" "nicolasoury.updatable-map-reduce" "admin-kit" "org.clojars.elliot42/clj-aws-s3" "sgwr" "me.maverickbozo/shoreleave-browser" "jdt" "show-reflect" "clj-ssq" "org.clojars.daydream/webmine" "org.clojars.thirteen37/environ" "yolk-history" "org.clojars.cwyckoff/clj-cas-client" "adzerk/clj-github-docs" "varspotting" "com.brainbot/iniconfig" "org.clojars.mudphone/hadoop" "rc/lein-template" "org.clojars.hkgumbs/webserver" "posture" "org.clojars.hozumi/clj-assoc-seq" "org.clojars.pallix/pellet-el" "hellonico/lobos" "org.clojars.technomancy/rosado.processing" "garlic-storm" "clj-sql" "earthworm" "nrepl-looper" "org.cloudhoist/cljs" "org.clojars.touch/noir" "hodgepodge" "org.clojars.miau.biz/clojure-http-client" "org.clojars.brendanyounger/lein-git-version" "org.clojars.xsunsmile/clj-sql-builder" "mdrogalis/lein-unison" "com.arteemus/awsutil" "org.clojars.czan/stateful-test" "org.toomuchcode/clara-tools" "com.healthmarketscience/jackcess" "com.gfredericks/clj-usage-graph" "navis/untangled-websockets" "eightnotrump/ring-proxy" "tiny_word_segmenter" "datomic-schema" "shepherd/ring" "quil/processing-js" "io.dominic/hiccup" "bilus/clj-commons-exec" "mycroft" "gorillalabs/eventsourcing" "org.clojars.franks42/cljs-random-uuid" "net.mikera/core.matrix.testing" "clj-comm" "getlantern/clj-stripe" "persistent-memoizer" "hitman" "org.clojars.pdoctor/storm-json" "simple-lein-profile-merge" "dec" "clj-tika" "ode4j" "jsexp" "org.bodil/lein-error" "max7219" "heroku-clj" "papadom" "io.forward/sendgrid-clj" "org.clojars.bagucode/jna" "net.mikera/imagez" "org.raynes.clojars/marginalia" "com.github.drsnyder/beanstalk" "metaslurp" "trafficdb" "org.clojars.smallrivers/simplecaptcha" "vvvvalvalval/datomock" "dispatcher" "galdolber/clojure-objc" "de.kotka.gradle/gradle-plugin" "org.clojars.aaronc/google-closure-library-for-qml" "rojat-arrows" "nha/boot-uglify" "jark/leiningen" "tao-fork" "juxt-training-exercises-webapp/lein-template" "clojurewerkz/triennium" "cljsbuild-template" "rojat/rojat-arrows" "net.bendlas/data.xml" "foo-bar/lein-template" "org.clojars.chptx/compass" "kixi/bidi" "org.clojure/data.generators" "dar/assets" "tailrecursion/boot.ring" "com.flipkart.aesop/sample-mapper-processor-nesting-client" "twigs" "deraen/boot-from-jars" "vita-io/uberjar-deploy" "balzac" "org.clojars.toxi/re-frame" "amazon" "org.clojars.nakkaya/jbullet" "clojure-hl7-parser" "org.clojars.rayne/clj-oauth" "org.clojars.rhg135/fuse-jna" "nordic" "org.clojars.bob-zhang/rui-mig" "com.linkedin.databus/databus2-example-bst-producer-pkg" "com.cemerick/clojurescript.test" "clojib" "org.clojure/tools.nrepl" "yayitswei/lein-deploy-app" "yogthos/migratus" "clj-petfinder" "ring.middleware.closure-templates" "robert/bruce" "play-clj-nrepl" "masterzen/trapperkeeper-authorization" "steini-lein-jruby" "org.clojars.samaaron/rxtx-macosx-native-deps" "ring-secure-headers" "opennlp/maxent" "nile" "org.clojars.jtilles/korma" "org.trpr/serviceframework-seda" "default-db-format" "yahoo-finance-api" "ru.prepor/core.async" "ohsync" "cider-ci/clj-utils" "org.clojars.sorenmacbeth/lein-scrooge" "luminus-aleph" "dsann/dsann-cljs-utils" "ringfinger/corefinger" "com.yetanalytics/reek" "lib-tetris" "jig/http-kit" "thi.ng/fabric" "org.clojars.charles-stain/jbullet" "h5bp-clj" "org.clojars.processing-core/org.processing.pdf" "com.flipkart.aesop/sample-client-mysql-relay" "org.clojars.egamble/letplus" "complex" "juxt.modular/co-dependency" "calliope" "mccraigmccraig/pallet-aws" "com.hmsonline.bundle/disruptor" "clj-tandem" "com.basho.riak/riak-client" "paredit-widget" "lein-purefregec" "bidi" "lein-daemon" "solussd/react" "org.clojars.trptcolin/lein-search" "chart-utils" "android/clojure" "lambdacd-git" "justinhj/monger-session" "lazy-chans" "org.clojars.diogok/ring-gzip-middleware" "cljam" "com.duelinmarkers/datomic-schema" "org.clojars.pauld/boofcv" "org.clojars.kurtharriger/lein-hadoop" "net.experimentalworks/simplecron" "web-audio" "compojure-api/lein-template" "org.clojars.s450r1/dcm4che-tool-dcm2txt" "linden" "aviary/figwheel" "phash" "org.clojars.burma-shave/re-frame-locals" "ring-timbre" "org.clojars.ludothehun/calx" "im.chit/hara.protocol.constructor" "com.gfredericks/catch-data" "rplevy-draker/cascading-cassandra" "bounce-webapp/lein-template" "lein-bower" "org.clojars.magomimmo/shoreleave-core" "appengine-jeandenis" "wikia/commons" "com.flipkart.phantom/channel-handler-thrift" "org.rhq.examples/java-remote-api" "lein-cljsbuild" "funnel" "cljsjs/leaflet-draw" "com.vijaykiran.processing/org.processing.gluegen-rt" "ajom/lein-template" "com.oscaro/fleming" "taffowl/joplin.core" "org.flatland/cereal" "priyatam/replify" "au.com.auspost/cassius-java" "precursor/core.async" "clj-x256" "seqex" "ua.modnakasta/react-list" "com.relaynetwork/kinematic" "ring-heroku-requestremote" "com.unbounce/yopa" "empire" "org.clojars.alesguzik/storage-atom" "stch-library/dom" "org.mobileink.migae/lein-template" "units2" "mtnygard/ssh-repl" "net.thegeez/liberator" "limonada/lein-template" "cljsjs/dimple" "materia" "ymilky/franzy-nippy" "me.colindrake/ring-middleware-mime-versioned" "org.apache.cassandra/apache-cassandra" "org.clojars.lvh/lein-dash" "com.geekweaver/opmlkit" "priyatam/ring-micro" "jonase/kibit" "com.bizlogic/dev-tools" "zhuangxm/lein-easyconf" "mini-jmx" "org.wol/wol-utils" "org.hellonico/gajure" "de.ubercode.clostache/clostache" "slark" "yieldbot/prismo" "palm" "org.clojars.alesguzik/kioo" "org.clojars.danielbaun/schema-hiccup" "org.bitumenframework.jettify/jettify" "com.twitter/meat-locker" "spurious-aws-sdk-helper" "kixi/data.vendor.google-dfp" "ayato_p/test" "wicdmedia/halcyon" "com.softwarecurmudgeon.reloaded/lein-template" "org.clojars.jaen/kioo" "onyx-app/lein-template" "overt" "ragtime-migrator" "ring-tomcat-adapter" "org.clojars.sampeng/clj-markdown" "hicv" "net.info9/too-hot" "easypost-clj" "clj-safejdbc" "aatree/aautil" "java-jdbc/dsl" "org.apache.commons/commons-math" "restfn" "clj-gatling" "reagi" "org.clojars.cryptic_star/clj-swingrepl" "clojurize-protocol" "clj-madmimi" "tamaki-template" "clj-polling" "clj-json-patch" "pigeon" "javelin" "conjure" "com.hypirion/rexf" "cats/cats-channel" "com.intception.components/time-series" "jarohen/chime" "tron" "org.clojars.runa/medusa" "clj-blast" "ring-jetty/ring-ws" "oysteinj/minesweeper-webapp" "owl2jsonld" "org.clojars.wuhounited/opengl" "cirru/sepal" "java-sandwich" "clj-webjars" "net.drib/blade" "vkan" "tractor" "throttle" "dfs-clj" "synthread" "github-clj" "org.clojars.technomancy/heroku-api" "retro-fever/lein-template" "neush/cascalog-core" "org.clojars.dwwoelfel/mongofinil" "lein-parent-mg" "jarohen/eclj" "hirop-orientdb" "org.clojars.toxi/jocl" "lein-storm" "io.replikativ/kabel" "adzerk/cljs-console" "kueso/hindrance" "thread-expr" "adamwynne/lein-thrift" "dockerised-web-app/lein-template" "org.clojars.gilesc/rincanter" "io.pedestal/pedestal.immutant" "be.niwi/cljsoup" "clj-spy-log" "lein-droid" "listora/constraint" "org.clojars.liquidz/digest" "lemon-disc" "angularjs-app/lein-template" "gbuisson/compojure-api" "freactive.core" "re.typed" "me.arrdem/imprecise" "pe-fp-rest" "thinktopic/clj-aws-s3" "sauce-api" "lein-beanstalk" "flow" "clj-stream-stats" "props3t" "org.clojars.scusack/dommy" "leveldb-client" "org.clojars.daaku/clj-http" "com.report.engine/rest" "org.clojars.bothacker.jmonkeyengine3/nifty-style-black-1.2-snapshot" "timbre-over-slf4j" "reagent/lein-template" "org.clojars.nakkaya.javax.mail/dsn" "full-electron/lein-template" "metrics-clojure-graphite" "arohner/lein-dynamodb-local" "appengine-magic" "org.clojure/clojure" "degree9/lounge.org" "name.stadig/clojure" "org.clojars.stevesj76/clj-mail" "uswitch/lambada" "cc.qbits/tardis" "ring-middleware" "clj-obt" "org.clojars.magnusrw/stanford-parser" "changeling" "pipe-metrics" "clj-audiotagger" "listora/constraint-validations-email" "cljs-bcrypt-wrapper" "com.palletops/rbenv-crate" "net.roydesign/mrjadapter" "ns-tracker" "charset" "lein-test-automation" "rill-event-sourcing/rill.temp_store" "tigris" "io.hoplon.vendor/hammerjs" "net.java.dev.jogl/jogl-linux-i586" "com.ryanberdeen/lead-github" "nberger/libphonenumber-cljs" "org.timmc/enlive" "parsero" "com.flipkart.aesop/sample-kafka-client-cluster-consumer" "websesstudy" "late.system" "ring.middleware.statsd" "clj-loggly" "com.kurogitsune/clomoji" "traffic-police" "lein-pdf-server" "asimov" "digitalocean-api" "org.clojars.cschroed/appengine-magic" "io.exo/cloudstack-restrictions" "judgr" "dacom/lein-template" "ibycus" "org.clojars.slip/math" "org.msg/msg-dropbox" "react-native-externs" "clojuresque/clojuresque-base-runtime" "sv/lein-js-deps" "cadr" "color" "clojoml" "cljsjs/long" "lein-bikeshed" "lein-herokujetty" "bronsa/type.enum" "com.linkedin.databus/databus2-event-producer-common" "org.clojars.maxweber/clji18n" "com.hmsonline.storm/osgi-parent" "com.github.robertrolandorg/lein-eclipse" "sneerteam/commons-clj" "org.clojars.smallrivers/hudson" "hewtoy" "conskit" "org.clojars.kokos/storage" "youtube-api" "org.clojars.rexim/jinput-platform-natives" "org.clojars.guilespi/clj-crypto" "org.clojars.raynes/jedis" "org.steamboat/signing" "browserstack-clj" "fhofherr/clj-test-util" "org.clojars.intception/thread-expr" "radix-math" "clj_zhihu" "org.clojars.samr921/too-hot" "puppetlabs/pcp-client" "nearinfinity/clj-faker" "com.borkdal/clojure.image-metadata-utils" "lein-sphinx" "sql-tie" "com.palletops/clj-jclouds" "absurdfarce/cassaforte" "kephale/penumbra" "cuerdas" "org.clojars.obsoleter/clj-soap" "jaws" "t6/graph-transform" "midje-junit-formatter" "resrc-client" "cloverage-compojure-fix" "aika" "angular-simple/lein-template" "lein-nailgun" "com.firstlinq/om-ssr-node" "taoensso.com/timbre" "types-to-schema" "clojure-soup" "krulak/krulak-util" "storm-nimbus-swift" "im.chit/hara.class.inheritance" "clj-aws-sts" "net.java.dev.jogl/jogl-solaris-amd64" "cljr" "ship" "acorn/lein-template" "com.onekingslane.danger/jawsome-core" "cumulo/client" "lein-war" "rodnaph/confo" "nearestlocation" "nstools" "ganjika" "cascalog-elephantdb" "lein-autotest" "im.chit/ribol" "jaco" "clj-kinesis-worker" "clojurewerkz/elephant" "exaptic/fiver" "light-dependency" "swaggerator" "lymingtonprecision/qad-portal-scraper" "org.clojars.jedahu/lein-clojurescript" "suvlucky-client" "formative" "org.clojars.allforabit/dmx" "om-start/lein-template" "org.clojars.tn1ck/yfinance" "lein-protractor" "redl" "org.ojalgo/ojalgo" "tictactoe" "skel/lein-template" "erajure" "org.lambdaroyal/clojure-algorithms" "namban" "noprompt/fast-zip" "fluentsoftware/oauth-clj" "sajens" "io.rkn/conformity" "campanja_tau/cloverage" "alter-ego" "org.clojars.maxweber/lein-lazytest" "ithayer/lein-expectations" "io.framed/cee-format" "com.birdseye-sw/buster-cljs" "cubane/lein-template" "juxt/modular" "com.raspasov/protobuf" "clj-amazon-awis" "mongerr" "overtone/scsynth-interop-macosx-x86_64-common" "ctdavies.appengine-magic.ctdavies/appengine-magic" "org.clojars.agofilo/drawbridge" "arohner/wait-for" "juxt/buddy-sign" "cr8/grab-bag" "cc.artifice/codox.leiningen" "orming" "zhuli" "jopbox" "juxt/component-utils" "sample-java-app" "io.aviso/logging" "org.clojars.pdoctor/dst" "org.clojars.technomancy/test-project2" "org.clojars.intception/om-widgets" "org.clojars.simonjagoe/leiningen-war" "drtom/logbug" "org.clojars.somnium/clojure-db-object" "charva" "com.ingemark/pbxis" "sinistral/mantle" "com.aevy.geocoding" "hystrix-event-stream-clj" "org.clojure/core.typed" "umi" "org.clojars.dsabanin/clj-det-enc" "clj-trakt" "spine" "org.aperiodic/pi4j" "name.rumford/clojure-contracts-sugar" "org.clojars.nakkaya/markdownj" "org.clojars.brandonw/bwapi-proxy" "org.clojars.magomimmo/shoreleave-remote" "mahout" "com.flipkart.phantom/task-thrift" "cljsjs/openlayers" "uap-clj-hiveudf" "yogsototh/clojure-opennlp" "com.palletops/lein-crate" "metam/core" "clj-bandit" "kixi/incanter-excel" "com.gfredericks.forks.lein-dynalint/lein-dynalint" "clj-scientist" "org.clojars.ludug3r0/go-rules" "com.brunobonacci/safely" "mikeivanov/drake-hive" "clojure.unicode" "bond" "net.mikera/vectorz" "vrepl" "com.mefesto/lein-jetty" "pretzel" "jarohen/simple-brepl-core" "store" "org.clojars.hsestupin/storm-spirit" "org.timmc/lein-jit" "org.clojars.dth/lein-less" "org.clojars.strongh/clj-kafka" "mikos/vijual" "net.kronkltd/clj-airbrake" "prime-table" "org.clojars.hsanjeewa/inflections" "lein-report" "secrets" "org.clojars.brendanyounger/om-bootstrap" "hikari-cp" "graph-zip" "io.aviso/config" "storm/carbonite" "bunny" "gws/clj-plivo" "sing/sing-nist-adapter" "org.cosmi.scijors" "net.mikera/telegenic" "clj-tigase" "net.intensivesystems/conduit_rabbitmq" "maxwell" "datomic-session-store" "bronsa/neurotic" "org.trpr/example-hbase" "readyforzero/borg" "io.nervous/cljs-lambda" "jig/compojure" "com.github.pmerienne/stormy-pythian-web" "haystack" "org.clojars.zenbox/chinpu" "loggly-access" "dendrite" "org.clojars.ghaskins/protobuf" "tiensonqin/fnhouse-hacks" "adjunct" "coltnz/ccm-clj" "grappe" "java-tuio" "org.clojars.narma/react" "clj-by-example" "noencore" "net.cgrand/moustache" "web-clojure-0.4" "simpleconf" "am.ik/cloudure" "ring-canonical-domain" "org.clojars.nakkaya.jmonkeyengine/jme-ogrexml" "metrics-kafka-reporter/reporter-clj" "org.trpr/serviceframework-core" "newt" "clj-jtwig-java6-legacy-jee" "com.cemerick/splice" "keorn/anglican" "cantor" "self-build" "clj-duedil" "marmaduke/commons-math-3" "sgr/sgr-sound" "ztellman/cljfmt" "bultitude" "sanitize-filename" "logbug" "conveyor-sass" "jarohen/yoyo.cljs" "net.kirankulkarni/basenji" "org.maravillas/ring-core-gae" "org.clojars.paraseba/hiccup" "phi" "jobim-core" "cljsjs/google-diff-match-patch" "lein-vanity" "lein-cooper" "factual/durable-queue" "bunyan" "org.danielsz/om-header-bootstrap" "remworks/cljs-exif-reader" "im.chit/korra" "jepsen.etcd" "blobstore.api" "orgsync/metric-stash" "org.clojars.leanpixel/om" "modelo" "time-series-storage" "binaryage/dirac" "org.clojars.mhuebert/sablono" "expression-cache" "dwwoelfel/ring-anti-forgery" "aws-java-sdk" "listora/ring-ssl" "scenegraph" "ceterumnet-zclucy" "exaptic/watership" "zeus" "contemporary-words" "clj-blocks" "org.pingles/lein-protobuf" "org.clojars.shishkin/lein-lesscss" "cluppet" "redd/dfs-datastores" "rill-event-sourcing/rill.event_stream" "org.clojars.ponimas/url" "cljsjs/moment" "cascalog/serializable-fn" "happy" "my-first-website" "pjson" "cljsjs/jquery-daterange-picker" "com.farmlogs.conduit" "fwelectron/lein-template" "hazel" "org.apache.lucene/lucene-snowball" "halresource" "org.clojars.russpowers/dependency" "org.clojars.kjw/commons-io" "org.clojars.mylesmegyesi/socket-server" "antler/antlers" "bandalore" "org.clojars.cjoakim/dbmd" "com.rallydev/jarvis-test-platform" "arohner/repl-utils" "com.maitria/packthread" "tangrammer/cylon" "crowbar" "server-socket" "lein-koan" "jersey-clj" "cljs-server" "org.alexjg/jaws" "stask/sigar-native-deps" "org.clojars.nberger/sqlingvo" "meowallet/meowallet-clj" "quil/jogl-all-fat" "com.thelastcitadel/m29" "anjel" "bensu/react-widgets" "flat-layout/lein-template" "boot-codox" "org.clojars.smallrivers/kafka" "im.chit/hara.common.watch" "cat" "org.danielsz/framework" "org.clojars.pallix/mygengo" "caponia" "hoptoad/hoptoad-java-notifier" "raywillig/google-maps-web-api" "longshi" "me.arrdem/lein-cljfmt" "express/lein-template" "print-let" "spootnik/progress" "webnf/filestore" "org.clojars.charles-stain/jung-algorithms" "rm-hull/turtle" "org.clojars.kjw/lucene-memory" "hello-world" "frankiesardo/icepick-processor" "im.chit/hara.common.state" "node-webkit-cljs" "com.outpace/schema-transit" "jcurses" "org.clojars.qertoip/cleancr" "org.clojars.erluko/jxpath" "vfe.im.chit/cronj" "debug-tools" "qwal" "cljsjs/moment-range" "slackhog" "io.framed/clj-btable" "innuendo" "halfbaked" "org.clojars.ryanmcg/ring-anti-forgery" "bmabey/clj-esper" "environ/environ.core" "net.defn.ring/ring-jetty-adapter" "io.dropwizard.sharding/db-sharding-bundle" "vari" "rubberlike" "gov.usgs.eros/lcmap-client" "clobill" "org.clojars.alexnixon/clucy" "scad-clj" "ring-basic-authentication" "vespa-crabro" "net.kronkltd/plaza" "com.cjdes/primordial" "org.clojars.edtsech/xmlkit" "http-server" "cljs-start/lein-template" "gen-json" "com.gfredericks/test.check" "lein-html5-docs" "djwhitt/boot-sassc" "hyperion/hyperion-dev" "org.clojars.datasio/ring-swagger" "com.xnlogic/transducers" "org.signaut/couch-joiner" "pantomime" "org.clojars.kjw/clj-http" "clj-jdk7" "org.clojars.xulfus/camelarius" "clodown" "com.nuroko/nurokore" "org.collectd/plugin-api" "crustimoney" "serv/lein-template" "com.unbounce/clj-kryo" "bss/rampant" "org.clojars.cemerick/ring-gzip-middleware" "com.sprightco/dawdle" "pallet-map-merge" "aerial.fs" "boot-react-native/boot-template" "milesian/format-system-diagrams" "binj" "clj-protease" "audiolooper" "com.timezynk.domain/domain-core" "lein-ubersource" "com.wagjo/clojurescript" "ring-cljsjs" "jdbc-format" "tranchis/photon" "org.clojars.toxi/gluegen-rt" "org.onyx-platform/lib-onyx" "ring-sentry-component" "bugsnag-client" "org.clojars.sanityinc/scriptjure" "com.cbui/stefon" "kixi/data.vendor.integral" "modulo11" "edw/aleph" "org.clojars.whodidthis/cljs-uuid-utils" "com.keminglabs/c2po" "clj-jena" "hooks" "org.clojars.akiel/shortid" "lambdacd-value-stream" "defile" "org.clojure/java.jdbc" "cake-github" "knakk/query-bank" "uncomplicate/clojurecl" "uswitch/boot-containers" "jar-bundler" "clj-statsd" "pancang/lein-template" "compassus" "io.weft/gregor" "org.codehaus.mojo/adtech-jaxrpc" "cordova-om/lein-template" "com.kernelfish/streamlib" "schema-gen" "caribou/instagram-api" "asyntactic/korma.incubator" "io.riemann/riemann-java-client" "greengrocer" "gizmo-cloc" "echo-chamber/lein-template" "vlib" "flames" "lein-worker" "org.clojars.odekopoon/clojure" "test_clj.testng" "marathonclj" "frankiesardo/lab" "raywillig/mixpanel" "com.plumbee/clojure-hamcrest" "io.replikativ/incognito" "edocu/clj-communication" "hendekagon/garden" "elastic/elasticsearch-clojure" "org.clojars.ato/evil-couchdb" "texhyphclj" "org.clojure/tools.analyzer.jvm" "incanter/incanter-sql" "tokomakoma123/enfocus" "earthquick/seiscommon" "test-kafka" "clj-bandit/bandit-core" "hop/hop.core" "compojure-template" "hoplon/google-maps" "org.clojars.cemerick/enlive" "cljsjs/airbrake" "ethersim" "kirasystems/views" "org.eightnotrump/s3sync" "com.ninjudd/cljs-uuid-utils" "intception-widgets" "com.zenboxapp/taika" "clj-puppetdb" "utils" "t6/clide-core_2.10" "clj-grid-version" "ast-parser" "reagent-utils" "cljp-mysql" "clocks" "org.clojars.jaen/reagent" "clj-css" "jpcap/jpcap-macosx-native-deps" "clj-bitfields" "clj-hclust" "alandipert/hyperturbo" "leiningen-midje" "radicalzephyr/cljunit" "reloadable-app/lein-template" "generatorium" "clojurescript" "pangloss" "clj-mcp3008" "migratus" "com.gfredericks/chess" "com.redhat.qe/katello.auto" "im.chit/hara.sort" "notch/clj-fitbit" "net.apribase/kitashiro" "neide" "com.yetanalytics/instaparse-cljs" "lein-open" "org.clojars.gfrlog/clojureql" "sitecompiler" "org.clojars.bill/lein-environ" "com.nysavann/clj-nsbm" "org.craigandera/dynne" "ring-gae/ring-devel-gae" "cljx-start/lein-template" "com.flipkart.aesop/sample-hbase-client-cluster-consumer" "trampiti" "kuzushi" "me.raynes/cegdown" "thomasbo/auto" "org.clojars.propan/clj-jade" "redlock-clj" "figwheel-electron/lein-template" "cljsr/lein-template" "aperiodic-cljs/lein-template" "org.java-websocket/java-websocket" "salesforce-client" "thheller/aleph" "doge-cloj" "chlorine/js" "com.flipkart.lego/gracekelly-examples" "org.icanttype/euler-utils" "noeq" "org.clojars.hoeck/apache-pivot-wtk" "timgluz/spyglass" "com.emidln/destructured-component" "core-renderer" "dreamhost-dns" "org.bytopia/clojure" "funcool/promesa" "storm/storm-lib" "hbase" "caribou-admin" "ring.velocity" "com.ifesdjeen/balagan" "kixi/stats" "clj-less" "org.bodil/cljs-noderepl-root" "org.clojars.stuhacking/unibox" "ccfontes/cljmailgun" "myguidingstar/lein-notes" "org.clojars.zh217/zmq-async" "puppetlabs/clj-ldap" "dropwizard-clojure/dropwizard-clojure-example" "org.clojars.coldnew/native-loader" "yardbird" "org.clojars.zilti/clojstrap" "ysparse" "lambone/lein-template" "com.narkisr/gelfino" "org.immutant/immutant-jobs" "stylefruits/gniazdo" "org.clojars.oakes/tools.reader" "communicate" "org.trpr/example-batch" "ninja/lein-template" "org.clojars.originalsurfmex.processing/jogl-all-natives-windows-amd64" "clanhr/shared-deps" "org.clojars.biallym/jogl-native-linux-i586" "com.contentjon/swt-linux-64" "linked" "mummy" "taffowl/joplin.zookeeper" "tandem/couch" "codox-md" "ua.modnakasta/react-slider" "markov-chainz" "io.kimchi/cisd-jhdf5-native-deps" "clj-json-forthold" "estate" "org.clojars.hms/vishma-plugins" "typographer" "fluentsoftware/clj-oauth" "polygloton/pipeline" "org.clojars.dimagog/dimagog.util" "comonads" "clj-log4j2" "thi.ng/domus" "org.craigandera/eliza-clj" "org.clojars.intronic/clj-genomespace" "boot-project" "motive" "org.clojure.clr/tools.namespace" "durable-atom" "org.clojars.benzap/flyer" "im.chit/hara.extend" "immutant-web-component" "jline" "org.clojars.freemarmoset/rome" "xnlogic/clobber" "donbonifacio/test-speed-report" "candlepin-manifest-extractor" "clj-pat" "org.clojars.franks42/cljs-uuid-utils" "org.clojars.kjw/lucene-snowball" "hot-potato" "up/up-pedestal-webapp" "org.clojars.brunchboy/lein-protobuf" "cascading-simhash" "org.clojars.paraseba/ring-core" "blanc/lein-template" "jarohen/yoyo.jdbc-pool" "cljbukkit" "clojure-nltk" "org.clojars.noonian/vmfest" "eu.obliquo/herark" "org.clojars.zimilate/sandbar" "org.clojars.tcrawley/junk-deploy-test" "staples-sparx/kits" "com.kaicode/tweenie" "factory_time" "clj-pail-tap" "com.thelastictadel/jiralog" "jriengine" "core.typed" "org.clojars.sorenmacbeth/cascading.hbase" "crispin" "kinematic-middleware" "ilshad/pedestal-introspector" "redd/native-deps" "employeerepublic/er-cassandra" "luminus-migrations" "itsy" "com.notbot/litmus" "org.clojars.sean_devlin/too-hot" "io.dropwizard.discovery/dropwizard-service-discovery" "edn-config" "generuse" "tranchis/clauth" "org.jruby/jrubyparser" "org.clojars.toxi/clutch" "night-vision" "org.clojars.ctdean/compojure" "ring-transit-middleware" "com.keminglabs/jetty7-websockets-async" "cljs-template-one/lein-template" "mars0i/vectorz-clj" "elv.file-storage" "colorize" "gws/clj-balanced" "org.clojars.hsestupin/html-to-md" "com.ladderlife/om-css" "org.ajoberstar/clj-dotfiles" "org.flatland/resting" "cljnio" "org.clojure.frenchy64/clojure" "ui.navigate" "cljfreechart" "org.clojars.danjohansson/aleph" "mapdown" "helpers" "kixi/incanter-latex" "redis-queue-clj" "jp.ne.tir/vnctst-audio3" "jarohen/chord" "ursacorp/ragtime" "org.platypope/letterpress" "toyapp/lein-template" "org.clojars.ivajloip/lobos" "com.beardandcode.web/lein-template" "i9n" "lein-vertx" "crela" "ghost" "lein-miditest" "scenic" "org.clojars.earljwagner/clj-sspace" "workfloapp/app-macros" "tailrecursion/hoplon" "stubby" "hive/hive-common" "org.clojars.shawncarnell/clj-riak" "org.claw/claw" "org.clojars.cldwalker/table" "org.clojars.maxweber/lein-voom" "ifesdjeen.clj-pusher" "clj-pls" "com.gibbonspace/clj-webdriver" "org.clojars.zcaudate/watchtower" "lein-fig" "kephale/freenect" "hub.service/mailer" "bdisraeli/clj-mesos" "morse" "com.yetanalytics/ring-jwt-session" "cc" "no.andante.george/george-javafx" "art.uniroma2.it.org.openrdf.sesame/sesame-onejar" "com.phansen/clojure.pattern.matching" "stch-library/html" "ronda/routing-schema" "com.madeye.auth.client/auth" "bf.clj" "marshallbrekka/s3-wagon-private" "io.riemann/metrics3-riemann-reporter" "org.clojars.sorenmacbeth/cascading-simhash" "edu.umich.eecs.tac/aa-agent" "clj-gpio" "com.novemberain/pantomime" "com.standardtreasury/demo" "parqueue" "net.mikera/task" "org.clojars.danlarkin/postal" "me.panzoo/tools.cli" "simplecs" "incanter-latex" "force-serialize" "org.clojars.si/friend" "lein-s3-static-deploy" "reagent-figwheel/lein-template" "org.clojars.pepijndevos/jnativehook" "com.velisco/tagged" "org.clojars.maoe/rrd4clj" "burningswell/http-server" "narkisr/misaki-markdown" "cljsjs/oauthio" "org.clojars.rburrows/gapi" "lein-cljs" "caribou/antlers" "mccraigmccraig/pallet" "jamesdphillips/dieter" "org.clojars.justiniac/matchure" "ithayer/clj-record" "jdbc-ring-session" "org.clojars.osbert/rate-gate" "org.clojars.prepor/lein-test-out" "clj-orphanage" "org.clojars.stevelindsay/autocomplete" "nailgun-shim" "org.immutant/checkout-test-project" "nrepl-transcript" "shopify/shopify-core" "java-src" "com.flyingmachine/datomic-booties" "it.sk.spring.surf.clojure/spring-webscripts-addon-clojure" "org.clojars.maravillas/korma.incubator" "cc.qbits/nippy-lz4" "substantiation" "formation" "com.walmartlabs/nexus-crate" "pdf-to-image" "sumo" "org.clojars.nakkaya/arduino-firmata" "brunokim/loom" "com.flyingmachine/liberator-templates" "mvxcvi/multicodec" "org.clojars.defn/opennlp" "incanter/incanter-io" "com.javadocking/javadocking" "clj-soap" "clj-itunes" "ringfinger/secfinger" "one-more-minute/clarity" "org.clojars.stevelindsay/rsyntaxtextarea" "com.linkedin.databus/databus-client-test-util" "org.clojars.hiredman/java.jmx" "org.clojars.tamasjung/clojurescript" "im.chit/hara.expression.load" "skypeclj" "roxxi/jsonschema" "iveri-webservice" "rowtr/google-maps" "org.clojars.strad/smf-crate" "vimclojure/gradle" "com.ryanberdeen/lead-graphite-server" "org.clojars.verma/om" "org.clojars.lancepantz/clojure-solr" "com.mdrogalis/rotating-seq" "com.howardlewisship.patched/atticus" "blitz" "puppetlabs/postgresql" "org.clojars.taka2ru/scope" "com.github.quintona/storm-r" "metrics-clojure-ring" "mschristiansen/moustache" "org.clojars.sandaemc/euler" "jaguar-deps" "com.manigfeald/optimizer" "org.clojure.pasviegas/okku" "hornetq-clj/server" "functionalbytes/sibiro-swagger" "ib5k/component-schema" "tie/tiesql-client-clj" "naive-migrations" "parinfer-cljs" "nex/lein-template" "katox/clj-http-lite" "meh/sockets" "org.clojars.cbilson/javaplot" "cljsjs/pikaday" "lein-com-temp" "thinktopic/aljabr" "com.microsoft/sqljdbc4" "org.clojars.slyphon/compojure" "org.ol42/enlive" "com.palletops/pallet-hadoop" "totalperspective/lob" "de.sveri/closp-crud" "j18n" "lein-postgres" "org.maravillas/ring-jetty-adapter-gae" "biomart-client" "enos" "utilize" "com.keminglabs/vomnibus" "net.project-fifo/libsniffle" "zip-with" "poseur.org/aleph" "obb-ranking" "clj-integral" "adworj" "embang/gem" "io.replikativ/replikativ" "narkisr/carmine" "org.clojars.seant/hadoop-snappy-macosx-x86_64" "co.grubb/uri-handler" "naan" "spade" "org.clojars.r0man/lein-javac" "org.mycontroller/mycontroller-standalone" "com.powernoodle/normalize" "com.palletops/lein-test-env" "org.clojars.firesofmay/lapse" "org.clojars.wujiangcheng/clojurejs" "schopfhirsch/hash-router" "org.clojars.bothacker.jmonkeyengine3/jme3test" "clj-esearch" "facjure/zendown" "clj-numbers" "tranchis/photon-hazelcast" "obr-clj" "org.clojars.jcrossley3/please-delete-me" "org.clojars.gilesc/lingpipe" "clj-serial" "org.martinklepsch/hammerjs" "coercer" "net.sf.image4j/image4j" "clojopts" "vee" "jclemenson/korma" "org.clojars.jiyinyiyong/cirru-parser" "org.usfinformatics/clinicaltrials-gov" "org.clojars.rubbish/ring-middleware-format" "org.clojars.slocklin/jblas-sandybridge" "cljs-audiocapture" "org.clojars.pierrehenryperret/jackson-mapper-asl" "org.clojars.tel/clj-oauth" "org.clojars.trptcolin/clj-http-lite" "com.heyzk/figwheel-sidecar" "rm-hull/wireframes" "get-args" "yle-clj-jwt-oauth" "simple-open-ni-2/simple-open-ni" "org.clojars.wfreeman/testproj" "org.clojars.paraseba/ring" "propaganda" "broca" "org.clojars.michaelsbradleyjr/ring" "lein-tar" "library-example" "grotesql" "persi" "org.clojars.jeffdik/clj-ml" "org.clojars.jrk/clj-ldap" "clj-biosequence" "org.codehaus.mojo/adtech-jaxm" "mikeclarke/raven-clj" "sample" "grimvim" "com.relaynetwork/rn-hdfs" "sv/system.main" "cascading-clojure" "s-metric" "deview/lein-deview" "clj-etcd" "org.clojars.quoll/datomic-data-readers" "kibit-cljs" "com.clojars.jmeeks/clj-web-crawler" "danlentz/clj-wbtree" "com.ewen.utils-cljs" "org.clojars.miguno.nl.minvenj.nfi.storm/kafka-spout" "posh" "cljsjs/mathbox" "cdt" "org.bituf/clj-dbcp" "storm/storm-core" "org.clojars.tbatchelli/vboxjxpcom" "org.marianoguerra/rate-meter" "devec" "automagic-tools-milestones" "apache-commons-matrix" "com.smxemail/archiving-search" "org.clojars.rosejn/vimclojure" "stephenmuss/lein-deb" "clj-chess-engine" "jkugiya/lein-template" "nwcljs/lein-template" "clj-postageapp" "levand/immuconf" "ingest-lambda" "random-string" "lein-autolocalrepo" "pe-datomic-testutils" "postmon-clj" "cljsjs/phaser" "org.clojars.iamedu/clj-jsr223" "lazymapcat" "parquet-thrift-cascalog" "org.abpoms/polaris" "lein-iclojure" "dl" "org.ajoberstar/ike.cljj" "org.clojars.maxweber/clojure-bitly" "domaintypes/core" "name.benjaminpeter/xmpp-clj" "mysql/mysql-connector-java" "com.thelastcitadel/clojure-opennlp" "org.erinite/core-lib" "lein-repls" "luminus-jetty" "comb" "exemplar" "newproj" "damionjunk/nlp" "org.clojars.weavejester/ring-devel" "jarohen/phoenix.modules.cljs" "arre/lein-licenses" "lein-beandock" "reagent-reforms" "veloute" "degel/muxx" "org.clojars.kovasb/services" "org.clojars.philandstuff/polynome-interface" "com.velisco/herbert" "tranchis/clj-ml" "com._0xab/pgnparser" "cumin" "tiensonqin/self-kafka" "jeremys/cljss-units" "datsim" "sapobroker-clj" "prismatic/cljs-test" "com.klauer/java-watcher" "org.clojars.zacholauson/shoreleave-remote" "bigbrother" "zweikopf" "soup-clj" "clj-qrun" "lamina" "cljs-ratios" "org.trpr/batch-model" "fullcontact/full.async" "ring/ring-anti-forgery" "org.flatgui/flatguiskins" "clj-http-lite" "com.cemerick/web" "play-cljs" "om-with-tests/lein-template" "storm/kafka" "wishful" "gitlab_auth_proxy" "undersea" "org.clojars.smallrivers/ring-jetty8-adapter" "org.clojars.gilbertl/javformat" "com.spright/chard" "org.clojars.aseipp/jorbis" "novelette-sprite" "com.gfredericks/plumbing" "lein-haml" "jogl/jogl-gles2" "spootnik/raven" "org.clojars.bensu/commons-text" "clj-thamil" "clojure-refactoring" "clj-rss" "kira" "routes-clj" "net.thegeez/google-closure-library" "storm-clj/lein-template" "com.jaydeesimon/dropbox-repl" "kephale/ode4j" "com.github.pmerienne/stormy-pythian-sandbox" "org.clojars.taka2ru/resource-scope" "liftoffio/korma.incubator" "ledger" "com.ibdknox.socket_io_netty/socket-io-netty" "org.bodil/cljs-noderepl" "clj-timeframes" "org.clojars.onycloud/lein-control" "org.clojars.cvillecsteele/permacookie" "clanhr/i18n" "salem/lein-version-suffix" "pazustep/lein-version-suffix" "stories" "funcool/catacumba-prone" "net.hamnaberg.rest/collection-json-clj" "haruyama/lein-scalatest" "stoic" "korma.postgis" "textteaser/textteaser_2.10" "org.clojars.nakkaya/usb-serial-for-android-v010" "timing" "brolog" "thinktopic/chord-fressian" "nuka" "org.clojars.hendekagon/om" "overtone/jsyntaxpane" "cljsjs/medium-editor" "kiln" "com.adobe.flex/flex-messaging-opt" "org.clojars.onycloud/control" "incise-base-hiccup-layouts" "multim" "org.clojars.derrick/hdfs-clj" "dgellow/boot-hiccup" "org.clojars.gorsuch/rotary" "degree9/lounge.state" "morri/affy-annot" "com.cognitect/transit-java" "workflo/macros" "me.raynes/dox" "leiningen/lein-swank" "lune" "org.clojars.kapil/calabash-clj" "org.bitumenframework.jettify/jettify-parent" "com.cemerick/ring-gzip-middleware" "web-app/lein-template" "org.clojars.guilespi/less-awful-ssl" "carmine-mock-tool" "yeller/faster-uberjar" "troncle" "rhg135/node-hickory" "lein-init-jsvc" "bostonou/cljs-pprint" "experement/lein-template" "org.clojars.nmurray/la4j" "org.clojars.jfeng/jf-lib" "org.openuni.math.rand.core" "org.clojars.clizzin/hadoop-lzo" "ch.deepimpact/cas-throttle" "org.clojars.dandorman/shoreleave-core" "com.groupon.forks.lein-ring/lein-ring" "cljsjs/smooth-scroll" "lein-bundle" "lein-conjure" "com.flipkart.lego/gracekelly-cacheproviders" "clj-xpath" "ciste/ciste-core" "clojuresque/clojuresque-base" "clog" "com.gfredericks/like-format-but-with-named-args" "lein-pdo" "org.clojars.oliyh/lein-sass" "org.clojars.blucas/toplinked" "org.clojars.runa/runa.tools.logging" "com.keminglabs/chosen" "boynton/markdown-clj" "boolean-logic" "org.clojars.sbowman/clj-time" "tangrammer/date-utils" "thheller/shadow-devtools" "com.outpace/metrics-delivery" "org.commoncrawl/libcommoncrawl" "b1" "clj-itext" "puppetlabs/trapperkeeper-authorization" "com.raspasov/clj-ssh" "kegan" "org.clojars.tlorenzetti/jopendocument" "cats-monad-box" "funcool/postal-parser" "com.ubermenschconsulting/configurator" "mapbean" "org.clojars.jakemcc/clj-liquibase" "noincore" "circleci/clj-keyczar" "cryptick" "org.clojars.kokos/scrap" "org.clojars.alexguev.ragtime" "wildbit/simplelog" "sqlingvo" "clojuresque/clojuresque-nrepl" "org.clojars.liebke/clojure-new-json" "org.clojars.biallym/newt.event" "org.clojars.sgt/clj-ftp" "io.dropwizard.modules/dropwizard-elasticsearch" "org.clojars.nbeloglazov/lein-garden" "lein-uglifyjs-cli" "clj-jetty-proxy" "org.clojars.pierrehenryperret/mail" "clj-levy" "org.clojars.pingles/autodoc" "com.aeorkode.conversions" "timbre" "com.dayooliyide/morse-code" "polymer/gold" "com.malloc47/ragtime.sql" "clj-serializer" "com.linkedin.databus/metrics-core-impl" "secure-rand" "twitter-bot" "bn-service/lein-template" "collection-helpers" "clojure-encog" "clj-exchange" "org.clojars.tcrawley/snapshoddy" "com.banzai/utils" "cljx" "org.blancas/eisen" "com.hypirion/io" "sebastiansen/lein-test-out" "zsau/id3" "rsyntaxtextarea-clojars" "me.tagaholic/dlint" "clj-launchpad" "clojure-test-junit-output" "foldable-seq" "embang/planning" "org.clojars.crimeminister/hiccup" "acolfut" "zengarden" "de.otto/tesla-vault" "clj-detector" "org.clojars.arohner/clojure-contrib" "lein-just" "docker-client-clj" "lambic" "io.hoplon/jquery.daterangepicker" "org.clojars.gukjoon/ojdbc" "de.sushi3003/batteries" "mpg" "org.clojars.penglish/timeseriesforecasting" "clj-drone" "raywillig/numeral" "savagematt/lein-maven-s3-wagon" "mixradio/mr-clojure" "cljsjs/scrollex" "figleaf" "clojure-ttt" "quantisan/overtone" "bocko" "mischov/core.async" "org.clojars.mattdeboard/clojure-solr" "bronsa/swank-clojure" "delimc" "re-com" "org.clojars.caugmar/jopendocument" "liftoff/at-at" "org.clojars.echo/test.mock" "excellence" "lg-checkers" "cljsjs/csv" "aviary/aviary-ship" "com.banzai/ring-gzip" "ga-clj" "com.palletops/bakery-core-async" "cljsjs/tether" "lein-beanstalk-miker" "ed25519" "ring-jetty/ring-jetty-adapter" "org.clojars.btw0/clj-redis" "org.clojars.jarrodswart/feedparser-clj" "cake-marginalia" "degree9/boot-bower" "cotarmanach/dcljs-lib" "helpshift/durable-queue" "cdorrat/cloudwatch-log4j-appender" "jimbru/ragtime.sql" "org.clojars.gregwoodfill/lein-deploy-war" "mississippi" "resourceware" "cljsnwk/lein-template" "io.clj/logging" "org.dthume/data.set-db" "matthiasn/systems-toolbox-ui" "optimus-coffeescript" "lumprj" "org.immutant/fntest" "org.generuse/generuse-selenium" "de.kotka.gradle/gradle-utils" "epicea-result" "org.cloudhoist/closure-library" "hara" "wren-relsys/lein-template" "org.codehaus.mojo/adtech-builtin_serialization" "com.andrewberls/chronicle" "seinbot" "ccfontes/codox" "org.clojars.renewdoit/data.finger-tree" "org.clojars.ddossot/clj-hazelcast" "kremers/monger-session" "amalloy/ring-buffer" "org.clojars.luminousmonkey/javajom-native" "reepl" "tnrglobal/cassie" "org.clojars.akiel/lens-odm-diff" "the-flood" "org.clojars.febeling/clj-yaml" "zip-visit" "ofx-clj" "actors/gen" "ck.routing" "intronic/bio.ensembl" "noisesmith/groundhog" "mutils" "ez_mixpanel" "org.clojars.clavoie/str-named" "ashtonkemerling/pollex" "webnf.deps/core" "org.clojars.lancepantz/clojar" "com.nbeloglazov/hatnik-test-lib" "lein-gav" "org.clojars.bothacker.jmonkeyengine3/jme3-jogl-natives" "com.flyingmachine/datomic-junk" "org.bitlet/weupnp" "ring/ring-jetty-async-adapter" "org.timmc/lein-diff" "com.flipkart.poseidon/container" "data-to-html" "org.clojars.keli/core.async" "com.cognitect/transducers-java" "dirtyvagabond/drake-echostep" "giddyup-resources" "lupapiste/openpdf" "cljsjs/jquery" "mmm" "net.townunderground/sunrise" "org.clojars.liquidz/noir" "lib-2367" "ord.clojars.cheezey/jcurses" "org.clojuars.strad/smf-crate" "net.drib/algetic" "org.clojars.rosejn/jsyntaxpane" "org.clojars.weavejester/lein-clojars" "sethtrain/om-lein-template" "mimir" "org.clojars.orphid/lein-cljfmt" "contessa" "cljfmt-mk" "chlorine/core-cl2" "net.ozias.crypt/azjure" "sv/gcloud.storage.concat" "rerenderer-game/lein-template" "org.clojars.briprowe/aleph" "org.nakkaya.robocode/robocode.battle" "org.clojars.arohner/sandbar-session" "clojure-given" "newt/newt-x11" "clj-jdbi" "org.clojars.grinnbearit/opencsv-clj" "trammel" "org.clojars.godzillabytes/brecha" "com.github.kyleburton/perceptor" "mkremins/flense" "clj-eden/colls" "newt/newt-core" "lein-swank" "confetti/cloudformation" "storm/storm-kestrel" "link/link-socketio" "feedworker" "clj-sendcloud" "kephale/core.unify" "haruyama/lein-scalac" "org.clojars.paxnil/lein2-eclipse" "clj-rabbitmq" "math-infix" "org.clojars.ghoseb/antlr" "org.codehaus.mojo/adtech-local-policy" "clj-unidecode" "annagreta" "gclouj/bigquery" "drtom/honeysql" "clj-pushover" "extensomatic" "org.clojars.robertpfeiffer/clojure-contrib" "org.clojars.edw/gauze" "org.jmatt/postal" "org.clojars.scott/lein-nailgun" "cljs-kickoff/lein-template" "dotto" "org.clojars.jasonjckn/kafka_2.9.1" "elastic/lein-bin" "clj-pdf" "clj-style" "uni-stuttgart.ipsm/jaxb-edn-conversion" "gardn" "rkworks/rohan" "ring-cljsbuild" "clj-pivot" "org.clojars.intception/intception-widgets" "cc.qbits/alia" "com.palletops/script-exec" "watney" "edocu/nginx-clojure-ring-logger" "cljs-rete4f" "jnacl" "clamq/clamq-activemq" "im.chit/hara.expression.form" "com.lousycoder/clj-euler" "kixi/schema_gen" "factual/clj-helix" "venantius/ultra" "clj-http-streaming" "clj-havelock" "rsyntax-clojars" "org.clojars.sbowman/clostache" "boxuk/toolchain" "kraken-http-api/lein-template" "cljsjs/react-infinite" "co.zensight/header-utils" "org.clojars.gfodor/tokyocabinet" "org.clojars.jeffdik/core.logic" "lein-version-script" "fleetdb" "org.clojars.kovasb/clj-json" "org.codehaus.mojo/adtech-activation" "de.sveri/friendui" "fullcontact/http-kit" "org.clojars.runa/clj-kryo" "sonian/cartridge" "bigml/clj-bigml" "me.arrdem/clucy" "org.clojars.aperiodic/jedis" "oak" "org.clojars.nakkaya.jmonkeyengine/jme-awt" "serpent-talk" "lein-autotest-notify" "segmentio" "clj-graphite" "clj-heroku-api" "xumingmingv/testlib-storm" "antler/sandbar" "lein-servlet/adapter-jetty8" "clj-quartz-terracotta" "tailrecursion/boot-multiline-str" "simplycredit/amazonica" "com.flipkart.flux/client" "cljfg" "mourjo/elastisch" "hum" "mlehman/clj-http" "worker" "clj-di" "org.clojars.probabilityzero/fungp" "com.palletops/upstart-crate" "burningswell/weather" "net.solicode/middlebrow-swt.win32.win32.x86" "miraj/html" "com.adobe.flex/flex-messaging-remoting" "pdf.healthesignature" "arachne" "jithub" "tangrammer/epi-component" "ymilky/franzy-transit")
  id  "9"
  session  "b07f713c-2fbb-44f5-ae1b-175ebc1a39a7"
  status  ("done")
)
(<--
  id  "10"
  ns  "user"
  session  "2fd88622-a6b6-4ec7-afab-6a5e2773051a"
  value  "\"[]\""
)
(-->
  op  "eval"
  session  "2fd88622-a6b6-4ec7-afab-6a5e2773051a"
  code  "(do (require 'squiggly-clojure.core) (squiggly-clojure.core/check-kb 'cascalog-check.core \"/Users/eric/Projects/cascalog-check/src/cascalog_check/core.clj\"))"
  id  "12"
)
(<--
  id  "10"
  session  "2fd88622-a6b6-4ec7-afab-6a5e2773051a"
  status  ("done")
)
(<--
  changed-namespaces  (dict
                        user  (dict
                                aliases  (dict)
                                interns  (dict
                                           apropos  (dict
                                                      arglists  "([str-or-pattern])"
                                                      doc  "\"Given a regular expression or stringable thing, return a seq of all\\npublic definitions in all currently-loaded namespaces that match the\\nstr-or-pattern.\"")
                                           dir  (dict
                                                  arglists  "([nsname])"
                                                  doc  "\"Prints a sorted directory of public vars in a namespace\""
                                                  macro  "true")
                                           doc  (dict
                                                  arglists  "([name])"
                                                  doc  "\"Prints documentation for a var or special form given its name\""
                                                  macro  "true")
                                           find-doc  (dict
                                                       arglists  "([re-string-or-pattern])"
                                                       doc  "\"Prints documentation for any var whose documentation or name\\n contains a match for re-string-or-pattern\"")
                                           javadoc  (dict
                                                      arglists  "([class-or-object])"
                                                      doc  "\"Opens a browser window displaying the javadoc for the argument.\\n  Tries *local-javadocs* first, then *remote-javadocs*.\"")
                                           pp  (dict
                                                 arglists  "([])"
                                                 doc  "\"A convenience macro that pretty prints the last thing output. This is\\nexactly equivalent to (pprint *1).\""
                                                 macro  "true")
                                           pprint  (dict
                                                     arglists  "([object] [object writer])"
                                                     doc  "\"Pretty print object to the optional output writer. If the writer is not provided, \\nprint the object to the currently bound value of *out*.\"")
                                           pst  (dict
                                                  arglists  "([] [e-or-depth] [e depth])"
                                                  doc  "\"Prints a stack trace of the exception, to the depth requested. If none supplied, uses the root cause of the\\n  most recent repl exception (*e), and a depth of 12.\"")
                                           source  (dict
                                                     arglists  "([n])"
                                                     doc  "\"Prints the source code for the given symbol, if it can find it.\\n  This requires that the symbol resolve to a Var defined in a\\n  namespace for which the .clj is in the classpath.\\n\\n  Example: (source filter)\""
                                                     macro  "true"))))
  id  "10"
  repl-type  "clj"
  session  "2fd88622-a6b6-4ec7-afab-6a5e2773051a"
  status  ("state")
)
(<--
  id  "12"
  ns  "user"
  session  "2fd88622-a6b6-4ec7-afab-6a5e2773051a"
  value  "\"[]\""
)
(-->
  op  "eval"
  session  "2fd88622-a6b6-4ec7-afab-6a5e2773051a"
  code  "(do (require 'squiggly-clojure.core) (squiggly-clojure.core/check-tc 'cascalog-check.core))"
  id  "13"
)
(<--
  id  "12"
  session  "2fd88622-a6b6-4ec7-afab-6a5e2773051a"
  status  ("done")
)
(<--
  changed-namespaces  (dict)
  id  "12"
  repl-type  "clj"
  session  "2fd88622-a6b6-4ec7-afab-6a5e2773051a"
  status  ("state")
)
(<--
  id  "13"
  ns  "user"
  session  "2fd88622-a6b6-4ec7-afab-6a5e2773051a"
  value  "\"[]\""
)
(<--
  id  "13"
  session  "2fd88622-a6b6-4ec7-afab-6a5e2773051a"
  status  ("done")
)
(<--
  changed-namespaces  (dict)
  id  "13"
  repl-type  "clj"
  session  "2fd88622-a6b6-4ec7-afab-6a5e2773051a"
  status  ("state")
)
(-->
  op  "load-file"
  session  "b07f713c-2fbb-44f5-ae1b-175ebc1a39a7"
  file  "(ns cascalog-check.core\n  (:require [cascalog.logic.ops :as c]\n            [cascalog.cascading.stats :as stats]\n            [cascalog.cascading.io :as io]\n            [cascalog.logic.def :as d]\n            [cascalog.cascading.def :as cd]\n            [cascalog.api :refer :all]))\n\n(defn foo\n  \"I don't do a whole lot.\"\n  [x]\n  (println x \"Hello, World!\"))\n\n(defn run<-\n  \"A simple way to run a subquery (a query that starts with <- instead of ??<-).\"\n  ([query]\n   (first (??- query)))\n  ([queryfn & args]\n   (run<- (apply queryfn args))))\n\n\n(def  cat-tap [[\"foo\" 1 3]\n               [\"foo\" 2 100]\n               [\"foo\" 3 8]\n               [\"foo\" 4 12]\n               [\"bar\" 1 5]\n               [\"bar\" 2 22]\n               [\"bar\" 3 36]\n               [\"bar\" 4 212]\n               [\"baz\" 1 3]\n               [\"baz\" 2 100]\n               [\"baz\" 3 8]\n               [\"baz\" 4 300]])\n\n(def foo-catv '([3 100 8 12]))\n(def foo-baz-catv '([3 100 8]))\n(def foo-bar-catv '([3 100 8 12] [5 22 36 212]))\n(def foo-bar-baz-catv '([3 100 8] [5 22 36 212]))\n\n(defn lf [max lvl] (< lvl max))\n\n(defn lvl-f\n  [max]\n  (filterfn [lvl] (lf max lvl)))\n\n(defn codes [max]\n  (let [lvl-filter (lvl-f max)]\n    (??<- [?id ?lvl ?code]\n          (cat-tap ?id ?lvl ?code)\n          (:sort ?lvl)\n                                        ;(< ?lvl max)\n                                        ;(lf max ?lvl)\n          (lvl-filter ?lvl)\n          )))\n\n(defn catv-filter\n  \"returns true or false if a vector matches the categories or not.\n  categoriey can be nil or a lists of category vectors.\n  The vector will be shortened to match the comparison\n  category vectors as needed so that sub categories will match. \"\n  [categories v]\n  (if (empty? categories)\n    true\n    (reduce #(or (= (vec (take (count %2) v)) %2) %1) false categories)))\n\n(defn catv-f\n  \"Returns a function to filter vectors by a set of categories.\"\n  [categories]\n  (filterfn [v]\n            (catv-filter categories v)))\n\n\n\n\n(defbufferfn mk-vec [tuples]\n  [[(reduce #(conj %1 %2) [] (map first tuples))]])\n\n(defbufferfn dosum [tuples] [(reduce + (map first tuples))])\n\n\n\n(defn cats-sub []\n  (<- [?id ?catv]\n      (cat-tap ?id ?lvl ?code)\n      (:sort ?lvl)\n      (mk-vec ?code :> ?catv)))\n\n(defn cats [s]\n  (let [prods (cats-sub)\n        catf (catv-f s)]\n    (??<- [?id ?catv ?res]\n          (prods ?id ?catv)\n          (catv-filter s ?catv :> ?res)\n          (catf ?catv))))\n\n(defn filter-test [s]\n  (let [f (catv-filter s)]\n    (filter #(f (second %)) (run<- (cats-sub)))))\n\n(defn test-them []\n  {:cats (cats nil)\n   :allcats (filter-test nil)\n   :foo (filter-test foo-catv)\n   :foo-baz (filter-test foo-baz-catv)})\n"
  file-path  "/Users/eric/Projects/cascalog-check/src/cascalog_check/core.clj"
  file-name  "core.clj"
  id  "14"
)
(<--
  id  "14"
  session  "b07f713c-2fbb-44f5-ae1b-175ebc1a39a7"
  value  "#'cascalog-check.core/test-them"
)
(<--
  id  "14"
  session  "b07f713c-2fbb-44f5-ae1b-175ebc1a39a7"
  status  ("done")
)
(<--
  changed-namespaces  (dict
                        cascalog-check.core  (dict
                                               aliases  (dict
                                                          c  "cascalog.logic.ops"
                                                          cd  "cascalog.cascading.def"
                                                          d  "cascalog.logic.def"
                                                          io  "cascalog.cascading.io"
                                                          stats  "cascalog.cascading.stats")
                                               interns  (dict
                                                          <-  (dict
                                                                arglists  "([outvars & predicates])"
                                                                doc  "\"Constructs a query or predicate macro from a list of\\n  predicates. Predicate macros support destructuring of the input and\\n  output variables.\""
                                                                macro  "true")
                                                          ?-  (dict
                                                                arglists  "([& bindings])"
                                                                doc  "\"Executes 1 or more queries and emits the results of each query to\\n  the associated tap.\\n\\n  Syntax: (?- sink1 query1 sink2 query2 ...)  or (?- query-name sink1\\n  query1 sink2 query2)\\n\\n   If the first argument is a string, that will be used as the name\\n  for the query and will show up in the JobTracker UI.\"")
                                                          ?<-  (dict
                                                                 arglists  "([& args])"
                                                                 doc  "\"Helper that both defines and executes a query in a single call.\\n\\n  Syntax: (?<- out-tap out-vars & predicates) or (?<- \\\"myflow\\\"\\n  out-tap out-vars & predicates) ; flow name must be a static string\\n  within the ?<- form.\""
                                                                 macro  "true")
                                                          ??-  (dict
                                                                 arglists  "([& args])"
                                                                 doc  "\"Executes one or more queries and returns a seq of seqs of tuples\\n   back, one for each subquery given.\\n\\n  Syntax: (??- query1 query2 ...) or (??- query-name query1 query2 ...)\\n\\n  If the first argument is a string, that will be used as the name\\n  for the query and will show up in the JobTracker UI.\"")
                                                          ??<-  (dict
                                                                  arglists  "([& args])"
                                                                  doc  "\"Like ??-, but for ?<-. Returns a seq of tuples.\""
                                                                  macro  "true")
                                                          aggregatefn  (dict
                                                                         arglists  "([& body])"
                                                                         macro  "true")
                                                          aggregateop  (dict)
                                                          bufferfn  (dict
                                                                      arglists  "([& body])"
                                                                      macro  "true")
                                                          bufferiterfn  (dict
                                                                          arglists  "([& body])"
                                                                          macro  "true")
                                                          bufferiterop  (dict)
                                                          bufferop  (dict)
                                                          cascalog-tap  (dict
                                                                          arglists  "([source sink])")
                                                          cat-tap  (dict)
                                                          cats  (dict
                                                                  arglists  "([s])")
                                                          cats-sub  (dict
                                                                      arglists  "([])")
                                                          catv-f  (dict
                                                                    arglists  "([categories])"
                                                                    doc  "\"Returns a function to filter vectors by a set of categories.\"")
                                                          catv-filter  (dict
                                                                         arglists  "([categories v])"
                                                                         doc  "\"returns true or false if a vector matches the categories or not.\\n  categoriey can be nil or a lists of category vectors.\\n  The vector will be shortened to match the comparison\\n  category vectors as needed so that sub categories will match. \"")
                                                          codes  (dict
                                                                   arglists  "([max])")
                                                          combine  (dict
                                                                     arglists  "([& [g & gens]])"
                                                                     doc  "\"Merge the tuples from the subqueries together into a single\\n  subquery. Doesn't ensure uniqueness of tuples.\"")
                                                          compile-flow  (dict
                                                                          arglists  "([& args])"
                                                                          doc  "\"Inputs: [& args]\\n  Returns: ClojureFlow\\n\\n  Attaches output taps to some number of subqueries and creates a\\n  Cascading flow. The flow can be executed with `.complete`, or\\n  introspection can be done on the flow.\\n\\n  Syntax: (compile-flow sink1 query1 sink2 query2 ...)\\n  or (compile-flow flow-name sink1 query1 sink2 query2)\\n\\n   If the first argument is a string, that will be used as the name\\n  for the query and will show up in the JobTracker UI.\"")
                                                          compile-hadoop  (dict
                                                                            arglists  "([fd])"
                                                                            doc  "\"Inputs: [fd :- FlowDef]\\n  Returns: HadoopFlow\\n\\n  Compiles the supplied FlowDef into a Hadoop flow.\"")
                                                          construct  (dict
                                                                       arglists  "([output-fields raw-predicates])"
                                                                       doc  "\"Parses predicates and output fields and returns a proper subquery.\"")
                                                          cross-join  (dict)
                                                          defaggregatefn  (dict
                                                                            arglists  "([name doc-string? attr-map? [fn-args*] body])"
                                                                            doc  "\"Defines a filtering operation.\""
                                                                            macro  "true")
                                                          defaggregateop  (dict
                                                                            arglists  "([sym__33167__auto__ & body__33168__auto__])"
                                                                            macro  "true")
                                                          defbufferfn  (dict
                                                                         arglists  "([name doc-string? attr-map? [fn-args*] body])"
                                                                         doc  "\"Defines a filtering operation.\""
                                                                         macro  "true")
                                                          defbufferiterfn  (dict
                                                                             arglists  "([name doc-string? attr-map? [fn-args*] body])"
                                                                             doc  "\"Defines a filtering operation.\""
                                                                             macro  "true")
                                                          defbufferiterop  (dict
                                                                             arglists  "([sym__33167__auto__ & body__33168__auto__])"
                                                                             macro  "true")
                                                          defbufferop  (dict
                                                                         arglists  "([sym__33167__auto__ & body__33168__auto__])"
                                                                         macro  "true")
                                                          deffilterfn  (dict
                                                                         arglists  "([name doc-string? attr-map? [fn-args*] body])"
                                                                         doc  "\"Defines a filtering operation.\""
                                                                         macro  "true")
                                                          deffilterop  (dict
                                                                         arglists  "([sym__33167__auto__ & body__33168__auto__])"
                                                                         macro  "true")
                                                          defmain  (dict
                                                                     arglists  "([name & forms])"
                                                                     doc  "\"Defines an AOT-compiled function with the supplied\\n  `name`. Containing namespace must be marked for AOT compilation to\\n  have any effect.\""
                                                                     macro  "true")
                                                          defmapcatfn  (dict
                                                                         arglists  "([name doc-string? attr-map? [fn-args*] body])"
                                                                         doc  "\"Defines a mapcat operation.\""
                                                                         macro  "true")
                                                          defmapcatop  (dict
                                                                         arglists  "([sym__33167__auto__ & body__33168__auto__])"
                                                                         macro  "true")
                                                          defmapfn  (dict
                                                                      arglists  "([name doc-string? attr-map? [fn-args*] body])"
                                                                      doc  "\"Defines a map operation.\""
                                                                      macro  "true")
                                                          defmapop  (dict
                                                                      arglists  "([sym__33167__auto__ & body__33168__auto__])"
                                                                      macro  "true")
                                                          defparallelagg  (dict
                                                                            arglists  "([name doc-string? attr-map? & {:keys [init-var combine-var present-var]}])"
                                                                            doc  "\"Binds an efficient aggregator to the supplied symbol. A parallel\\n  aggregator processes each tuple through an initializer function,\\n  then combines the results each tuple's initialization until one\\n  result is achieved. `defparallelagg` accepts two keyword arguments:\\n\\n  :init-var -- A var bound to a fn that accepts raw tuples and returns\\n  an intermediate result; #'one, for example.\\n\\n  :combine-var -- a var bound to a fn that both accepts and returns\\n  intermediate results.\\n\\n  For example,\\n\\n  (defparallelagg sum\\n  :init-var #'identity\\n  :combine-var #'+)\\n\\n  Used as\\n\\n  (sum ?x :> ?y)\""
                                                                            macro  "true")
                                                          defprepfn  (dict
                                                                       arglists  "([name doc-string? attr-map? [fn-args*] body])"
                                                                       doc  "\"Defines a prepared operation.\""
                                                                       macro  "true")
                                                          div  (dict
                                                                 arglists  "([f & rest])"
                                                                 doc  "\"Perform floating point division on the arguments. Use this instead\\n   of / in Cascalog queries since / produces Ratio types which aren't\\n   serializable by Hadoop.\"")
                                                          dosum  (dict
                                                                   arglists  "([tuples])")
                                                          expand-query  (dict
                                                                          arglists  "([outvars & predicates])"
                                                                          macro  "true")
                                                          explain  (dict
                                                                     arglists  "([outfile query] [outfile sink-tap query])"
                                                                     doc  "\"Explains a query (by outputting a DOT file).\\n\\n  outfile  - String location for DOT file output.\\n  sink-tap - Sink tap for query. Shows on query explanation. Defaults to stdout if omitted.\\n  query    - Query to be explained.\\n\\n  Syntax: (explain outfile query)  or (explain outfile sink query)\\n\\n  Ex: (explain \\\"outfile.dot\\\" (<- [?a ?b] ([[1 2]] ?a ?b)))\\n  \"")
                                                          filter-test  (dict
                                                                         arglists  "([s])")
                                                          filterfn  (dict
                                                                      arglists  "([& body])"
                                                                      macro  "true")
                                                          filterop  (dict)
                                                          foo  (dict
                                                                 arglists  "([x])"
                                                                 doc  "\"I don't do a whole lot.\"")
                                                          foo-bar-baz-catv  (dict)
                                                          foo-bar-catv  (dict)
                                                          foo-baz-catv  (dict)
                                                          foo-catv  (dict)
                                                          get-out-fields  (dict
                                                                            arglists  "([_])"
                                                                            doc  "\"Get the fields of a generator.\"")
                                                          hfs-seqfile  (dict
                                                                         arglists  "([path & opts])"
                                                                         doc  "\"Creates a tap on HDFS using sequence file format. Different\\n   filesystems can be selected by using different prefixes for `path`.\\n\\n  Supports keyword option for `:outfields`. See\\n  `cascalog.cascading.tap/hfs-tap` for more keyword arguments.\\n\\n   See http://www.cascading.org/javadoc/cascading/tap/Hfs.html and\\n   http://www.cascading.org/javadoc/cascading/scheme/SequenceFile.html\"")
                                                          hfs-tap  (dict
                                                                     arglists  "([scheme path-or-file & {:keys [sinkmode sinkparts sink-template source-pattern templatefields], :as options}])"
                                                                     doc  "\"Returns a Cascading Hfs tap with support for the supplied scheme,\\n  opened up on the supplied path or file object. Supported keyword\\n  options are:\\n\\n  `:sinkmode` - can be `:keep`, `:update` or `:replace`.\\n\\n  `:sinkparts` - used to constrain the segmentation of output files.\\n\\n  `:source-pattern` - Causes resulting tap to respond as a GlobHfs tap\\n  when used as source.\\n\\n  `:sink-template` - Causes resulting tap to respond as a TemplateTap when\\n  used as a sink.\\n\\n  `:templatefields` - When pattern is supplied via :sink-template,\\n  this option allows a subset of output fields to be used in the\\n  naming scheme.\\n\\n  See f.ex. the\\n  http://docs.cascading.org/cascading/2.0/javadoc/cascading/scheme/local/TextDelimited.html\\n  scheme.\"")
                                                          hfs-textline  (dict
                                                                          arglists  "([path & opts])"
                                                                          doc  "\"Creates a tap on HDFS using textline format. Different filesystems\\n   can be selected by using different prefixes for `path`. Supported\\n   keyword options are:\\n\\n   `:outfields` - used to select the fields written to the tap\\n\\n   `:compression` - one of `:enable`, `:disable` or `:default`\\n\\n   See `cascalog.cascading.tap/hfs-tap` for more keyword arguments.\\n\\n   See http://www.cascading.org/javadoc/cascading/tap/Hfs.html and\\n   http://www.cascading.org/javadoc/cascading/scheme/TextLine.html\"")
                                                          jcompile-flow  (dict
                                                                           arglists  "([& args])"
                                                                           doc  "\"Inputs: [& args]\\n  Returns: HadoopFlow\"")
                                                          jflow-def  (dict
                                                                       arglists  "([& args])"
                                                                       doc  "\"Inputs: [& args]\\n  Returns: FlowDef\"")
                                                          lf  (dict
                                                                arglists  "([max lvl])")
                                                          lfs-seqfile  (dict
                                                                         arglists  "([path & opts])"
                                                                         doc  "\"Creates a tap that reads data off of the local filesystem in\\n   sequence file format.\\n\\n  Supports keyword option for `:outfields`. See\\n  `cascalog.cascading.tap/lfs-tap` for more keyword arguments.\\n\\n   See http://www.cascading.org/javadoc/cascading/tap/Lfs.html and\\n   http://www.cascading.org/javadoc/cascading/scheme/SequenceFile.html\"")
                                                          lfs-tap  (dict
                                                                     arglists  "([scheme path-or-file & {:keys [sinkmode sinkparts sink-template source-pattern templatefields], :as options}])"
                                                                     doc  "\"Returns a Cascading Lfs tap with support for the supplied scheme,\\n  opened up on the supplied path or file object. Supported keyword\\n  options are:\\n\\n  `:sinkmode` - can be `:keep`, `:update` or `:replace`.\\n\\n  `:sinkparts` - used to constrain the segmentation of output files.\\n\\n  `:source-pattern` - Causes resulting tap to respond as a GlobHfs tap\\n  when used as source.\\n\\n  `:sink-template` - Causes resulting tap to respond as a TemplateTap\\n  when used as a sink.\\n\\n  `:templatefields` - When pattern is supplied via :sink-template,\\n  this option allows a subset of output fields to be used in the\\n  naming scheme.\"")
                                                          lfs-textline  (dict
                                                                          arglists  "([path & opts])"
                                                                          doc  "\"Creates a tap on the local filesystem using textline format.\\n\\n  Supports keyword option for `:outfields`. See\\n  `cascalog.cascading.tap/lfs-tap` for more keyword arguments.\\n\\n   See http://www.cascading.org/javadoc/cascading/tap/Lfs.html and\\n   http://www.cascading.org/javadoc/cascading/scheme/TextLine.html\"")
                                                          lvl-f  (dict
                                                                   arglists  "([max])")
                                                          mapcatfn  (dict
                                                                      arglists  "([& body])"
                                                                      macro  "true")
                                                          mapcatop  (dict)
                                                          mapfn  (dict
                                                                   arglists  "([& body])"
                                                                   macro  "true")
                                                          mapop  (dict)
                                                          memory-source-tap  (dict
                                                                               arglists  "([tuples] [fields-in tuples])")
                                                          mk-vec  (dict
                                                                    arglists  "([tuples])")
                                                          name-vars  (dict
                                                                       arglists  "([gen vars])")
                                                          num-out-fields  (dict
                                                                            arglists  "([_])")
                                                          parallelagg  (dict)
                                                          predmacro  (dict
                                                                       arglists  "([& body])"
                                                                       doc  "\"A more general but more verbose way to create predicate macros.\\n\\n   Creates a function that takes in [invars outvars] and returns a\\n   list of predicates. When making predicate macros this way, you must\\n   create intermediate variables with gen-nullable-var(s). This is\\n   because unlike the (<- [?a :> ?b] ...) way of doing pred macros,\\n   Cascalog doesn't have a declaration for the inputs/outputs.\\n\\n   See https://github.com/nathanmarz/cascalog/wiki/Predicate-macros\\n  \""
                                                                       macro  "true")
                                                          predmacro*  (dict
                                                                        arglists  "([fun])"
                                                                        doc  "\"Functional version of predmacro. See predmacro for details.\"")
                                                          prepfn  (dict
                                                                    arglists  "([args & body])"
                                                                    doc  "\"Defines a prepared operation. Pass in an argument vector of two\\n  items and return either a function or a Map with two\\n  keywords; :operate and :cleanup\""
                                                                    macro  "true")
                                                          run<-  (dict
                                                                   arglists  "([query] [queryfn & args])"
                                                                   doc  "\"A simple way to run a subquery (a query that starts with <- instead of ??<-).\"")
                                                          select-fields  (dict
                                                                           arglists  "([gen fields])"
                                                                           doc  "\"Select fields of a named generator.\\n\\n  Example:\\n  (<- [?a ?b ?sum]\\n      (+ ?a ?b :> ?sum)\\n      ((select-fields generator [\\\"?a\\\" \\\"?b\\\"]) ?a ?b))\"")
                                                          sequence-file  (dict
                                                                           arglists  "([field-names])")
                                                          set-cascading-platform!  (dict
                                                                                     arglists  "([])")
                                                          set-in-memory-platform!  (dict
                                                                                     arglists  "([])")
                                                          stdout  (dict
                                                                    arglists  "([])"
                                                                    doc  "\"Creates a tap that prints tuples sunk to it to standard\\n   output. Useful for experimentation in the REPL.\"")
                                                          test-them  (dict
                                                                       arglists  "([])")
                                                          text-line  (dict
                                                                       arglists  "([] [field-names] [source-fields sink-fields] [source-fields sink-fields compression])")
                                                          to-tail  (dict
                                                                     arglists  "([g & {:keys [fields]}])")
                                                          union  (dict
                                                                   arglists  "([& gens])"
                                                                   doc  "\"Merge the tuples from the subqueries together into a single\\n  subquery and ensure uniqueness of tuples.\"")
                                                          with-job-conf  (dict
                                                                           arglists  "([conf & body])"
                                                                           doc  "\"Modifies the job conf for queries executed within the form. Nested\\n   with-job-conf calls will merge configuration maps together, with\\n   innermost calls taking precedence on conflicting keys.\""
                                                                           macro  "true")
                                                          with-serializations  (dict
                                                                                 arglists  "([serial-vec & forms])"
                                                                                 doc  "\"Enables the supplied serializations for queries executed within the\\n  form. Serializations should be provided as a vector of strings or\\n  classes, like so:\\n\\n  (import 'org.apache.hadoop.io.serializer.JavaSerialization)\\n  (with-serializations [JavaSerialization]\\n     (?<- ...))\\n\\n  Serializations nest; nested calls to with-serializations will merge\\n  and unique with serializations currently specified by other calls to\\n  `with-serializations` or `with-job-conf`.\""
                                                                                 macro  "true")))
                        cascalog.cascading.def  (dict
                                                  aliases  (dict
                                                             d  "cascalog.logic.def"
                                                             s  "cascalog.logic.fn")
                                                  interns  (dict
                                                             defprepfn  (dict
                                                                          arglists  "([name doc-string? attr-map? [fn-args*] body])"
                                                                          doc  "\"Defines a prepared operation.\""
                                                                          macro  "true")
                                                             meta-update  (dict
                                                                            arglists  "([sym f])"
                                                                            doc  "\"Returns the supplied symbol with the supplied `attr` map conj-ed\\n  onto the symbol's current metadata.\"")
                                                             prepared  (dict
                                                                         arglists  "([afn])"
                                                                         doc  "\"Marks the supplied operation as needing to be prepared by\\n  Cascading. The supplied op should take two arguments and return\\n  another IFn for use by Cascading.\"")
                                                             prepared?  (dict
                                                                          arglists  "([op])"
                                                                          doc  "\"Returns true if the supplied operation needs to be supplied the\\n  FlowProcess and operation call by Cascading on instantiation, false\\n  otherwise.\"")
                                                             prepfn  (dict
                                                                       arglists  "([args & body])"
                                                                       doc  "\"Defines a prepared operation. Pass in an argument vector of two\\n  items and return either a function or a Map with two\\n  keywords; :operate and :cleanup\""
                                                                       macro  "true")))
                        cascalog.cascading.io  (dict
                                                 aliases  (dict
                                                            conf  "cascalog.cascading.conf"
                                                            hadoop  "hadoop-util.core"
                                                            io  "clojure.java.io"
                                                            s  "schema.core")
                                                 interns  (dict
                                                            delete-all  (dict
                                                                          arglists  "([bindings])"
                                                                          doc  "\"delete-file-recursively is preemptive delete on exiting the code\\n   block for repl and tests run in the same process.\"")
                                                            delete-all-fs  (dict
                                                                             arglists  "([fs paths])")
                                                            delete-file-recursively  (dict
                                                                                       arglists  "([f & [silently]])"
                                                                                       doc  "\"Delete file f. If it's a directory, recursively delete all its contents.\\nRaise an exception if any deletion fails unless silently is true.\"")
                                                            get-bytes  (dict
                                                                         arglists  "([bytes])"
                                                                         doc  "\"Extracts a byte array from a Hadoop BytesWritable object. As\\n  mentioned in the [BytesWritable javadoc](http://goo.gl/cjjlD), only\\n  the first N bytes are valid, where N = `(.getLength byteswritable)`.\"")
                                                            log-levels  (dict)
                                                            temp-dir  (dict
                                                                        arglists  "([sub-path])"
                                                                        doc  "\"1) creates a directory in System.getProperty(\\\"java.io.tmpdir\\\")\\n   2) calls tempDir.deleteOn Exit() so the file is deleted by the jvm.\\n   reference: ;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4735419\\n   deleteOnExit is last resort cleanup on jvm exit.\"")
                                                            temp-path  (dict
                                                                         arglists  "([sub-path])")
                                                            tmp-dir-property  (dict
                                                                                doc  "\"Use this variable as key in JobConf if you want to override the\\n  root of temporary paths. See with-fs-tmp.\"")
                                                            unique-tmp-file  (dict
                                                                               arglists  "([s])"
                                                                               doc  "\"Inputs: [s :- s/Str]\\n  Returns: File\"")
                                                            uuid  (dict
                                                                    arglists  "([])")
                                                            with-fs-tmp  (dict
                                                                           arglists  "([[fs-sym & tmp-syms] & body])"
                                                                           doc  "\"Generates unique, temporary path names as subfolders of <root>/cascalog_reserved.\\n  <root> by default will be '/tmp', but you can configure it via the\\n  JobConf property `cascalog.io/tmp-dir-property`.\""
                                                                           macro  "true")
                                                            with-log-level  (dict
                                                                              arglists  "([level & body])"
                                                                              macro  "true")
                                                            with-tmp-files  (dict
                                                                              arglists  "([bindings & body])"
                                                                              macro  "true")
                                                            write-lines  (dict
                                                                           arglists  "([f lines])"
                                                                           doc  "\"Writes lines (a seq) to f, separated by newlines.  f is opened with\\n  writer, and automatically closed at the end of the sequence.\"")))
                        cascalog.cascading.stats  (dict
                                                    aliases  (dict
                                                               s  "schema.core")
                                                    interns  (dict
                                                               *flow-process*  (dict)
                                                               *op-call*  (dict)
                                                               CounterGroup  (dict)
                                                               CounterMap  (dict
                                                                             doc  "\"Clojure representation of Cascading's counters.\"")
                                                               CounterName  (dict)
                                                               StatsMap  (dict
                                                                           doc  "\"Clojure representation of the cascading.stats.CascadingStats data\\n  structure.\"")
                                                               clojure-file  (dict
                                                                               doc  "\"Returns a stats handler that prints the final stats map to the\\n  supplied file (or output stream, etc, see clojure.java.io/writer) as\\n  a Clojure data structure.\"")
                                                               counter-map  (dict
                                                                              arglists  "([stats])"
                                                                              doc  "\"Inputs: [stats :- CascadingStats]\\n  Returns: CounterMap\\n\\n  Digests the supplied stats object and returns a map of \"")
                                                               default-group  (dict
                                                                                doc  "\"This is the default group name for any stats recorded in the course\\n  of a Cascalog job.\"")
                                                               inc!  (dict
                                                                       arglists  "([counter] [group counter])"
                                                                       doc  "\"Inputs: ([counter :- CounterName] [group :- CounterGroup counter :- CounterName])\\n\\n  Increments the supplied counter in the supplied group by 1. Only\\n  takes effect in the context of a Cascading flow.\"")
                                                               inc-by!  (dict
                                                                          arglists  "([counter value] [group counter value])"
                                                                          doc  "\"Inputs: ([counter :- CounterName value :- s/Int] [group :- CounterGroup counter :- CounterName value :- s/Int])\\n\\n  Increments the supplied counter in the supplied group by, you\\n  guessed it, the supplied amount. Only takes effect in the context of\\n  a Cascading flow.\"")
                                                               join  (dict
                                                                       arglists  "([coll] [separator coll])"
                                                                       doc  "\"Returns a string of all elements in coll, as returned by (seq coll),\\n   separated by an optional separator.\"")
                                                               json-file  (dict
                                                                            doc  "\"Returns a stats handler that prints the final stats map to the\\n  supplied file (or output stream, etc, see clojure.java.io/writer) as\\n  a JSON data structure.\"")
                                                               map->json  (dict
                                                                            arglists  "([m])"
                                                                            doc  "\"My own little JSON fn to prevent pulling in a JSON library.\"")
                                                               map-by  (dict
                                                                         arglists  "([f xs])"
                                                                         doc  "\"Takes a value-generating function and a sequence and returns a map\\n  with the original seq elements as keys, and (f key) as each\\n  value.\"")
                                                               stats-map  (dict
                                                                            arglists  "([stats])"
                                                                            doc  "\"Inputs: [stats :- CascadingStats]\\n  Returns: StatsMap\\n\\n  Returns a Clojure map of relevant stats from the Cascading stats\\n  object.\"")
                                                               stdout  (dict
                                                                         arglists  "([] [group])"
                                                                         doc  "\"Inputs: ([] [group :- CounterGroup])\"")
                                                               to-file  (dict
                                                                          arglists  "([path json?])"
                                                                          doc  "\"Inputs: [path json? :- s/Bool]\\n\\n  path is passed to clojure.java.io/writer, so the argument can be a\\n   Writer, BufferedWriter, OutputStream, File, URI, URL, Socket, and\\n   String.\"")))
                        cascalog.logic.def  (dict
                                              aliases  (dict
                                                         s  "cascalog.logic.fn")
                                              interns  (dict
                                                         ->ParallelAggregator  (dict
                                                                                 arglists  "([init-var combine-var present-var])"
                                                                                 doc  "\"Positional factory function for class cascalog.logic.def.ParallelAggregator.\"")
                                                         ->ParallelBuffer  (dict
                                                                             arglists  "([init-var combine-var present-var num-intermediate-vars-fn buffer-var])"
                                                                             doc  "\"Positional factory function for class cascalog.logic.def.ParallelBuffer.\"")
                                                         ->Prepared  (dict
                                                                       arglists  "([op])"
                                                                       doc  "\"Positional factory function for class cascalog.logic.def.Prepared.\"")
                                                         aggregatefn  (dict
                                                                        arglists  "([& body])"
                                                                        macro  "true")
                                                         aggregateop  (dict)
                                                         aggregateop?  (dict
                                                                         arglists  "([op])")
                                                         bufferfn  (dict
                                                                     arglists  "([& body])"
                                                                     macro  "true")
                                                         bufferiterfn  (dict
                                                                         arglists  "([& body])"
                                                                         macro  "true")
                                                         bufferiterop  (dict)
                                                         bufferop  (dict)
                                                         bufferop?  (dict
                                                                      arglists  "([op])")
                                                         defaggregatefn  (dict
                                                                           arglists  "([name doc-string? attr-map? [fn-args*] body])"
                                                                           doc  "\"Defines a filtering operation.\""
                                                                           macro  "true")
                                                         defaggregateop  (dict
                                                                           arglists  "([sym__33167__auto__ & body__33168__auto__])"
                                                                           macro  "true")
                                                         defbufferfn  (dict
                                                                        arglists  "([name doc-string? attr-map? [fn-args*] body])"
                                                                        doc  "\"Defines a filtering operation.\""
                                                                        macro  "true")
                                                         defbufferiterfn  (dict
                                                                            arglists  "([name doc-string? attr-map? [fn-args*] body])"
                                                                            doc  "\"Defines a filtering operation.\""
                                                                            macro  "true")
                                                         defbufferiterop  (dict
                                                                            arglists  "([sym__33167__auto__ & body__33168__auto__])"
                                                                            macro  "true")
                                                         defbufferop  (dict
                                                                        arglists  "([sym__33167__auto__ & body__33168__auto__])"
                                                                        macro  "true")
                                                         defdefop  (dict
                                                                     arglists  "([sym & body])"
                                                                     doc  "\"Helper macro to define the def*op macros.\""
                                                                     macro  "true")
                                                         defdeprecated  (dict
                                                                          arglists  "([old new])"
                                                                          macro  "true")
                                                         deffilterfn  (dict
                                                                        arglists  "([name doc-string? attr-map? [fn-args*] body])"
                                                                        doc  "\"Defines a filtering operation.\""
                                                                        macro  "true")
                                                         deffilterop  (dict
                                                                        arglists  "([sym__33167__auto__ & body__33168__auto__])"
                                                                        macro  "true")
                                                         defhelper  (dict
                                                                      arglists  "([name op-sym body])")
                                                         defmapcatfn  (dict
                                                                        arglists  "([name doc-string? attr-map? [fn-args*] body])"
                                                                        doc  "\"Defines a mapcat operation.\""
                                                                        macro  "true")
                                                         defmapcatop  (dict
                                                                        arglists  "([sym__33167__auto__ & body__33168__auto__])"
                                                                        macro  "true")
                                                         defmapfn  (dict
                                                                     arglists  "([name doc-string? attr-map? [fn-args*] body])"
                                                                     doc  "\"Defines a map operation.\""
                                                                     macro  "true")
                                                         defmapop  (dict
                                                                     arglists  "([sym__33167__auto__ & body__33168__auto__])"
                                                                     macro  "true")
                                                         defparallelagg  (dict
                                                                           arglists  "([name doc-string? attr-map? & {:keys [init-var combine-var present-var]}])"
                                                                           doc  "\"Binds an efficient aggregator to the supplied symbol. A parallel\\n  aggregator processes each tuple through an initializer function,\\n  then combines the results each tuple's initialization until one\\n  result is achieved. `defparallelagg` accepts two keyword arguments:\\n\\n  :init-var -- A var bound to a fn that accepts raw tuples and returns\\n  an intermediate result; #'one, for example.\\n\\n  :combine-var -- a var bound to a fn that both accepts and returns\\n  intermediate results.\\n\\n  For example,\\n\\n  (defparallelagg sum\\n  :init-var #'identity\\n  :combine-var #'+)\\n\\n  Used as\\n\\n  (sum ?x :> ?y)\""
                                                                           macro  "true")
                                                         defparallelbuf  (dict
                                                                           arglists  "([name doc-string? attr-map? & {:keys [init-var combine-var extract-var num-intermediate-vars-fn buffer-var]}])"
                                                                           macro  "true")
                                                         filterfn  (dict
                                                                     arglists  "([& body])"
                                                                     macro  "true")
                                                         filterop  (dict)
                                                         map->ParallelAggregator  (dict
                                                                                    arglists  "([m__6289__auto__])"
                                                                                    doc  "\"Factory function for class cascalog.logic.def.ParallelAggregator, taking a map of keywords to field values.\"")
                                                         map->ParallelBuffer  (dict
                                                                                arglists  "([m__6289__auto__])"
                                                                                doc  "\"Factory function for class cascalog.logic.def.ParallelBuffer, taking a map of keywords to field values.\"")
                                                         map->Prepared  (dict
                                                                          arglists  "([m__6289__auto__])"
                                                                          doc  "\"Factory function for class cascalog.logic.def.Prepared, taking a map of keywords to field values.\"")
                                                         mapcatfn  (dict
                                                                     arglists  "([& body])"
                                                                     macro  "true")
                                                         mapcatop  (dict)
                                                         mapfn  (dict
                                                                  arglists  "([& body])"
                                                                  macro  "true")
                                                         mapop  (dict)
                                                         meta-conj  (dict
                                                                      arglists  "([sym attr])"
                                                                      doc  "\"Returns the supplied symbol with the supplied `attr` map conj-ed\\n  onto the symbol's current metadata.\"")
                                                         meta-update  (dict
                                                                        arglists  "([sym f])"
                                                                        doc  "\"Returns the supplied symbol with the supplied `attr` map conj-ed\\n  onto the symbol's current metadata.\"")
                                                         name-with-attributes  (dict
                                                                                 arglists  "([name macro-args])"
                                                                                 doc  "\"To be used in macro definitions.\\n   Handles optional docstrings and attribute maps for a name to be defined\\n   in a list of macro arguments. If the first macro argument is a string,\\n   it is added as a docstring to name and removed from the macro argument\\n   list. If afterwards the first macro argument is a map, its entries are\\n   added to the name's metadata map and the map is removed from the\\n   macro argument list. The return value is a vector containing the name\\n   with its extended metadata map and the list of unprocessed macro\\n   arguments.\"")
                                                         parallelagg  (dict)
                                                         throw-illegal  (dict
                                                                          arglists  "([& xs])")
                                                         update-arglists  (dict
                                                                            arglists  "([sym [form :as args]])"
                                                                            doc  "\"Scans the forms of a def* operation and adds an appropriate\\n  `:arglists` entry to the supplied `sym`'s metadata.\"")))
                        cascalog.logic.ops  (dict
                                              aliases  (dict
                                                         d  "cascalog.logic.def"
                                                         impl  "cascalog.logic.ops-impl"
                                                         s  "cascalog.logic.fn"
                                                         v  "cascalog.logic.vars")
                                              interns  (dict
                                                         !count  (dict)
                                                         <-  (dict
                                                               arglists  "([outvars & predicates])"
                                                               doc  "\"Constructs a query or predicate macro from a list of\\n  predicates. Predicate macros support destructuring of the input and\\n  output variables.\""
                                                               macro  "true")
                                                         ?-  (dict
                                                               arglists  "([& bindings])"
                                                               doc  "\"Executes 1 or more queries and emits the results of each query to\\n  the associated tap.\\n\\n  Syntax: (?- sink1 query1 sink2 query2 ...)  or (?- query-name sink1\\n  query1 sink2 query2)\\n\\n   If the first argument is a string, that will be used as the name\\n  for the query and will show up in the JobTracker UI.\"")
                                                         ?<-  (dict
                                                                arglists  "([& args])"
                                                                doc  "\"Helper that both defines and executes a query in a single call.\\n\\n  Syntax: (?<- out-tap out-vars & predicates) or (?<- \\\"myflow\\\"\\n  out-tap out-vars & predicates) ; flow name must be a static string\\n  within the ?<- form.\""
                                                                macro  "true")
                                                         ??-  (dict
                                                                arglists  "([& args])"
                                                                doc  "\"Executes one or more queries and returns a seq of seqs of tuples\\n   back, one for each subquery given.\\n\\n  Syntax: (??- query1 query2 ...) or (??- query-name query1 query2 ...)\\n\\n  If the first argument is a string, that will be used as the name\\n  for the query and will show up in the JobTracker UI.\"")
                                                         ??<-  (dict
                                                                 arglists  "([& args])"
                                                                 doc  "\"Like ??-, but for ?<-. Returns a seq of tuples.\""
                                                                 macro  "true")
                                                         aggregatefn  (dict
                                                                        arglists  "([& body])"
                                                                        macro  "true")
                                                         aggregateop  (dict)
                                                         all  (dict
                                                                arglists  "([& ops])"
                                                                doc  "\"Accepts any number of filtering ops and returns a new op that\\n  checks that every every one of the original filters passes. For\\n  example:\\n\\n  ((all #'even? #'positive? #'small?) ?x) ;; within some query\\n\\n  Is equivalent to:\\n\\n  ;; within some query\\n  (even? ?x :> ?temp1)\\n  (positive? ?x :> ?temp2)\\n  (small? ?x) :> ?temp3)\\n  (and ?temp1 ?temp2 ?temp3)\"")
                                                         any  (dict
                                                                arglists  "([& ops])"
                                                                doc  "\"Accepts any number of filtering ops and returns a new op that\\n  checks that at least one of the original filters passes. For\\n  example:\\n\\n  ((any #'even? #'positive? #'small?) ?x) ;; within some query\\n\\n  Is equivalent to:\\n\\n  ;; within some query\\n  (even? ?x :> ?temp1)\\n  (positive? ?x :> ?temp2)\\n  (small? ?x :> ?temp3)\\n  (or ?temp1 ?temp2 ?temp3)\"")
                                                         avg  (dict
                                                                doc  "\"Predicate operation that produces the average value of the\\n  supplied input variable. For example:\\n\\n  (let [src [[1] [2]]]\\n    (<- [?avg]\\n        (src ?x)\\n        (avg ?x :> ?avg)))\\n  ;;=> ([1.5])\"")
                                                         bufferfn  (dict
                                                                     arglists  "([& body])"
                                                                     macro  "true")
                                                         bufferiterfn  (dict
                                                                         arglists  "([& body])"
                                                                         macro  "true")
                                                         bufferiterop  (dict)
                                                         bufferop  (dict)
                                                         cascalog-tap  (dict
                                                                         arglists  "([source sink])")
                                                         collectify  (dict
                                                                       arglists  "([obj])")
                                                         combine  (dict
                                                                    arglists  "([& [g & gens]])"
                                                                    doc  "\"Merge the tuples from the subqueries together into a single\\n  subquery. Doesn't ensure uniqueness of tuples.\"")
                                                         comp  (dict
                                                                 arglists  "([& ops])"
                                                                 doc  "\"Accepts any number of predicate ops and returns an op that is the\\n  composition of those ops.\\n\\n  (require '[cascalog.ops :as c])\\n  ((c/comp #'str #'+) ?x ?y :> ?sum-string) ;; within some query\\n\\n  Is equivalent to:\\n\\n  ;; within some query\\n  (+ ?x ?y :> ?intermediate)\\n  (str ?intermediate :> ?sum-string)\"")
                                                         compile-flow  (dict
                                                                         arglists  "([& args])"
                                                                         doc  "\"Inputs: [& args]\\n  Returns: ClojureFlow\\n\\n  Attaches output taps to some number of subqueries and creates a\\n  Cascading flow. The flow can be executed with `.complete`, or\\n  introspection can be done on the flow.\\n\\n  Syntax: (compile-flow sink1 query1 sink2 query2 ...)\\n  or (compile-flow flow-name sink1 query1 sink2 query2)\\n\\n   If the first argument is a string, that will be used as the name\\n  for the query and will show up in the JobTracker UI.\"")
                                                         compile-hadoop  (dict
                                                                           arglists  "([fd])"
                                                                           doc  "\"Inputs: [fd :- FlowDef]\\n  Returns: HadoopFlow\\n\\n  Compiles the supplied FlowDef into a Hadoop flow.\"")
                                                         construct  (dict
                                                                      arglists  "([output-fields raw-predicates])"
                                                                      doc  "\"Parses predicates and output fields and returns a proper subquery.\"")
                                                         count  (dict)
                                                         cross-join  (dict)
                                                         defaggregatefn  (dict
                                                                           arglists  "([name doc-string? attr-map? [fn-args*] body])"
                                                                           doc  "\"Defines a filtering operation.\""
                                                                           macro  "true")
                                                         defaggregateop  (dict
                                                                           arglists  "([sym__33167__auto__ & body__33168__auto__])"
                                                                           macro  "true")
                                                         defalias  (dict
                                                                     arglists  "([name orig] [name orig doc])"
                                                                     doc  "\"Defines an alias for a var: a new var with the same root binding (if\\n  any) and similar metadata. The metadata of the alias is its initial\\n  metadata (as provided by def) merged into the metadata of the original.\""
                                                                     macro  "true")
                                                         defbufferfn  (dict
                                                                        arglists  "([name doc-string? attr-map? [fn-args*] body])"
                                                                        doc  "\"Defines a filtering operation.\""
                                                                        macro  "true")
                                                         defbufferiterfn  (dict
                                                                            arglists  "([name doc-string? attr-map? [fn-args*] body])"
                                                                            doc  "\"Defines a filtering operation.\""
                                                                            macro  "true")
                                                         defbufferiterop  (dict
                                                                            arglists  "([sym__33167__auto__ & body__33168__auto__])"
                                                                            macro  "true")
                                                         defbufferop  (dict
                                                                        arglists  "([sym__33167__auto__ & body__33168__auto__])"
                                                                        macro  "true")
                                                         deffilterfn  (dict
                                                                        arglists  "([name doc-string? attr-map? [fn-args*] body])"
                                                                        doc  "\"Defines a filtering operation.\""
                                                                        macro  "true")
                                                         deffilterop  (dict
                                                                        arglists  "([sym__33167__auto__ & body__33168__auto__])"
                                                                        macro  "true")
                                                         defmain  (dict
                                                                    arglists  "([name & forms])"
                                                                    doc  "\"Defines an AOT-compiled function with the supplied\\n  `name`. Containing namespace must be marked for AOT compilation to\\n  have any effect.\""
                                                                    macro  "true")
                                                         defmapcatfn  (dict
                                                                        arglists  "([name doc-string? attr-map? [fn-args*] body])"
                                                                        doc  "\"Defines a mapcat operation.\""
                                                                        macro  "true")
                                                         defmapcatop  (dict
                                                                        arglists  "([sym__33167__auto__ & body__33168__auto__])"
                                                                        macro  "true")
                                                         defmapfn  (dict
                                                                     arglists  "([name doc-string? attr-map? [fn-args*] body])"
                                                                     doc  "\"Defines a map operation.\""
                                                                     macro  "true")
                                                         defmapop  (dict
                                                                     arglists  "([sym__33167__auto__ & body__33168__auto__])"
                                                                     macro  "true")
                                                         defnk  (dict
                                                                  arglists  "([fn-name & fn-tail])"
                                                                  doc  "\"Define a function accepting keyword arguments. Symbols up to the first\\n keyword in the parameter list are taken as positional arguments.  Then\\n an alternating sequence of keywords and defaults values is expected. The\\n values of the keyword arguments are available in the function body by\\n virtue of the symbol corresponding to the keyword (cf. :keys destructuring).\\n defnk accepts an optional docstring as well as an optional metadata map.\""
                                                                  macro  "true")
                                                         defparallelagg  (dict
                                                                           arglists  "([name doc-string? attr-map? & {:keys [init-var combine-var present-var]}])"
                                                                           doc  "\"Binds an efficient aggregator to the supplied symbol. A parallel\\n  aggregator processes each tuple through an initializer function,\\n  then combines the results each tuple's initialization until one\\n  result is achieved. `defparallelagg` accepts two keyword arguments:\\n\\n  :init-var -- A var bound to a fn that accepts raw tuples and returns\\n  an intermediate result; #'one, for example.\\n\\n  :combine-var -- a var bound to a fn that both accepts and returns\\n  intermediate results.\\n\\n  For example,\\n\\n  (defparallelagg sum\\n  :init-var #'identity\\n  :combine-var #'+)\\n\\n  Used as\\n\\n  (sum ?x :> ?y)\""
                                                                           macro  "true")
                                                         defprepfn  (dict
                                                                      arglists  "([name doc-string? attr-map? [fn-args*] body])"
                                                                      doc  "\"Defines a prepared operation.\""
                                                                      macro  "true")
                                                         distinct-count  (dict
                                                                           doc  "\"Predicate operation that produces a count of all distinct\\n  values of the supplied input variable. For example:\\n\\n  (let [src [[1] [2] [2]]]\\n  (<- [?count]\\n      (src ?x)\\n      (distinct-count ?x :> ?count)))\\n  ;;=> ([2])\"")
                                                         div  (dict
                                                                arglists  "([f & rest])"
                                                                doc  "\"Perform floating point division on the arguments. Use this instead\\n   of / in Cascalog queries since / produces Ratio types which aren't\\n   serializable by Hadoop.\"")
                                                         each  (dict
                                                                 arglists  "([op])"
                                                                 doc  "\"Accepts an operation and returns a predicate macro that maps `op`\\n  across any number of input variables. For example:\\n\\n  ((each #'str) ?x ?y ?z :> ?x-str ?y-str ?z-str) ;; within some query\\n\\n  Is equivalent to\\n\\n  ;; within some query\\n  (str ?x :> ?x-str)\\n  (str ?y :> ?y-str)\\n  (str ?z :> ?z-str)\"")
                                                         expand-query  (dict
                                                                         arglists  "([outvars & predicates])"
                                                                         macro  "true")
                                                         explain  (dict
                                                                    arglists  "([outfile query] [outfile sink-tap query])"
                                                                    doc  "\"Explains a query (by outputting a DOT file).\\n\\n  outfile  - String location for DOT file output.\\n  sink-tap - Sink tap for query. Shows on query explanation. Defaults to stdout if omitted.\\n  query    - Query to be explained.\\n\\n  Syntax: (explain outfile query)  or (explain outfile sink query)\\n\\n  Ex: (explain \\\"outfile.dot\\\" (<- [?a ?b] ([[1 2]] ?a ?b)))\\n  \"")
                                                         filterfn  (dict
                                                                     arglists  "([& body])"
                                                                     macro  "true")
                                                         filterop  (dict)
                                                         first-n  (dict
                                                                    arglists  "([gen n & options__39000__auto__])"
                                                                    doc  "\"Accepts a generator and a number `n` and returns a subquery that\\n   produces the first n elements from the supplied generator. Two\\n   boolean keyword arguments are supported:\\n\\n  :sort -- accepts a vector of variables on which to sort. Defaults to\\n           nil (unsorted).\\n  :reverse -- If true, sorts items in reverse order. (false by default).\\n\\n  For example:\\n\\n  (def src [[1] [3] [2]]) ;; produces 3 tuples\\n\\n  ;; produces ([1 2] [3 4] [2 3]) when executed\\n  (def query (<- [?x ?y] (src ?x) (inc ?x :> ?y)))\\n\\n  ;; produces ([3 4]) when executed\\n  (first-n query 1 :sort [\\\"?x\\\"] :reverse true)\"")
                                                         fixed-sample  (dict
                                                                         arglists  "([gen n])"
                                                                         doc  "\"Returns a subquery getting a random sample of n elements from the generator\"")
                                                         fixed-sample-agg  (dict
                                                                             arglists  "([amt])")
                                                         get-out-fields  (dict
                                                                           arglists  "([_])"
                                                                           doc  "\"Get the fields of a generator.\"")
                                                         hfs-seqfile  (dict
                                                                        arglists  "([path & opts])"
                                                                        doc  "\"Creates a tap on HDFS using sequence file format. Different\\n   filesystems can be selected by using different prefixes for `path`.\\n\\n  Supports keyword option for `:outfields`. See\\n  `cascalog.cascading.tap/hfs-tap` for more keyword arguments.\\n\\n   See http://www.cascading.org/javadoc/cascading/tap/Hfs.html and\\n   http://www.cascading.org/javadoc/cascading/scheme/SequenceFile.html\"")
                                                         hfs-tap  (dict
                                                                    arglists  "([scheme path-or-file & {:keys [sinkmode sinkparts sink-template source-pattern templatefields], :as options}])"
                                                                    doc  "\"Returns a Cascading Hfs tap with support for the supplied scheme,\\n  opened up on the supplied path or file object. Supported keyword\\n  options are:\\n\\n  `:sinkmode` - can be `:keep`, `:update` or `:replace`.\\n\\n  `:sinkparts` - used to constrain the segmentation of output files.\\n\\n  `:source-pattern` - Causes resulting tap to respond as a GlobHfs tap\\n  when used as source.\\n\\n  `:sink-template` - Causes resulting tap to respond as a TemplateTap when\\n  used as a sink.\\n\\n  `:templatefields` - When pattern is supplied via :sink-template,\\n  this option allows a subset of output fields to be used in the\\n  naming scheme.\\n\\n  See f.ex. the\\n  http://docs.cascading.org/cascading/2.0/javadoc/cascading/scheme/local/TextDelimited.html\\n  scheme.\"")
                                                         hfs-textline  (dict
                                                                         arglists  "([path & opts])"
                                                                         doc  "\"Creates a tap on HDFS using textline format. Different filesystems\\n   can be selected by using different prefixes for `path`. Supported\\n   keyword options are:\\n\\n   `:outfields` - used to select the fields written to the tap\\n\\n   `:compression` - one of `:enable`, `:disable` or `:default`\\n\\n   See `cascalog.cascading.tap/hfs-tap` for more keyword arguments.\\n\\n   See http://www.cascading.org/javadoc/cascading/tap/Hfs.html and\\n   http://www.cascading.org/javadoc/cascading/scheme/TextLine.html\"")
                                                         jcompile-flow  (dict
                                                                          arglists  "([& args])"
                                                                          doc  "\"Inputs: [& args]\\n  Returns: HadoopFlow\"")
                                                         jflow-def  (dict
                                                                      arglists  "([& args])"
                                                                      doc  "\"Inputs: [& args]\\n  Returns: FlowDef\"")
                                                         juxt  (dict
                                                                 arglists  "([& ops])"
                                                                 doc  "\"Accepts any number of predicate ops and returns an op that is the\\n  juxtaposition of those ops.\\n\\n  (require '[cascalog.ops :as c])\\n  ((c/juxt #'+ #'- #'<) !x !y :> !sum !diff !mult) ;; within some query\\n\\n  Is equivalent to:\\n\\n  ;; within some query\\n  (+ !x !y :> !sum)\\n  (- !x !y :> !diff)\\n  (* !x !y :> !mult)\"")
                                                         lfs-seqfile  (dict
                                                                        arglists  "([path & opts])"
                                                                        doc  "\"Creates a tap that reads data off of the local filesystem in\\n   sequence file format.\\n\\n  Supports keyword option for `:outfields`. See\\n  `cascalog.cascading.tap/lfs-tap` for more keyword arguments.\\n\\n   See http://www.cascading.org/javadoc/cascading/tap/Lfs.html and\\n   http://www.cascading.org/javadoc/cascading/scheme/SequenceFile.html\"")
                                                         lfs-tap  (dict
                                                                    arglists  "([scheme path-or-file & {:keys [sinkmode sinkparts sink-template source-pattern templatefields], :as options}])"
                                                                    doc  "\"Returns a Cascading Lfs tap with support for the supplied scheme,\\n  opened up on the supplied path or file object. Supported keyword\\n  options are:\\n\\n  `:sinkmode` - can be `:keep`, `:update` or `:replace`.\\n\\n  `:sinkparts` - used to constrain the segmentation of output files.\\n\\n  `:source-pattern` - Causes resulting tap to respond as a GlobHfs tap\\n  when used as source.\\n\\n  `:sink-template` - Causes resulting tap to respond as a TemplateTap\\n  when used as a sink.\\n\\n  `:templatefields` - When pattern is supplied via :sink-template,\\n  this option allows a subset of output fields to be used in the\\n  naming scheme.\"")
                                                         lfs-textline  (dict
                                                                         arglists  "([path & opts])"
                                                                         doc  "\"Creates a tap on the local filesystem using textline format.\\n\\n  Supports keyword option for `:outfields`. See\\n  `cascalog.cascading.tap/lfs-tap` for more keyword arguments.\\n\\n   See http://www.cascading.org/javadoc/cascading/tap/Lfs.html and\\n   http://www.cascading.org/javadoc/cascading/scheme/TextLine.html\"")
                                                         limit  (dict
                                                                  arglists  "([n])")
                                                         limit-buffer  (dict
                                                                         arglists  "([n])")
                                                         limit-combine  (dict
                                                                          arglists  "([options n])")
                                                         limit-extract  (dict
                                                                          arglists  "([options n])")
                                                         limit-init  (dict
                                                                       arglists  "([sort-tuple & tuple])")
                                                         limit-maker  (dict
                                                                        arglists  "([n buffer-fn])")
                                                         limit-rank  (dict
                                                                       arglists  "([n])")
                                                         limit-rank-buffer  (dict
                                                                              arglists  "([n])")
                                                         mapcatfn  (dict
                                                                     arglists  "([& body])"
                                                                     macro  "true")
                                                         mapcatop  (dict)
                                                         mapfn  (dict
                                                                  arglists  "([& body])"
                                                                  macro  "true")
                                                         mapop  (dict)
                                                         max  (dict)
                                                         memory-source-tap  (dict
                                                                              arglists  "([tuples] [fields-in tuples])")
                                                         min  (dict)
                                                         mk-limit-comparator  (dict
                                                                                arglists  "([options])")
                                                         name-vars  (dict
                                                                      arglists  "([gen vars])")
                                                         negate  (dict
                                                                   arglists  "([op])"
                                                                   doc  "\"Accepts a filtering op and returns an new op that acts as the\\n  negation (or complement) of the original. For example:\\n\\n  ((negate #'string?) ?string-var) ;; within some query\\n\\n  Is equivalent to\\n\\n  ;; within some query\\n  (string? ?string-var :> ?temp-bool)\\n  (not ?temp-bool)\"")
                                                         num-out-fields  (dict
                                                                           arglists  "([_])")
                                                         parallelagg  (dict)
                                                         partial  (dict
                                                                    arglists  "([op & args])"
                                                                    doc  "\"Accepts an operation and fewer than normal arguments, and returns a\\n  new operation that can be called with the remaining unspecified\\n  args. For example, given this require and defmapop:\\n\\n  (require '[cascalog.logic.ops :as c])\\n  (defmapop plus [x y] (+ x y))\\n\\n  The following two forms are equivalent:\\n\\n  (let [plus-10 (c/partial plus 10)]\\n     (<- [?y] (src ?x) (plus-10 ?x :> ?y)))\\n\\n  (<- [?y] (src ?x) (plus-10 ?x :> ?y))\\n\\n  With the benefit that `10` doesn't need to be hardcoded into the\\n  first query.\"")
                                                         predmacro  (dict
                                                                      arglists  "([& body])"
                                                                      doc  "\"A more general but more verbose way to create predicate macros.\\n\\n   Creates a function that takes in [invars outvars] and returns a\\n   list of predicates. When making predicate macros this way, you must\\n   create intermediate variables with gen-nullable-var(s). This is\\n   because unlike the (<- [?a :> ?b] ...) way of doing pred macros,\\n   Cascalog doesn't have a declaration for the inputs/outputs.\\n\\n   See https://github.com/nathanmarz/cascalog/wiki/Predicate-macros\\n  \""
                                                                      macro  "true")
                                                         predmacro*  (dict
                                                                       arglists  "([fun])"
                                                                       doc  "\"Functional version of predmacro. See predmacro for details.\"")
                                                         prepfn  (dict
                                                                   arglists  "([args & body])"
                                                                   doc  "\"Defines a prepared operation. Pass in an argument vector of two\\n  items and return either a function or a Map with two\\n  keywords; :operate and :cleanup\""
                                                                   macro  "true")
                                                         re-parse  (dict
                                                                     arglists  "([pattern])"
                                                                     doc  "\"Accepts a regex `pattern` and a string argument `str` and returns\\n  the groups within `str` that match the supplied `pattern`.\"")
                                                         select-fields  (dict
                                                                          arglists  "([gen fields])"
                                                                          doc  "\"Select fields of a named generator.\\n\\n  Example:\\n  (<- [?a ?b ?sum]\\n      (+ ?a ?b :> ?sum)\\n      ((select-fields generator [\\\"?a\\\" \\\"?b\\\"]) ?a ?b))\"")
                                                         sequence-file  (dict
                                                                          arglists  "([field-names])")
                                                         set-cascading-platform!  (dict
                                                                                    arglists  "([])")
                                                         set-in-memory-platform!  (dict
                                                                                    arglists  "([])")
                                                         stdout  (dict
                                                                   arglists  "([])"
                                                                   doc  "\"Creates a tap that prints tuples sunk to it to standard\\n   output. Useful for experimentation in the REPL.\"")
                                                         sum  (dict)
                                                         text-line  (dict
                                                                      arglists  "([] [field-names] [source-fields sink-fields] [source-fields sink-fields compression])")
                                                         to-tail  (dict
                                                                    arglists  "([g & {:keys [fields]}])")
                                                         union  (dict
                                                                  arglists  "([& gens])"
                                                                  doc  "\"Merge the tuples from the subqueries together into a single\\n  subquery and ensure uniqueness of tuples.\"")
                                                         with-job-conf  (dict
                                                                          arglists  "([conf & body])"
                                                                          doc  "\"Modifies the job conf for queries executed within the form. Nested\\n   with-job-conf calls will merge configuration maps together, with\\n   innermost calls taking precedence on conflicting keys.\""
                                                                          macro  "true")
                                                         with-serializations  (dict
                                                                                arglists  "([serial-vec & forms])"
                                                                                doc  "\"Enables the supplied serializations for queries executed within the\\n  form. Serializations should be provided as a vector of strings or\\n  classes, like so:\\n\\n  (import 'org.apache.hadoop.io.serializer.JavaSerialization)\\n  (with-serializations [JavaSerialization]\\n     (?<- ...))\\n\\n  Serializations nest; nested calls to with-serializations will merge\\n  and unique with serializations currently specified by other calls to\\n  `with-serializations` or `with-job-conf`.\""
                                                                                macro  "true"))))
  id  "14"
  repl-type  "clj"
  session  "b07f713c-2fbb-44f5-ae1b-175ebc1a39a7"
  status  ("state")
)
(-->
  op  "eval"
  session  "b07f713c-2fbb-44f5-ae1b-175ebc1a39a7"
  code  "(in-ns 'cascalog-check.core)"
  id  "15"
)
(<--
  id  "15"
  ns  "cascalog-check.core"
  session  "b07f713c-2fbb-44f5-ae1b-175ebc1a39a7"
  value  "#namespace[cascalog-check.core]"
)
(<--
  id  "15"
  session  "b07f713c-2fbb-44f5-ae1b-175ebc1a39a7"
  status  ("done")
)
(<--
  changed-namespaces  (dict)
  id  "15"
  repl-type  "clj"
  session  "b07f713c-2fbb-44f5-ae1b-175ebc1a39a7"
  status  ("state")
)
(-->
  op  "eval"
  session  "2fd88622-a6b6-4ec7-afab-6a5e2773051a"
  code  "(do (require 'squiggly-clojure.core) (squiggly-clojure.core/check-ew 'cascalog-check.core))"
  id  "16"
)
(<--
  id  "16"
  out  "({:line 97, :column 12, :msg Function on var #'cascalog-check.core/catv-filter called with 1 args, but it is only known to take one of the following args: [categories v], :file file:/Users/eric/Projects/cascalog-check/src/cascalog_check/core.clj, :level :warning})\n"
  session  "2fd88622-a6b6-4ec7-afab-6a5e2773051a"
)
(<--
  id  "16"
  ns  "user"
  session  "2fd88622-a6b6-4ec7-afab-6a5e2773051a"
  value  "\"[{\\\"line\\\":97,\\\"column\\\":12,\\\"msg\\\":\\\"Function on var #'cascalog-check.core\\\\/catv-filter called with 1 args, but it is only known to take one of the following args: [categories v]\\\",\\\"file\\\":\\\"file:\\\\/Users\\\\/eric\\\\/Projects\\\\/cascalog-check\\\\/src\\\\/cascalog_check\\\\/core.clj\\\",\\\"level\\\":\\\"warning\\\"}]\""
)
(-->
  op  "eval"
  session  "2fd88622-a6b6-4ec7-afab-6a5e2773051a"
  code  "(do (require 'squiggly-clojure.core) (squiggly-clojure.core/check-kb 'cascalog-check.core \"/Users/eric/Projects/cascalog-check/src/cascalog_check/core.clj\"))"
  id  "17"
)
(<--
  id  "16"
  session  "2fd88622-a6b6-4ec7-afab-6a5e2773051a"
  status  ("done")
)
(<--
  changed-namespaces  (dict
                        cascalog-check.core  (dict
                                               aliases  (dict
                                                          c  "cascalog.logic.ops"
                                                          cd  "cascalog.cascading.def"
                                                          d  "cascalog.logic.def"
                                                          io  "cascalog.cascading.io"
                                                          stats  "cascalog.cascading.stats")
                                               interns  (dict
                                                          <-  (dict
                                                                arglists  "([outvars & predicates])"
                                                                doc  "\"Constructs a query or predicate macro from a list of\\n  predicates. Predicate macros support destructuring of the input and\\n  output variables.\""
                                                                macro  "true")
                                                          ?-  (dict
                                                                arglists  "([& bindings])"
                                                                doc  "\"Executes 1 or more queries and emits the results of each query to\\n  the associated tap.\\n\\n  Syntax: (?- sink1 query1 sink2 query2 ...)  or (?- query-name sink1\\n  query1 sink2 query2)\\n\\n   If the first argument is a string, that will be used as the name\\n  for the query and will show up in the JobTracker UI.\"")
                                                          ?<-  (dict
                                                                 arglists  "([& args])"
                                                                 doc  "\"Helper that both defines and executes a query in a single call.\\n\\n  Syntax: (?<- out-tap out-vars & predicates) or (?<- \\\"myflow\\\"\\n  out-tap out-vars & predicates) ; flow name must be a static string\\n  within the ?<- form.\""
                                                                 macro  "true")
                                                          ??-  (dict
                                                                 arglists  "([& args])"
                                                                 doc  "\"Executes one or more queries and returns a seq of seqs of tuples\\n   back, one for each subquery given.\\n\\n  Syntax: (??- query1 query2 ...) or (??- query-name query1 query2 ...)\\n\\n  If the first argument is a string, that will be used as the name\\n  for the query and will show up in the JobTracker UI.\"")
                                                          ??<-  (dict
                                                                  arglists  "([& args])"
                                                                  doc  "\"Like ??-, but for ?<-. Returns a seq of tuples.\""
                                                                  macro  "true")
                                                          aggregatefn  (dict
                                                                         arglists  "([& body])"
                                                                         macro  "true")
                                                          aggregateop  (dict)
                                                          bufferfn  (dict
                                                                      arglists  "([& body])"
                                                                      macro  "true")
                                                          bufferiterfn  (dict
                                                                          arglists  "([& body])"
                                                                          macro  "true")
                                                          bufferiterop  (dict)
                                                          bufferop  (dict)
                                                          cascalog-tap  (dict
                                                                          arglists  "([source sink])")
                                                          cat-tap  (dict)
                                                          cats  (dict
                                                                  arglists  "([s])")
                                                          cats-sub  (dict
                                                                      arglists  "([])")
                                                          catv-f  (dict
                                                                    arglists  "([categories])"
                                                                    doc  "\"Returns a function to filter vectors by a set of categories.\"")
                                                          catv-filter  (dict
                                                                         arglists  "([categories v])"
                                                                         doc  "\"returns true or false if a vector matches the categories or not.\\n  categoriey can be nil or a lists of category vectors.\\n  The vector will be shortened to match the comparison\\n  category vectors as needed so that sub categories will match. \"")
                                                          codes  (dict
                                                                   arglists  "([max])")
                                                          combine  (dict
                                                                     arglists  "([& [g & gens]])"
                                                                     doc  "\"Merge the tuples from the subqueries together into a single\\n  subquery. Doesn't ensure uniqueness of tuples.\"")
                                                          compile-flow  (dict
                                                                          arglists  "([& args])"
                                                                          doc  "\"Inputs: [& args]\\n  Returns: ClojureFlow\\n\\n  Attaches output taps to some number of subqueries and creates a\\n  Cascading flow. The flow can be executed with `.complete`, or\\n  introspection can be done on the flow.\\n\\n  Syntax: (compile-flow sink1 query1 sink2 query2 ...)\\n  or (compile-flow flow-name sink1 query1 sink2 query2)\\n\\n   If the first argument is a string, that will be used as the name\\n  for the query and will show up in the JobTracker UI.\"")
                                                          compile-hadoop  (dict
                                                                            arglists  "([fd])"
                                                                            doc  "\"Inputs: [fd :- FlowDef]\\n  Returns: HadoopFlow\\n\\n  Compiles the supplied FlowDef into a Hadoop flow.\"")
                                                          construct  (dict
                                                                       arglists  "([output-fields raw-predicates])"
                                                                       doc  "\"Parses predicates and output fields and returns a proper subquery.\"")
                                                          cross-join  (dict)
                                                          defaggregatefn  (dict
                                                                            arglists  "([name doc-string? attr-map? [fn-args*] body])"
                                                                            doc  "\"Defines a filtering operation.\""
                                                                            macro  "true")
                                                          defaggregateop  (dict
                                                                            arglists  "([sym__33167__auto__ & body__33168__auto__])"
                                                                            macro  "true")
                                                          defbufferfn  (dict
                                                                         arglists  "([name doc-string? attr-map? [fn-args*] body])"
                                                                         doc  "\"Defines a filtering operation.\""
                                                                         macro  "true")
                                                          defbufferiterfn  (dict
                                                                             arglists  "([name doc-string? attr-map? [fn-args*] body])"
                                                                             doc  "\"Defines a filtering operation.\""
                                                                             macro  "true")
                                                          defbufferiterop  (dict
                                                                             arglists  "([sym__33167__auto__ & body__33168__auto__])"
                                                                             macro  "true")
                                                          defbufferop  (dict
                                                                         arglists  "([sym__33167__auto__ & body__33168__auto__])"
                                                                         macro  "true")
                                                          deffilterfn  (dict
                                                                         arglists  "([name doc-string? attr-map? [fn-args*] body])"
                                                                         doc  "\"Defines a filtering operation.\""
                                                                         macro  "true")
                                                          deffilterop  (dict
                                                                         arglists  "([sym__33167__auto__ & body__33168__auto__])"
                                                                         macro  "true")
                                                          defmain  (dict
                                                                     arglists  "([name & forms])"
                                                                     doc  "\"Defines an AOT-compiled function with the supplied\\n  `name`. Containing namespace must be marked for AOT compilation to\\n  have any effect.\""
                                                                     macro  "true")
                                                          defmapcatfn  (dict
                                                                         arglists  "([name doc-string? attr-map? [fn-args*] body])"
                                                                         doc  "\"Defines a mapcat operation.\""
                                                                         macro  "true")
                                                          defmapcatop  (dict
                                                                         arglists  "([sym__33167__auto__ & body__33168__auto__])"
                                                                         macro  "true")
                                                          defmapfn  (dict
                                                                      arglists  "([name doc-string? attr-map? [fn-args*] body])"
                                                                      doc  "\"Defines a map operation.\""
                                                                      macro  "true")
                                                          defmapop  (dict
                                                                      arglists  "([sym__33167__auto__ & body__33168__auto__])"
                                                                      macro  "true")
                                                          defparallelagg  (dict
                                                                            arglists  "([name doc-string? attr-map? & {:keys [init-var combine-var present-var]}])"
                                                                            doc  "\"Binds an efficient aggregator to the supplied symbol. A parallel\\n  aggregator processes each tuple through an initializer function,\\n  then combines the results each tuple's initialization until one\\n  result is achieved. `defparallelagg` accepts two keyword arguments:\\n\\n  :init-var -- A var bound to a fn that accepts raw tuples and returns\\n  an intermediate result; #'one, for example.\\n\\n  :combine-var -- a var bound to a fn that both accepts and returns\\n  intermediate results.\\n\\n  For example,\\n\\n  (defparallelagg sum\\n  :init-var #'identity\\n  :combine-var #'+)\\n\\n  Used as\\n\\n  (sum ?x :> ?y)\""
                                                                            macro  "true")
                                                          defprepfn  (dict
                                                                       arglists  "([name doc-string? attr-map? [fn-args*] body])"
                                                                       doc  "\"Defines a prepared operation.\""
                                                                       macro  "true")
                                                          div  (dict
                                                                 arglists  "([f & rest])"
                                                                 doc  "\"Perform floating point division on the arguments. Use this instead\\n   of / in Cascalog queries since / produces Ratio types which aren't\\n   serializable by Hadoop.\"")
                                                          dosum  (dict
                                                                   arglists  "([tuples])")
                                                          expand-query  (dict
                                                                          arglists  "([outvars & predicates])"
                                                                          macro  "true")
                                                          explain  (dict
                                                                     arglists  "([outfile query] [outfile sink-tap query])"
                                                                     doc  "\"Explains a query (by outputting a DOT file).\\n\\n  outfile  - String location for DOT file output.\\n  sink-tap - Sink tap for query. Shows on query explanation. Defaults to stdout if omitted.\\n  query    - Query to be explained.\\n\\n  Syntax: (explain outfile query)  or (explain outfile sink query)\\n\\n  Ex: (explain \\\"outfile.dot\\\" (<- [?a ?b] ([[1 2]] ?a ?b)))\\n  \"")
                                                          filter-test  (dict
                                                                         arglists  "([s])")
                                                          filterfn  (dict
                                                                      arglists  "([& body])"
                                                                      macro  "true")
                                                          filterop  (dict)
                                                          foo  (dict
                                                                 arglists  "([x])"
                                                                 doc  "\"I don't do a whole lot.\"")
                                                          foo-bar-baz-catv  (dict)
                                                          foo-bar-catv  (dict)
                                                          foo-baz-catv  (dict)
                                                          foo-catv  (dict)
                                                          get-out-fields  (dict
                                                                            arglists  "([_])"
                                                                            doc  "\"Get the fields of a generator.\"")
                                                          hfs-seqfile  (dict
                                                                         arglists  "([path & opts])"
                                                                         doc  "\"Creates a tap on HDFS using sequence file format. Different\\n   filesystems can be selected by using different prefixes for `path`.\\n\\n  Supports keyword option for `:outfields`. See\\n  `cascalog.cascading.tap/hfs-tap` for more keyword arguments.\\n\\n   See http://www.cascading.org/javadoc/cascading/tap/Hfs.html and\\n   http://www.cascading.org/javadoc/cascading/scheme/SequenceFile.html\"")
                                                          hfs-tap  (dict
                                                                     arglists  "([scheme path-or-file & {:keys [sinkmode sinkparts sink-template source-pattern templatefields], :as options}])"
                                                                     doc  "\"Returns a Cascading Hfs tap with support for the supplied scheme,\\n  opened up on the supplied path or file object. Supported keyword\\n  options are:\\n\\n  `:sinkmode` - can be `:keep`, `:update` or `:replace`.\\n\\n  `:sinkparts` - used to constrain the segmentation of output files.\\n\\n  `:source-pattern` - Causes resulting tap to respond as a GlobHfs tap\\n  when used as source.\\n\\n  `:sink-template` - Causes resulting tap to respond as a TemplateTap when\\n  used as a sink.\\n\\n  `:templatefields` - When pattern is supplied via :sink-template,\\n  this option allows a subset of output fields to be used in the\\n  naming scheme.\\n\\n  See f.ex. the\\n  http://docs.cascading.org/cascading/2.0/javadoc/cascading/scheme/local/TextDelimited.html\\n  scheme.\"")
                                                          hfs-textline  (dict
                                                                          arglists  "([path & opts])"
                                                                          doc  "\"Creates a tap on HDFS using textline format. Different filesystems\\n   can be selected by using different prefixes for `path`. Supported\\n   keyword options are:\\n\\n   `:outfields` - used to select the fields written to the tap\\n\\n   `:compression` - one of `:enable`, `:disable` or `:default`\\n\\n   See `cascalog.cascading.tap/hfs-tap` for more keyword arguments.\\n\\n   See http://www.cascading.org/javadoc/cascading/tap/Hfs.html and\\n   http://www.cascading.org/javadoc/cascading/scheme/TextLine.html\"")
                                                          jcompile-flow  (dict
                                                                           arglists  "([& args])"
                                                                           doc  "\"Inputs: [& args]\\n  Returns: HadoopFlow\"")
                                                          jflow-def  (dict
                                                                       arglists  "([& args])"
                                                                       doc  "\"Inputs: [& args]\\n  Returns: FlowDef\"")
                                                          lf  (dict
                                                                arglists  "([max lvl])")
                                                          lfs-seqfile  (dict
                                                                         arglists  "([path & opts])"
                                                                         doc  "\"Creates a tap that reads data off of the local filesystem in\\n   sequence file format.\\n\\n  Supports keyword option for `:outfields`. See\\n  `cascalog.cascading.tap/lfs-tap` for more keyword arguments.\\n\\n   See http://www.cascading.org/javadoc/cascading/tap/Lfs.html and\\n   http://www.cascading.org/javadoc/cascading/scheme/SequenceFile.html\"")
                                                          lfs-tap  (dict
                                                                     arglists  "([scheme path-or-file & {:keys [sinkmode sinkparts sink-template source-pattern templatefields], :as options}])"
                                                                     doc  "\"Returns a Cascading Lfs tap with support for the supplied scheme,\\n  opened up on the supplied path or file object. Supported keyword\\n  options are:\\n\\n  `:sinkmode` - can be `:keep`, `:update` or `:replace`.\\n\\n  `:sinkparts` - used to constrain the segmentation of output files.\\n\\n  `:source-pattern` - Causes resulting tap to respond as a GlobHfs tap\\n  when used as source.\\n\\n  `:sink-template` - Causes resulting tap to respond as a TemplateTap\\n  when used as a sink.\\n\\n  `:templatefields` - When pattern is supplied via :sink-template,\\n  this option allows a subset of output fields to be used in the\\n  naming scheme.\"")
                                                          lfs-textline  (dict
                                                                          arglists  "([path & opts])"
                                                                          doc  "\"Creates a tap on the local filesystem using textline format.\\n\\n  Supports keyword option for `:outfields`. See\\n  `cascalog.cascading.tap/lfs-tap` for more keyword arguments.\\n\\n   See http://www.cascading.org/javadoc/cascading/tap/Lfs.html and\\n   http://www.cascading.org/javadoc/cascading/scheme/TextLine.html\"")
                                                          lvl-f  (dict
                                                                   arglists  "([max])")
                                                          mapcatfn  (dict
                                                                      arglists  "([& body])"
                                                                      macro  "true")
                                                          mapcatop  (dict)
                                                          mapfn  (dict
                                                                   arglists  "([& body])"
                                                                   macro  "true")
                                                          mapop  (dict)
                                                          memory-source-tap  (dict
                                                                               arglists  "([tuples] [fields-in tuples])")
                                                          mk-vec  (dict
                                                                    arglists  "([tuples])")
                                                          name-vars  (dict
                                                                       arglists  "([gen vars])")
                                                          num-out-fields  (dict
                                                                            arglists  "([_])")
                                                          parallelagg  (dict)
                                                          predmacro  (dict
                                                                       arglists  "([& body])"
                                                                       doc  "\"A more general but more verbose way to create predicate macros.\\n\\n   Creates a function that takes in [invars outvars] and returns a\\n   list of predicates. When making predicate macros this way, you must\\n   create intermediate variables with gen-nullable-var(s). This is\\n   because unlike the (<- [?a :> ?b] ...) way of doing pred macros,\\n   Cascalog doesn't have a declaration for the inputs/outputs.\\n\\n   See https://github.com/nathanmarz/cascalog/wiki/Predicate-macros\\n  \""
                                                                       macro  "true")
                                                          predmacro*  (dict
                                                                        arglists  "([fun])"
                                                                        doc  "\"Functional version of predmacro. See predmacro for details.\"")
                                                          prepfn  (dict
                                                                    arglists  "([args & body])"
                                                                    doc  "\"Defines a prepared operation. Pass in an argument vector of two\\n  items and return either a function or a Map with two\\n  keywords; :operate and :cleanup\""
                                                                    macro  "true")
                                                          run<-  (dict
                                                                   arglists  "([query] [queryfn & args])"
                                                                   doc  "\"A simple way to run a subquery (a query that starts with <- instead of ??<-).\"")
                                                          select-fields  (dict
                                                                           arglists  "([gen fields])"
                                                                           doc  "\"Select fields of a named generator.\\n\\n  Example:\\n  (<- [?a ?b ?sum]\\n      (+ ?a ?b :> ?sum)\\n      ((select-fields generator [\\\"?a\\\" \\\"?b\\\"]) ?a ?b))\"")
                                                          sequence-file  (dict
                                                                           arglists  "([field-names])")
                                                          set-cascading-platform!  (dict
                                                                                     arglists  "([])")
                                                          set-in-memory-platform!  (dict
                                                                                     arglists  "([])")
                                                          stdout  (dict
                                                                    arglists  "([])"
                                                                    doc  "\"Creates a tap that prints tuples sunk to it to standard\\n   output. Useful for experimentation in the REPL.\"")
                                                          test-them  (dict
                                                                       arglists  "([])")
                                                          text-line  (dict
                                                                       arglists  "([] [field-names] [source-fields sink-fields] [source-fields sink-fields compression])")
                                                          to-tail  (dict
                                                                     arglists  "([g & {:keys [fields]}])")
                                                          union  (dict
                                                                   arglists  "([& gens])"
                                                                   doc  "\"Merge the tuples from the subqueries together into a single\\n  subquery and ensure uniqueness of tuples.\"")
                                                          with-job-conf  (dict
                                                                           arglists  "([conf & body])"
                                                                           doc  "\"Modifies the job conf for queries executed within the form. Nested\\n   with-job-conf calls will merge configuration maps together, with\\n   innermost calls taking precedence on conflicting keys.\""
                                                                           macro  "true")
                                                          with-serializations  (dict
                                                                                 arglists  "([serial-vec & forms])"
                                                                                 doc  "\"Enables the supplied serializations for queries executed within the\\n  form. Serializations should be provided as a vector of strings or\\n  classes, like so:\\n\\n  (import 'org.apache.hadoop.io.serializer.JavaSerialization)\\n  (with-serializations [JavaSerialization]\\n     (?<- ...))\\n\\n  Serializations nest; nested calls to with-serializations will merge\\n  and unique with serializations currently specified by other calls to\\n  `with-serializations` or `with-job-conf`.\""
                                                                                 macro  "true")))
                        cascalog.cascading.def  (dict
                                                  aliases  (dict
                                                             d  "cascalog.logic.def"
                                                             s  "cascalog.logic.fn")
                                                  interns  (dict
                                                             defprepfn  (dict
                                                                          arglists  "([name doc-string? attr-map? [fn-args*] body])"
                                                                          doc  "\"Defines a prepared operation.\""
                                                                          macro  "true")
                                                             meta-update  (dict
                                                                            arglists  "([sym f])"
                                                                            doc  "\"Returns the supplied symbol with the supplied `attr` map conj-ed\\n  onto the symbol's current metadata.\"")
                                                             prepared  (dict
                                                                         arglists  "([afn])"
                                                                         doc  "\"Marks the supplied operation as needing to be prepared by\\n  Cascading. The supplied op should take two arguments and return\\n  another IFn for use by Cascading.\"")
                                                             prepared?  (dict
                                                                          arglists  "([op])"
                                                                          doc  "\"Returns true if the supplied operation needs to be supplied the\\n  FlowProcess and operation call by Cascading on instantiation, false\\n  otherwise.\"")
                                                             prepfn  (dict
                                                                       arglists  "([args & body])"
                                                                       doc  "\"Defines a prepared operation. Pass in an argument vector of two\\n  items and return either a function or a Map with two\\n  keywords; :operate and :cleanup\""
                                                                       macro  "true")))
                        cascalog.cascading.io  (dict
                                                 aliases  (dict
                                                            conf  "cascalog.cascading.conf"
                                                            hadoop  "hadoop-util.core"
                                                            io  "clojure.java.io"
                                                            s  "schema.core")
                                                 interns  (dict
                                                            delete-all  (dict
                                                                          arglists  "([bindings])"
                                                                          doc  "\"delete-file-recursively is preemptive delete on exiting the code\\n   block for repl and tests run in the same process.\"")
                                                            delete-all-fs  (dict
                                                                             arglists  "([fs paths])")
                                                            delete-file-recursively  (dict
                                                                                       arglists  "([f & [silently]])"
                                                                                       doc  "\"Delete file f. If it's a directory, recursively delete all its contents.\\nRaise an exception if any deletion fails unless silently is true.\"")
                                                            get-bytes  (dict
                                                                         arglists  "([bytes])"
                                                                         doc  "\"Extracts a byte array from a Hadoop BytesWritable object. As\\n  mentioned in the [BytesWritable javadoc](http://goo.gl/cjjlD), only\\n  the first N bytes are valid, where N = `(.getLength byteswritable)`.\"")
                                                            log-levels  (dict)
                                                            temp-dir  (dict
                                                                        arglists  "([sub-path])"
                                                                        doc  "\"1) creates a directory in System.getProperty(\\\"java.io.tmpdir\\\")\\n   2) calls tempDir.deleteOn Exit() so the file is deleted by the jvm.\\n   reference: ;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4735419\\n   deleteOnExit is last resort cleanup on jvm exit.\"")
                                                            temp-path  (dict
                                                                         arglists  "([sub-path])")
                                                            tmp-dir-property  (dict
                                                                                doc  "\"Use this variable as key in JobConf if you want to override the\\n  root of temporary paths. See with-fs-tmp.\"")
                                                            unique-tmp-file  (dict
                                                                               arglists  "([s])"
                                                                               doc  "\"Inputs: [s :- s/Str]\\n  Returns: File\"")
                                                            uuid  (dict
                                                                    arglists  "([])")
                                                            with-fs-tmp  (dict
                                                                           arglists  "([[fs-sym & tmp-syms] & body])"
                                                                           doc  "\"Generates unique, temporary path names as subfolders of <root>/cascalog_reserved.\\n  <root> by default will be '/tmp', but you can configure it via the\\n  JobConf property `cascalog.io/tmp-dir-property`.\""
                                                                           macro  "true")
                                                            with-log-level  (dict
                                                                              arglists  "([level & body])"
                                                                              macro  "true")
                                                            with-tmp-files  (dict
                                                                              arglists  "([bindings & body])"
                                                                              macro  "true")
                                                            write-lines  (dict
                                                                           arglists  "([f lines])"
                                                                           doc  "\"Writes lines (a seq) to f, separated by newlines.  f is opened with\\n  writer, and automatically closed at the end of the sequence.\"")))
                        cascalog.cascading.stats  (dict
                                                    aliases  (dict
                                                               s  "schema.core")
                                                    interns  (dict
                                                               *flow-process*  (dict)
                                                               *op-call*  (dict)
                                                               CounterGroup  (dict)
                                                               CounterMap  (dict
                                                                             doc  "\"Clojure representation of Cascading's counters.\"")
                                                               CounterName  (dict)
                                                               StatsMap  (dict
                                                                           doc  "\"Clojure representation of the cascading.stats.CascadingStats data\\n  structure.\"")
                                                               clojure-file  (dict
                                                                               doc  "\"Returns a stats handler that prints the final stats map to the\\n  supplied file (or output stream, etc, see clojure.java.io/writer) as\\n  a Clojure data structure.\"")
                                                               counter-map  (dict
                                                                              arglists  "([stats])"
                                                                              doc  "\"Inputs: [stats :- CascadingStats]\\n  Returns: CounterMap\\n\\n  Digests the supplied stats object and returns a map of \"")
                                                               default-group  (dict
                                                                                doc  "\"This is the default group name for any stats recorded in the course\\n  of a Cascalog job.\"")
                                                               inc!  (dict
                                                                       arglists  "([counter] [group counter])"
                                                                       doc  "\"Inputs: ([counter :- CounterName] [group :- CounterGroup counter :- CounterName])\\n\\n  Increments the supplied counter in the supplied group by 1. Only\\n  takes effect in the context of a Cascading flow.\"")
                                                               inc-by!  (dict
                                                                          arglists  "([counter value] [group counter value])"
                                                                          doc  "\"Inputs: ([counter :- CounterName value :- s/Int] [group :- CounterGroup counter :- CounterName value :- s/Int])\\n\\n  Increments the supplied counter in the supplied group by, you\\n  guessed it, the supplied amount. Only takes effect in the context of\\n  a Cascading flow.\"")
                                                               join  (dict
                                                                       arglists  "([coll] [separator coll])"
                                                                       doc  "\"Returns a string of all elements in coll, as returned by (seq coll),\\n   separated by an optional separator.\"")
                                                               json-file  (dict
                                                                            doc  "\"Returns a stats handler that prints the final stats map to the\\n  supplied file (or output stream, etc, see clojure.java.io/writer) as\\n  a JSON data structure.\"")
                                                               map->json  (dict
                                                                            arglists  "([m])"
                                                                            doc  "\"My own little JSON fn to prevent pulling in a JSON library.\"")
                                                               map-by  (dict
                                                                         arglists  "([f xs])"
                                                                         doc  "\"Takes a value-generating function and a sequence and returns a map\\n  with the original seq elements as keys, and (f key) as each\\n  value.\"")
                                                               stats-map  (dict
                                                                            arglists  "([stats])"
                                                                            doc  "\"Inputs: [stats :- CascadingStats]\\n  Returns: StatsMap\\n\\n  Returns a Clojure map of relevant stats from the Cascading stats\\n  object.\"")
                                                               stdout  (dict
                                                                         arglists  "([] [group])"
                                                                         doc  "\"Inputs: ([] [group :- CounterGroup])\"")
                                                               to-file  (dict
                                                                          arglists  "([path json?])"
                                                                          doc  "\"Inputs: [path json? :- s/Bool]\\n\\n  path is passed to clojure.java.io/writer, so the argument can be a\\n   Writer, BufferedWriter, OutputStream, File, URI, URL, Socket, and\\n   String.\"")))
                        cascalog.logic.def  (dict
                                              aliases  (dict
                                                         s  "cascalog.logic.fn")
                                              interns  (dict
                                                         ->ParallelAggregator  (dict
                                                                                 arglists  "([init-var combine-var present-var])"
                                                                                 doc  "\"Positional factory function for class cascalog.logic.def.ParallelAggregator.\"")
                                                         ->ParallelBuffer  (dict
                                                                             arglists  "([init-var combine-var present-var num-intermediate-vars-fn buffer-var])"
                                                                             doc  "\"Positional factory function for class cascalog.logic.def.ParallelBuffer.\"")
                                                         ->Prepared  (dict
                                                                       arglists  "([op])"
                                                                       doc  "\"Positional factory function for class cascalog.logic.def.Prepared.\"")
                                                         aggregatefn  (dict
                                                                        arglists  "([& body])"
                                                                        macro  "true")
                                                         aggregateop  (dict)
                                                         aggregateop?  (dict
                                                                         arglists  "([op])")
                                                         bufferfn  (dict
                                                                     arglists  "([& body])"
                                                                     macro  "true")
                                                         bufferiterfn  (dict
                                                                         arglists  "([& body])"
                                                                         macro  "true")
                                                         bufferiterop  (dict)
                                                         bufferop  (dict)
                                                         bufferop?  (dict
                                                                      arglists  "([op])")
                                                         defaggregatefn  (dict
                                                                           arglists  "([name doc-string? attr-map? [fn-args*] body])"
                                                                           doc  "\"Defines a filtering operation.\""
                                                                           macro  "true")
                                                         defaggregateop  (dict
                                                                           arglists  "([sym__33167__auto__ & body__33168__auto__])"
                                                                           macro  "true")
                                                         defbufferfn  (dict
                                                                        arglists  "([name doc-string? attr-map? [fn-args*] body])"
                                                                        doc  "\"Defines a filtering operation.\""
                                                                        macro  "true")
                                                         defbufferiterfn  (dict
                                                                            arglists  "([name doc-string? attr-map? [fn-args*] body])"
                                                                            doc  "\"Defines a filtering operation.\""
                                                                            macro  "true")
                                                         defbufferiterop  (dict
                                                                            arglists  "([sym__33167__auto__ & body__33168__auto__])"
                                                                            macro  "true")
                                                         defbufferop  (dict
                                                                        arglists  "([sym__33167__auto__ & body__33168__auto__])"
                                                                        macro  "true")
                                                         defdefop  (dict
                                                                     arglists  "([sym & body])"
                                                                     doc  "\"Helper macro to define the def*op macros.\""
                                                                     macro  "true")
                                                         defdeprecated  (dict
                                                                          arglists  "([old new])"
                                                                          macro  "true")
                                                         deffilterfn  (dict
                                                                        arglists  "([name doc-string? attr-map? [fn-args*] body])"
                                                                        doc  "\"Defines a filtering operation.\""
                                                                        macro  "true")
                                                         deffilterop  (dict
                                                                        arglists  "([sym__33167__auto__ & body__33168__auto__])"
                                                                        macro  "true")
                                                         defhelper  (dict
                                                                      arglists  "([name op-sym body])")
                                                         defmapcatfn  (dict
                                                                        arglists  "([name doc-string? attr-map? [fn-args*] body])"
                                                                        doc  "\"Defines a mapcat operation.\""
                                                                        macro  "true")
                                                         defmapcatop  (dict
                                                                        arglists  "([sym__33167__auto__ & body__33168__auto__])"
                                                                        macro  "true")
                                                         defmapfn  (dict
                                                                     arglists  "([name doc-string? attr-map? [fn-args*] body])"
                                                                     doc  "\"Defines a map operation.\""
                                                                     macro  "true")
                                                         defmapop  (dict
                                                                     arglists  "([sym__33167__auto__ & body__33168__auto__])"
                                                                     macro  "true")
                                                         defparallelagg  (dict
                                                                           arglists  "([name doc-string? attr-map? & {:keys [init-var combine-var present-var]}])"
                                                                           doc  "\"Binds an efficient aggregator to the supplied symbol. A parallel\\n  aggregator processes each tuple through an initializer function,\\n  then combines the results each tuple's initialization until one\\n  result is achieved. `defparallelagg` accepts two keyword arguments:\\n\\n  :init-var -- A var bound to a fn that accepts raw tuples and returns\\n  an intermediate result; #'one, for example.\\n\\n  :combine-var -- a var bound to a fn that both accepts and returns\\n  intermediate results.\\n\\n  For example,\\n\\n  (defparallelagg sum\\n  :init-var #'identity\\n  :combine-var #'+)\\n\\n  Used as\\n\\n  (sum ?x :> ?y)\""
                                                                           macro  "true")
                                                         defparallelbuf  (dict
                                                                           arglists  "([name doc-string? attr-map? & {:keys [init-var combine-var extract-var num-intermediate-vars-fn buffer-var]}])"
                                                                           macro  "true")
                                                         filterfn  (dict
                                                                     arglists  "([& body])"
                                                                     macro  "true")
                                                         filterop  (dict)
                                                         map->ParallelAggregator  (dict
                                                                                    arglists  "([m__6289__auto__])"
                                                                                    doc  "\"Factory function for class cascalog.logic.def.ParallelAggregator, taking a map of keywords to field values.\"")
                                                         map->ParallelBuffer  (dict
                                                                                arglists  "([m__6289__auto__])"
                                                                                doc  "\"Factory function for class cascalog.logic.def.ParallelBuffer, taking a map of keywords to field values.\"")
                                                         map->Prepared  (dict
                                                                          arglists  "([m__6289__auto__])"
                                                                          doc  "\"Factory function for class cascalog.logic.def.Prepared, taking a map of keywords to field values.\"")
                                                         mapcatfn  (dict
                                                                     arglists  "([& body])"
                                                                     macro  "true")
                                                         mapcatop  (dict)
                                                         mapfn  (dict
                                                                  arglists  "([& body])"
                                                                  macro  "true")
                                                         mapop  (dict)
                                                         meta-conj  (dict
                                                                      arglists  "([sym attr])"
                                                                      doc  "\"Returns the supplied symbol with the supplied `attr` map conj-ed\\n  onto the symbol's current metadata.\"")
                                                         meta-update  (dict
                                                                        arglists  "([sym f])"
                                                                        doc  "\"Returns the supplied symbol with the supplied `attr` map conj-ed\\n  onto the symbol's current metadata.\"")
                                                         name-with-attributes  (dict
                                                                                 arglists  "([name macro-args])"
                                                                                 doc  "\"To be used in macro definitions.\\n   Handles optional docstrings and attribute maps for a name to be defined\\n   in a list of macro arguments. If the first macro argument is a string,\\n   it is added as a docstring to name and removed from the macro argument\\n   list. If afterwards the first macro argument is a map, its entries are\\n   added to the name's metadata map and the map is removed from the\\n   macro argument list. The return value is a vector containing the name\\n   with its extended metadata map and the list of unprocessed macro\\n   arguments.\"")
                                                         parallelagg  (dict)
                                                         throw-illegal  (dict
                                                                          arglists  "([& xs])")
                                                         update-arglists  (dict
                                                                            arglists  "([sym [form :as args]])"
                                                                            doc  "\"Scans the forms of a def* operation and adds an appropriate\\n  `:arglists` entry to the supplied `sym`'s metadata.\"")))
                        cascalog.logic.ops  (dict
                                              aliases  (dict
                                                         d  "cascalog.logic.def"
                                                         impl  "cascalog.logic.ops-impl"
                                                         s  "cascalog.logic.fn"
                                                         v  "cascalog.logic.vars")
                                              interns  (dict
                                                         !count  (dict)
                                                         <-  (dict
                                                               arglists  "([outvars & predicates])"
                                                               doc  "\"Constructs a query or predicate macro from a list of\\n  predicates. Predicate macros support destructuring of the input and\\n  output variables.\""
                                                               macro  "true")
                                                         ?-  (dict
                                                               arglists  "([& bindings])"
                                                               doc  "\"Executes 1 or more queries and emits the results of each query to\\n  the associated tap.\\n\\n  Syntax: (?- sink1 query1 sink2 query2 ...)  or (?- query-name sink1\\n  query1 sink2 query2)\\n\\n   If the first argument is a string, that will be used as the name\\n  for the query and will show up in the JobTracker UI.\"")
                                                         ?<-  (dict
                                                                arglists  "([& args])"
                                                                doc  "\"Helper that both defines and executes a query in a single call.\\n\\n  Syntax: (?<- out-tap out-vars & predicates) or (?<- \\\"myflow\\\"\\n  out-tap out-vars & predicates) ; flow name must be a static string\\n  within the ?<- form.\""
                                                                macro  "true")
                                                         ??-  (dict
                                                                arglists  "([& args])"
                                                                doc  "\"Executes one or more queries and returns a seq of seqs of tuples\\n   back, one for each subquery given.\\n\\n  Syntax: (??- query1 query2 ...) or (??- query-name query1 query2 ...)\\n\\n  If the first argument is a string, that will be used as the name\\n  for the query and will show up in the JobTracker UI.\"")
                                                         ??<-  (dict
                                                                 arglists  "([& args])"
                                                                 doc  "\"Like ??-, but for ?<-. Returns a seq of tuples.\""
                                                                 macro  "true")
                                                         aggregatefn  (dict
                                                                        arglists  "([& body])"
                                                                        macro  "true")
                                                         aggregateop  (dict)
                                                         all  (dict
                                                                arglists  "([& ops])"
                                                                doc  "\"Accepts any number of filtering ops and returns a new op that\\n  checks that every every one of the original filters passes. For\\n  example:\\n\\n  ((all #'even? #'positive? #'small?) ?x) ;; within some query\\n\\n  Is equivalent to:\\n\\n  ;; within some query\\n  (even? ?x :> ?temp1)\\n  (positive? ?x :> ?temp2)\\n  (small? ?x) :> ?temp3)\\n  (and ?temp1 ?temp2 ?temp3)\"")
                                                         any  (dict
                                                                arglists  "([& ops])"
                                                                doc  "\"Accepts any number of filtering ops and returns a new op that\\n  checks that at least one of the original filters passes. For\\n  example:\\n\\n  ((any #'even? #'positive? #'small?) ?x) ;; within some query\\n\\n  Is equivalent to:\\n\\n  ;; within some query\\n  (even? ?x :> ?temp1)\\n  (positive? ?x :> ?temp2)\\n  (small? ?x :> ?temp3)\\n  (or ?temp1 ?temp2 ?temp3)\"")
                                                         avg  (dict
                                                                doc  "\"Predicate operation that produces the average value of the\\n  supplied input variable. For example:\\n\\n  (let [src [[1] [2]]]\\n    (<- [?avg]\\n        (src ?x)\\n        (avg ?x :> ?avg)))\\n  ;;=> ([1.5])\"")
                                                         bufferfn  (dict
                                                                     arglists  "([& body])"
                                                                     macro  "true")
                                                         bufferiterfn  (dict
                                                                         arglists  "([& body])"
                                                                         macro  "true")
                                                         bufferiterop  (dict)
                                                         bufferop  (dict)
                                                         cascalog-tap  (dict
                                                                         arglists  "([source sink])")
                                                         collectify  (dict
                                                                       arglists  "([obj])")
                                                         combine  (dict
                                                                    arglists  "([& [g & gens]])"
                                                                    doc  "\"Merge the tuples from the subqueries together into a single\\n  subquery. Doesn't ensure uniqueness of tuples.\"")
                                                         comp  (dict
                                                                 arglists  "([& ops])"
                                                                 doc  "\"Accepts any number of predicate ops and returns an op that is the\\n  composition of those ops.\\n\\n  (require '[cascalog.ops :as c])\\n  ((c/comp #'str #'+) ?x ?y :> ?sum-string) ;; within some query\\n\\n  Is equivalent to:\\n\\n  ;; within some query\\n  (+ ?x ?y :> ?intermediate)\\n  (str ?intermediate :> ?sum-string)\"")
                                                         compile-flow  (dict
                                                                         arglists  "([& args])"
                                                                         doc  "\"Inputs: [& args]\\n  Returns: ClojureFlow\\n\\n  Attaches output taps to some number of subqueries and creates a\\n  Cascading flow. The flow can be executed with `.complete`, or\\n  introspection can be done on the flow.\\n\\n  Syntax: (compile-flow sink1 query1 sink2 query2 ...)\\n  or (compile-flow flow-name sink1 query1 sink2 query2)\\n\\n   If the first argument is a string, that will be used as the name\\n  for the query and will show up in the JobTracker UI.\"")
                                                         compile-hadoop  (dict
                                                                           arglists  "([fd])"
                                                                           doc  "\"Inputs: [fd :- FlowDef]\\n  Returns: HadoopFlow\\n\\n  Compiles the supplied FlowDef into a Hadoop flow.\"")
                                                         construct  (dict
                                                                      arglists  "([output-fields raw-predicates])"
                                                                      doc  "\"Parses predicates and output fields and returns a proper subquery.\"")
                                                         count  (dict)
                                                         cross-join  (dict)
                                                         defaggregatefn  (dict
                                                                           arglists  "([name doc-string? attr-map? [fn-args*] body])"
                                                                           doc  "\"Defines a filtering operation.\""
                                                                           macro  "true")
                                                         defaggregateop  (dict
                                                                           arglists  "([sym__33167__auto__ & body__33168__auto__])"
                                                                           macro  "true")
                                                         defalias  (dict
                                                                     arglists  "([name orig] [name orig doc])"
                                                                     doc  "\"Defines an alias for a var: a new var with the same root binding (if\\n  any) and similar metadata. The metadata of the alias is its initial\\n  metadata (as provided by def) merged into the metadata of the original.\""
                                                                     macro  "true")
                                                         defbufferfn  (dict
                                                                        arglists  "([name doc-string? attr-map? [fn-args*] body])"
                                                                        doc  "\"Defines a filtering operation.\""
                                                                        macro  "true")
                                                         defbufferiterfn  (dict
                                                                            arglists  "([name doc-string? attr-map? [fn-args*] body])"
                                                                            doc  "\"Defines a filtering operation.\""
                                                                            macro  "true")
                                                         defbufferiterop  (dict
                                                                            arglists  "([sym__33167__auto__ & body__33168__auto__])"
                                                                            macro  "true")
                                                         defbufferop  (dict
                                                                        arglists  "([sym__33167__auto__ & body__33168__auto__])"
                                                                        macro  "true")
                                                         deffilterfn  (dict
                                                                        arglists  "([name doc-string? attr-map? [fn-args*] body])"
                                                                        doc  "\"Defines a filtering operation.\""
                                                                        macro  "true")
                                                         deffilterop  (dict
                                                                        arglists  "([sym__33167__auto__ & body__33168__auto__])"
                                                                        macro  "true")
                                                         defmain  (dict
                                                                    arglists  "([name & forms])"
                                                                    doc  "\"Defines an AOT-compiled function with the supplied\\n  `name`. Containing namespace must be marked for AOT compilation to\\n  have any effect.\""
                                                                    macro  "true")
                                                         defmapcatfn  (dict
                                                                        arglists  "([name doc-string? attr-map? [fn-args*] body])"
                                                                        doc  "\"Defines a mapcat operation.\""
                                                                        macro  "true")
                                                         defmapcatop  (dict
                                                                        arglists  "([sym__33167__auto__ & body__33168__auto__])"
                                                                        macro  "true")
                                                         defmapfn  (dict
                                                                     arglists  "([name doc-string? attr-map? [fn-args*] body])"
                                                                     doc  "\"Defines a map operation.\""
                                                                     macro  "true")
                                                         defmapop  (dict
                                                                     arglists  "([sym__33167__auto__ & body__33168__auto__])"
                                                                     macro  "true")
                                                         defnk  (dict
                                                                  arglists  "([fn-name & fn-tail])"
                                                                  doc  "\"Define a function accepting keyword arguments. Symbols up to the first\\n keyword in the parameter list are taken as positional arguments.  Then\\n an alternating sequence of keywords and defaults values is expected. The\\n values of the keyword arguments are available in the function body by\\n virtue of the symbol corresponding to the keyword (cf. :keys destructuring).\\n defnk accepts an optional docstring as well as an optional metadata map.\""
                                                                  macro  "true")
                                                         defparallelagg  (dict
                                                                           arglists  "([name doc-string? attr-map? & {:keys [init-var combine-var present-var]}])"
                                                                           doc  "\"Binds an efficient aggregator to the supplied symbol. A parallel\\n  aggregator processes each tuple through an initializer function,\\n  then combines the results each tuple's initialization until one\\n  result is achieved. `defparallelagg` accepts two keyword arguments:\\n\\n  :init-var -- A var bound to a fn that accepts raw tuples and returns\\n  an intermediate result; #'one, for example.\\n\\n  :combine-var -- a var bound to a fn that both accepts and returns\\n  intermediate results.\\n\\n  For example,\\n\\n  (defparallelagg sum\\n  :init-var #'identity\\n  :combine-var #'+)\\n\\n  Used as\\n\\n  (sum ?x :> ?y)\""
                                                                           macro  "true")
                                                         defprepfn  (dict
                                                                      arglists  "([name doc-string? attr-map? [fn-args*] body])"
                                                                      doc  "\"Defines a prepared operation.\""
                                                                      macro  "true")
                                                         distinct-count  (dict
                                                                           doc  "\"Predicate operation that produces a count of all distinct\\n  values of the supplied input variable. For example:\\n\\n  (let [src [[1] [2] [2]]]\\n  (<- [?count]\\n      (src ?x)\\n      (distinct-count ?x :> ?count)))\\n  ;;=> ([2])\"")
                                                         div  (dict
                                                                arglists  "([f & rest])"
                                                                doc  "\"Perform floating point division on the arguments. Use this instead\\n   of / in Cascalog queries since / produces Ratio types which aren't\\n   serializable by Hadoop.\"")
                                                         each  (dict
                                                                 arglists  "([op])"
                                                                 doc  "\"Accepts an operation and returns a predicate macro that maps `op`\\n  across any number of input variables. For example:\\n\\n  ((each #'str) ?x ?y ?z :> ?x-str ?y-str ?z-str) ;; within some query\\n\\n  Is equivalent to\\n\\n  ;; within some query\\n  (str ?x :> ?x-str)\\n  (str ?y :> ?y-str)\\n  (str ?z :> ?z-str)\"")
                                                         expand-query  (dict
                                                                         arglists  "([outvars & predicates])"
                                                                         macro  "true")
                                                         explain  (dict
                                                                    arglists  "([outfile query] [outfile sink-tap query])"
                                                                    doc  "\"Explains a query (by outputting a DOT file).\\n\\n  outfile  - String location for DOT file output.\\n  sink-tap - Sink tap for query. Shows on query explanation. Defaults to stdout if omitted.\\n  query    - Query to be explained.\\n\\n  Syntax: (explain outfile query)  or (explain outfile sink query)\\n\\n  Ex: (explain \\\"outfile.dot\\\" (<- [?a ?b] ([[1 2]] ?a ?b)))\\n  \"")
                                                         filterfn  (dict
                                                                     arglists  "([& body])"
                                                                     macro  "true")
                                                         filterop  (dict)
                                                         first-n  (dict
                                                                    arglists  "([gen n & options__39000__auto__])"
                                                                    doc  "\"Accepts a generator and a number `n` and returns a subquery that\\n   produces the first n elements from the supplied generator. Two\\n   boolean keyword arguments are supported:\\n\\n  :sort -- accepts a vector of variables on which to sort. Defaults to\\n           nil (unsorted).\\n  :reverse -- If true, sorts items in reverse order. (false by default).\\n\\n  For example:\\n\\n  (def src [[1] [3] [2]]) ;; produces 3 tuples\\n\\n  ;; produces ([1 2] [3 4] [2 3]) when executed\\n  (def query (<- [?x ?y] (src ?x) (inc ?x :> ?y)))\\n\\n  ;; produces ([3 4]) when executed\\n  (first-n query 1 :sort [\\\"?x\\\"] :reverse true)\"")
                                                         fixed-sample  (dict
                                                                         arglists  "([gen n])"
                                                                         doc  "\"Returns a subquery getting a random sample of n elements from the generator\"")
                                                         fixed-sample-agg  (dict
                                                                             arglists  "([amt])")
                                                         get-out-fields  (dict
                                                                           arglists  "([_])"
                                                                           doc  "\"Get the fields of a generator.\"")
                                                         hfs-seqfile  (dict
                                                                        arglists  "([path & opts])"
                                                                        doc  "\"Creates a tap on HDFS using sequence file format. Different\\n   filesystems can be selected by using different prefixes for `path`.\\n\\n  Supports keyword option for `:outfields`. See\\n  `cascalog.cascading.tap/hfs-tap` for more keyword arguments.\\n\\n   See http://www.cascading.org/javadoc/cascading/tap/Hfs.html and\\n   http://www.cascading.org/javadoc/cascading/scheme/SequenceFile.html\"")
                                                         hfs-tap  (dict
                                                                    arglists  "([scheme path-or-file & {:keys [sinkmode sinkparts sink-template source-pattern templatefields], :as options}])"
                                                                    doc  "\"Returns a Cascading Hfs tap with support for the supplied scheme,\\n  opened up on the supplied path or file object. Supported keyword\\n  options are:\\n\\n  `:sinkmode` - can be `:keep`, `:update` or `:replace`.\\n\\n  `:sinkparts` - used to constrain the segmentation of output files.\\n\\n  `:source-pattern` - Causes resulting tap to respond as a GlobHfs tap\\n  when used as source.\\n\\n  `:sink-template` - Causes resulting tap to respond as a TemplateTap when\\n  used as a sink.\\n\\n  `:templatefields` - When pattern is supplied via :sink-template,\\n  this option allows a subset of output fields to be used in the\\n  naming scheme.\\n\\n  See f.ex. the\\n  http://docs.cascading.org/cascading/2.0/javadoc/cascading/scheme/local/TextDelimited.html\\n  scheme.\"")
                                                         hfs-textline  (dict
                                                                         arglists  "([path & opts])"
                                                                         doc  "\"Creates a tap on HDFS using textline format. Different filesystems\\n   can be selected by using different prefixes for `path`. Supported\\n   keyword options are:\\n\\n   `:outfields` - used to select the fields written to the tap\\n\\n   `:compression` - one of `:enable`, `:disable` or `:default`\\n\\n   See `cascalog.cascading.tap/hfs-tap` for more keyword arguments.\\n\\n   See http://www.cascading.org/javadoc/cascading/tap/Hfs.html and\\n   http://www.cascading.org/javadoc/cascading/scheme/TextLine.html\"")
                                                         jcompile-flow  (dict
                                                                          arglists  "([& args])"
                                                                          doc  "\"Inputs: [& args]\\n  Returns: HadoopFlow\"")
                                                         jflow-def  (dict
                                                                      arglists  "([& args])"
                                                                      doc  "\"Inputs: [& args]\\n  Returns: FlowDef\"")
                                                         juxt  (dict
                                                                 arglists  "([& ops])"
                                                                 doc  "\"Accepts any number of predicate ops and returns an op that is the\\n  juxtaposition of those ops.\\n\\n  (require '[cascalog.ops :as c])\\n  ((c/juxt #'+ #'- #'<) !x !y :> !sum !diff !mult) ;; within some query\\n\\n  Is equivalent to:\\n\\n  ;; within some query\\n  (+ !x !y :> !sum)\\n  (- !x !y :> !diff)\\n  (* !x !y :> !mult)\"")
                                                         lfs-seqfile  (dict
                                                                        arglists  "([path & opts])"
                                                                        doc  "\"Creates a tap that reads data off of the local filesystem in\\n   sequence file format.\\n\\n  Supports keyword option for `:outfields`. See\\n  `cascalog.cascading.tap/lfs-tap` for more keyword arguments.\\n\\n   See http://www.cascading.org/javadoc/cascading/tap/Lfs.html and\\n   http://www.cascading.org/javadoc/cascading/scheme/SequenceFile.html\"")
                                                         lfs-tap  (dict
                                                                    arglists  "([scheme path-or-file & {:keys [sinkmode sinkparts sink-template source-pattern templatefields], :as options}])"
                                                                    doc  "\"Returns a Cascading Lfs tap with support for the supplied scheme,\\n  opened up on the supplied path or file object. Supported keyword\\n  options are:\\n\\n  `:sinkmode` - can be `:keep`, `:update` or `:replace`.\\n\\n  `:sinkparts` - used to constrain the segmentation of output files.\\n\\n  `:source-pattern` - Causes resulting tap to respond as a GlobHfs tap\\n  when used as source.\\n\\n  `:sink-template` - Causes resulting tap to respond as a TemplateTap\\n  when used as a sink.\\n\\n  `:templatefields` - When pattern is supplied via :sink-template,\\n  this option allows a subset of output fields to be used in the\\n  naming scheme.\"")
                                                         lfs-textline  (dict
                                                                         arglists  "([path & opts])"
                                                                         doc  "\"Creates a tap on the local filesystem using textline format.\\n\\n  Supports keyword option for `:outfields`. See\\n  `cascalog.cascading.tap/lfs-tap` for more keyword arguments.\\n\\n   See http://www.cascading.org/javadoc/cascading/tap/Lfs.html and\\n   http://www.cascading.org/javadoc/cascading/scheme/TextLine.html\"")
                                                         limit  (dict
                                                                  arglists  "([n])")
                                                         limit-buffer  (dict
                                                                         arglists  "([n])")
                                                         limit-combine  (dict
                                                                          arglists  "([options n])")
                                                         limit-extract  (dict
                                                                          arglists  "([options n])")
                                                         limit-init  (dict
                                                                       arglists  "([sort-tuple & tuple])")
                                                         limit-maker  (dict
                                                                        arglists  "([n buffer-fn])")
                                                         limit-rank  (dict
                                                                       arglists  "([n])")
                                                         limit-rank-buffer  (dict
                                                                              arglists  "([n])")
                                                         mapcatfn  (dict
                                                                     arglists  "([& body])"
                                                                     macro  "true")
                                                         mapcatop  (dict)
                                                         mapfn  (dict
                                                                  arglists  "([& body])"
                                                                  macro  "true")
                                                         mapop  (dict)
                                                         max  (dict)
                                                         memory-source-tap  (dict
                                                                              arglists  "([tuples] [fields-in tuples])")
                                                         min  (dict)
                                                         mk-limit-comparator  (dict
                                                                                arglists  "([options])")
                                                         name-vars  (dict
                                                                      arglists  "([gen vars])")
                                                         negate  (dict
                                                                   arglists  "([op])"
                                                                   doc  "\"Accepts a filtering op and returns an new op that acts as the\\n  negation (or complement) of the original. For example:\\n\\n  ((negate #'string?) ?string-var) ;; within some query\\n\\n  Is equivalent to\\n\\n  ;; within some query\\n  (string? ?string-var :> ?temp-bool)\\n  (not ?temp-bool)\"")
                                                         num-out-fields  (dict
                                                                           arglists  "([_])")
                                                         parallelagg  (dict)
                                                         partial  (dict
                                                                    arglists  "([op & args])"
                                                                    doc  "\"Accepts an operation and fewer than normal arguments, and returns a\\n  new operation that can be called with the remaining unspecified\\n  args. For example, given this require and defmapop:\\n\\n  (require '[cascalog.logic.ops :as c])\\n  (defmapop plus [x y] (+ x y))\\n\\n  The following two forms are equivalent:\\n\\n  (let [plus-10 (c/partial plus 10)]\\n     (<- [?y] (src ?x) (plus-10 ?x :> ?y)))\\n\\n  (<- [?y] (src ?x) (plus-10 ?x :> ?y))\\n\\n  With the benefit that `10` doesn't need to be hardcoded into the\\n  first query.\"")
                                                         predmacro  (dict
                                                                      arglists  "([& body])"
                                                                      doc  "\"A more general but more verbose way to create predicate macros.\\n\\n   Creates a function that takes in [invars outvars] and returns a\\n   list of predicates. When making predicate macros this way, you must\\n   create intermediate variables with gen-nullable-var(s). This is\\n   because unlike the (<- [?a :> ?b] ...) way of doing pred macros,\\n   Cascalog doesn't have a declaration for the inputs/outputs.\\n\\n   See https://github.com/nathanmarz/cascalog/wiki/Predicate-macros\\n  \""
                                                                      macro  "true")
                                                         predmacro*  (dict
                                                                       arglists  "([fun])"
                                                                       doc  "\"Functional version of predmacro. See predmacro for details.\"")
                                                         prepfn  (dict
                                                                   arglists  "([args & body])"
                                                                   doc  "\"Defines a prepared operation. Pass in an argument vector of two\\n  items and return either a function or a Map with two\\n  keywords; :operate and :cleanup\""
                                                                   macro  "true")
                                                         re-parse  (dict
                                                                     arglists  "([pattern])"
                                                                     doc  "\"Accepts a regex `pattern` and a string argument `str` and returns\\n  the groups within `str` that match the supplied `pattern`.\"")
                                                         select-fields  (dict
                                                                          arglists  "([gen fields])"
                                                                          doc  "\"Select fields of a named generator.\\n\\n  Example:\\n  (<- [?a ?b ?sum]\\n      (+ ?a ?b :> ?sum)\\n      ((select-fields generator [\\\"?a\\\" \\\"?b\\\"]) ?a ?b))\"")
                                                         sequence-file  (dict
                                                                          arglists  "([field-names])")
                                                         set-cascading-platform!  (dict
                                                                                    arglists  "([])")
                                                         set-in-memory-platform!  (dict
                                                                                    arglists  "([])")
                                                         stdout  (dict
                                                                   arglists  "([])"
                                                                   doc  "\"Creates a tap that prints tuples sunk to it to standard\\n   output. Useful for experimentation in the REPL.\"")
                                                         sum  (dict)
                                                         text-line  (dict
                                                                      arglists  "([] [field-names] [source-fields sink-fields] [source-fields sink-fields compression])")
                                                         to-tail  (dict
                                                                    arglists  "([g & {:keys [fields]}])")
                                                         union  (dict
                                                                  arglists  "([& gens])"
                                                                  doc  "\"Merge the tuples from the subqueries together into a single\\n  subquery and ensure uniqueness of tuples.\"")
                                                         with-job-conf  (dict
                                                                          arglists  "([conf & body])"
                                                                          doc  "\"Modifies the job conf for queries executed within the form. Nested\\n   with-job-conf calls will merge configuration maps together, with\\n   innermost calls taking precedence on conflicting keys.\""
                                                                          macro  "true")
                                                         with-serializations  (dict
                                                                                arglists  "([serial-vec & forms])"
                                                                                doc  "\"Enables the supplied serializations for queries executed within the\\n  form. Serializations should be provided as a vector of strings or\\n  classes, like so:\\n\\n  (import 'org.apache.hadoop.io.serializer.JavaSerialization)\\n  (with-serializations [JavaSerialization]\\n     (?<- ...))\\n\\n  Serializations nest; nested calls to with-serializations will merge\\n  and unique with serializations currently specified by other calls to\\n  `with-serializations` or `with-job-conf`.\""
                                                                                macro  "true"))))
  id  "16"
  repl-type  "clj"
  session  "2fd88622-a6b6-4ec7-afab-6a5e2773051a"
  status  ("state")
)
(-->
  ns  "cascalog-check.core"
  op  "eval"
  session  "b07f713c-2fbb-44f5-ae1b-175ebc1a39a7"
  code  "(codes 3)\n"
  file  "*cider-repl cascalog-check*"
  line  44
  column  21
  pprint  "true"
  pprint-fn  "clojure.pprint/pprint"
  print-right-margin  77
  id  "18"
)
(<--
  id  "17"
  ns  "user"
  session  "2fd88622-a6b6-4ec7-afab-6a5e2773051a"
  value  "\"[{\\\"file\\\":\\\"\\\\/Users\\\\/eric\\\\/Projects\\\\/cascalog-check\\\\/src\\\\/cascalog_check\\\\/core.clj\\\",\\\"msg\\\":\\\"Kibit suggests using\\\\nconj\\\\ninstead of \\\\n(fn* [p1__98398# p2__98399#] (conj p1__98398# p2__98399#))\\\",\\\"level\\\":\\\"warning\\\",\\\"line\\\":null}]\""
)
(-->
  op  "eval"
  session  "2fd88622-a6b6-4ec7-afab-6a5e2773051a"
  code  "(do (require 'squiggly-clojure.core) (squiggly-clojure.core/check-tc 'cascalog-check.core))"
  id  "19"
)
(<--
  id  "17"
  session  "2fd88622-a6b6-4ec7-afab-6a5e2773051a"
  status  ("done")
)
(<--
  changed-namespaces  (dict)
  id  "17"
  repl-type  "clj"
  session  "2fd88622-a6b6-4ec7-afab-6a5e2773051a"
  status  ("state")
)
(<--
  id  "19"
  out  "Initializing core.typed ...\n"
  session  "2fd88622-a6b6-4ec7-afab-6a5e2773051a"
)
(<--
  ex  "class cascading.flow.FlowException"
  id  "18"
  root-ex  "class cascading.flow.FlowException"
  session  "b07f713c-2fbb-44f5-ae1b-175ebc1a39a7"
  status  ("eval-error")
)
(-->
  op  "stacktrace"
  session  "b07f713c-2fbb-44f5-ae1b-175ebc1a39a7"
  pprint-fn  "clojure.pprint/pprint"
  print-length  50
  print-level  50
  id  "20"
)
(<--
  err  "FlowException local step failed  cascading.flow.planner.FlowStepJob.blockOnJob (FlowStepJob.java:219)\n"
  id  "18"
  session  "b07f713c-2fbb-44f5-ae1b-175ebc1a39a7"
)
(<--
  id  "18"
  session  "b07f713c-2fbb-44f5-ae1b-175ebc1a39a7"
  status  ("done")
)
(<--
  changed-namespaces  (dict)
  id  "18"
  repl-type  "clj"
  session  "b07f713c-2fbb-44f5-ae1b-175ebc1a39a7"
  status  ("state")
)
(<--
  class  "cascading.flow.FlowException"
  id  "20"
  message  "local step failed"
  session  "b07f713c-2fbb-44f5-ae1b-175ebc1a39a7"
  stacktrace  ((dict "class" "cascading.flow.planner.FlowStepJob" "file" "FlowStepJob.java" "flags"
       ("java")
       "line" 219 "method" "blockOnJob" "name" "cascading.flow.planner.FlowStepJob/blockOnJob" "type" "java")
 (dict "class" "cascading.flow.planner.FlowStepJob" "file" "FlowStepJob.java" "flags"
       ("java")
       "line" 149 "method" "start" "name" "cascading.flow.planner.FlowStepJob/start" "type" "java")
 (dict "class" "cascading.flow.planner.FlowStepJob" "file" "FlowStepJob.java" "flags"
       ("java")
       "line" 124 "method" "call" "name" "cascading.flow.planner.FlowStepJob/call" "type" "java")
 (dict "class" "cascading.flow.planner.FlowStepJob" "file" "FlowStepJob.java" "flags"
       ("dup" "java")
       "line" 43 "method" "call" "name" "cascading.flow.planner.FlowStepJob/call" "type" "java")
 (dict "class" "java.util.concurrent.FutureTask" "file" "FutureTask.java" "flags"
       ("java")
       "line" 266 "method" "run" "name" "java.util.concurrent.FutureTask/run" "type" "java")
 (dict "class" "java.util.concurrent.ThreadPoolExecutor" "file" "ThreadPoolExecutor.java" "flags"
       ("java")
       "line" 1142 "method" "runWorker" "name" "java.util.concurrent.ThreadPoolExecutor/runWorker" "type" "java")
 (dict "class" "java.util.concurrent.ThreadPoolExecutor$Worker" "file" "ThreadPoolExecutor.java" "flags"
       ("java")
       "line" 617 "method" "run" "name" "java.util.concurrent.ThreadPoolExecutor$Worker/run" "type" "java")
 (dict "class" "java.lang.Thread" "file" "Thread.java" "flags"
       ("java")
       "line" 745 "method" "run" "name" "java.lang.Thread/run" "type" "java"))
)
(<--
  id  "20"
  session  "b07f713c-2fbb-44f5-ae1b-175ebc1a39a7"
  status  ("done")
)
(-->
  op  "load-file"
  session  "b07f713c-2fbb-44f5-ae1b-175ebc1a39a7"
  file  "(ns cascalog-check.core\n  (:require [cascalog.logic.ops :as c]\n            [cascalog.cascading.stats :as stats]\n            [cascalog.cascading.io :as io]\n            [cascalog.logic.def :as d]\n            [cascalog.cascading.def :as cd]\n            [cascalog.api :refer :all]))\n\n(defn foo\n  \"I don't do a whole lot.\"\n  [x]\n  (println x \"Hello, World!\"))\n\n(defn run<-\n  \"A simple way to run a subquery (a query that starts with <- instead of ??<-).\"\n  ([query]\n   (first (??- query)))\n  ([queryfn & args]\n   (run<- (apply queryfn args))))\n\n\n(def  cat-tap [[\"foo\" 1 3]\n               [\"foo\" 2 100]\n               [\"foo\" 3 8]\n               [\"foo\" 4 12]\n               [\"bar\" 1 5]\n               [\"bar\" 2 22]\n               [\"bar\" 3 36]\n               [\"bar\" 4 212]\n               [\"baz\" 1 3]\n               [\"baz\" 2 100]\n               [\"baz\" 3 8]\n               [\"baz\" 4 300]])\n\n(def foo-catv '([3 100 8 12]))\n(def foo-baz-catv '([3 100 8]))\n(def foo-bar-catv '([3 100 8 12] [5 22 36 212]))\n(def foo-bar-baz-catv '([3 100 8] [5 22 36 212]))\n\n(defn lf [max lvl] (< lvl max))\n\n(defn lvl-f\n  [max]\n  (filterfn [lvl] (lf max lvl)))\n\n(defn codes [max]\n  (let [lvl-filter (lvl-f max)]\n    (??<- [?id ?lvl ?code]\n          (cat-tap ?id ?lvl ?code)\n          (:sort ?lvl)\n                                        ;(< ?lvl max)\n                                        ;(lf max ?lvl)\n          (lvl-filter ?lvl)\n          )))\n\n(defn catv-filter\n  \"returns true or false if a vector matches the categories or not.\n  categoriey can be nil or a lists of category vectors.\n  The vector will be shortened to match the comparison\n  category vectors as needed so that sub categories will match. \"\n  [categories v]\n  (if (empty? categories)\n    true\n    (reduce #(or (= (vec (take (count %2) v)) %2) %1) false categories)))\n\n(defn catv-f\n  \"Returns a function to filter vectors by a set of categories.\"\n  [categories]\n  (filterfn [v]\n            (catv-filter categories v)))\n\n\n\n\n(defbufferfn mk-vec [tuples]\n  [[(reduce #(conj %1 %2) [] (map first tuples))]])\n\n(defbufferfn dosum [tuples] [(reduce + (map first tuples))])\n\n\n\n(defn cats-sub []\n  (<- [?id ?catv]\n      (cat-tap ?id ?lvl ?code)\n      (:sort ?lvl)\n      (mk-vec ?code :> ?catv)))\n\n(defn cats [s]\n  (let [prods (cats-sub)\n        catf (catv-f s)]\n    (??<- [?id ?catv ?res]\n          (prods ?id ?catv)\n          (catv-filter s ?catv :> ?res)\n          (catf ?catv))))\n\n(defn filter-test [s]\n  (let [f (catv-filter s)]\n    (filter #(f (second %)) (run<- (cats-sub)))))\n\n(defn test-them []\n  {:cats (cats nil)\n   :allcats (filter-test nil)\n   :foo (filter-test foo-catv)\n   :foo-baz (filter-test foo-baz-catv)})\n"
  file-path  "/Users/eric/Projects/cascalog-check/src/cascalog_check/core.clj"
  file-name  "core.clj"
  id  "21"
)
(<--
  id  "21"
  session  "b07f713c-2fbb-44f5-ae1b-175ebc1a39a7"
  value  "#'cascalog-check.core/test-them"
)
(<--
  id  "21"
  session  "b07f713c-2fbb-44f5-ae1b-175ebc1a39a7"
  status  ("done")
)
(<--
  changed-namespaces  (dict)
  id  "21"
  repl-type  "clj"
  session  "b07f713c-2fbb-44f5-ae1b-175ebc1a39a7"
  status  ("state")
)
(-->
  ns  "cascalog-check.core"
  op  "eval"
  session  "b07f713c-2fbb-44f5-ae1b-175ebc1a39a7"
  code  "(codes 3)\n"
  file  "*cider-repl cascalog-check*"
  line  46
  column  21
  pprint  "true"
  pprint-fn  "clojure.pprint/pprint"
  print-right-margin  77
  id  "22"
)
(<--
  id  "22"
  pprint-out  "([\"foo\" 1 3]\n [\"foo\" 2 100]\n [\"bar\" 1 5]\n [\"bar\" 2 22]\n [\"baz\" 1 3]\n [\"baz\" 2 100])\n"
  session  "b07f713c-2fbb-44f5-ae1b-175ebc1a39a7"
)
(<--
  id  "22"
  pprint-sentinel  (dict)
  session  "b07f713c-2fbb-44f5-ae1b-175ebc1a39a7"
)
(<--
  id  "22"
  ns  "cascalog-check.core"
  session  "b07f713c-2fbb-44f5-ae1b-175ebc1a39a7"
)
(<--
  id  "22"
  session  "b07f713c-2fbb-44f5-ae1b-175ebc1a39a7"
  status  ("done")
)
